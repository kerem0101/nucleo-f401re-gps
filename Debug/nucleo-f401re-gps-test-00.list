
nucleo-f401re-gps-test-00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007794  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08007938  08007938  00017938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e58  08007e58  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e60  08007e60  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001e0  08008048  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008048  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a69  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  00029c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001660e  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ad4  00000000  00000000  00042bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866e2  00000000  00000000  0004c682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000d2db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800791c 	.word	0x0800791c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800791c 	.word	0x0800791c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9aa 	b.w	8000fb4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468e      	mov	lr, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	d969      	bls.n	8000dcc <__udivmoddi4+0xe8>
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b152      	cbz	r2, 8000d14 <__udivmoddi4+0x30>
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	f1c2 0120 	rsb	r1, r2, #32
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d12:	4094      	lsls	r4, r2
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	0c21      	lsrs	r1, r4, #16
 8000d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d1e:	fa1f f78c 	uxth.w	r7, ip
 8000d22:	fb08 e316 	mls	r3, r8, r6, lr
 8000d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2a:	fb06 f107 	mul.w	r1, r6, r7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3a:	f080 811f 	bcs.w	8000f7c <__udivmoddi4+0x298>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 811c 	bls.w	8000f7c <__udivmoddi4+0x298>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x92>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	1be4      	subs	r4, r4, r7
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa4>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xc2>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80ef 	beq.w	8000f76 <__udivmoddi4+0x292>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x160>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80f9 	bhi.w	8000faa <__udivmoddi4+0x2c6>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa4>
 8000dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xec>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 8092 	bne.w	8000efe <__udivmoddi4+0x21a>
 8000dda:	eba1 010c 	sub.w	r1, r1, ip
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2601      	movs	r6, #1
 8000de8:	0c20      	lsrs	r0, r4, #16
 8000dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dee:	fb07 1113 	mls	r1, r7, r3, r1
 8000df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df6:	fb0e f003 	mul.w	r0, lr, r3
 8000dfa:	4288      	cmp	r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x12c>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x12a>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2c0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1110 	mls	r1, r7, r0, r1
 8000e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x156>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x154>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2ca>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x9a>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa20 f407 	lsr.w	r4, r0, r7
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	40f9      	lsrs	r1, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	fa00 f306 	lsl.w	r3, r0, r6
 8000e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fb09 1118 	mls	r1, r9, r8, r1
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b8>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e90:	4288      	cmp	r0, r1
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb0:	458e      	cmp	lr, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1e2>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2b4>
 8000ebe:	458e      	cmp	lr, r1
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2b4>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x2a4>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x2a0>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x212>
 8000ede:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eea:	fa22 f306 	lsr.w	r3, r2, r6
 8000eee:	40f1      	lsrs	r1, r6
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f20:	0c0b      	lsrs	r3, r1, #16
 8000f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f26:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x260>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b8>
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b8>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1b9b      	subs	r3, r3, r6
 8000f46:	b289      	uxth	r1, r1
 8000f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f54:	fb06 f30e 	mul.w	r3, r6, lr
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x28a>
 8000f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f6a:	3e02      	subs	r6, #2
 8000f6c:	4461      	add	r1, ip
 8000f6e:	1ac9      	subs	r1, r1, r3
 8000f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0x104>
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e705      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e3      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x92>
 8000f84:	454b      	cmp	r3, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f8>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f8>
 8000f94:	4646      	mov	r6, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x28a>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1e2>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x260>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b8>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x12c>
 8000faa:	4630      	mov	r0, r6
 8000fac:	e709      	b.n	8000dc2 <__udivmoddi4+0xde>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x156>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4903      	ldr	r1, [pc, #12]	; (8000fcc <GPS_Init+0x14>)
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <GPS_Init+0x18>)
 8000fc2:	f001 fdfa 	bl	8002bba <HAL_UART_Receive_IT>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	200002dc 	.word	0x200002dc

08000fd4 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <GPS_UART_CallBack+0x60>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d010      	beq.n	8001002 <GPS_UART_CallBack+0x2e>
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <GPS_UART_CallBack+0x64>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <GPS_UART_CallBack+0x64>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	b2d1      	uxtb	r1, r2
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <GPS_UART_CallBack+0x64>)
 8000ff4:	7011      	strb	r1, [r2, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <GPS_UART_CallBack+0x60>)
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <GPS_UART_CallBack+0x68>)
 8000ffe:	5499      	strb	r1, [r3, r2]
 8001000:	e010      	b.n	8001024 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <GPS_UART_CallBack+0x68>)
 8001004:	f000 f81e 	bl	8001044 <GPS_validate>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <GPS_UART_CallBack+0x68>)
 8001010:	f000 f87a 	bl	8001108 <GPS_parse>
		rx_index = 0;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <GPS_UART_CallBack+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	2100      	movs	r1, #0
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <GPS_UART_CallBack+0x68>)
 8001020:	f002 fd20 	bl	8003a64 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	4903      	ldr	r1, [pc, #12]	; (8001034 <GPS_UART_CallBack+0x60>)
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <GPS_UART_CallBack+0x6c>)
 800102a:	f001 fdc6 	bl	8002bba <HAL_UART_Receive_IT>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001fc 	.word	0x200001fc
 8001038:	20000280 	.word	0x20000280
 800103c:	20000200 	.word	0x20000200
 8001040:	200002dc 	.word	0x200002dc

08001044 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b24      	cmp	r3, #36	; 0x24
 800105e:	d103      	bne.n	8001068 <GPS_validate+0x24>
        i++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001066:	e00c      	b.n	8001082 <GPS_validate+0x3e>
        return 0;
 8001068:	2300      	movs	r3, #0
 800106a:	e047      	b.n	80010fc <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4053      	eors	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        i++;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <GPS_validate+0x5c>
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b2a      	cmp	r3, #42	; 0x2a
 8001098:	d002      	beq.n	80010a0 <GPS_validate+0x5c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b4a      	cmp	r3, #74	; 0x4a
 800109e:	dde5      	ble.n	800106c <GPS_validate+0x28>
    }

    if(i >= 75){
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b4a      	cmp	r3, #74	; 0x4a
 80010a4:	dd01      	ble.n	80010aa <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80010a6:	2300      	movs	r3, #0
 80010a8:	e028      	b.n	80010fc <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b2a      	cmp	r3, #42	; 0x2a
 80010b4:	d119      	bne.n	80010ea <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3302      	adds	r3, #2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	490a      	ldr	r1, [pc, #40]	; (8001104 <GPS_validate+0xc0>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fee0 	bl	8003ea0 <siprintf>
    return((checkcalcstr[0] == check[0])
 80010e0:	7a3a      	ldrb	r2, [r7, #8]
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d108      	bne.n	80010fa <GPS_validate+0xb6>
 80010e8:	e001      	b.n	80010ee <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80010ea:	2300      	movs	r3, #0
 80010ec:	e006      	b.n	80010fc <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80010ee:	7a7a      	ldrb	r2, [r7, #9]
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d101      	bne.n	80010fa <GPS_validate+0xb6>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <GPS_validate+0xb8>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08007938 	.word	0x08007938

08001108 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af08      	add	r7, sp, #32
 800110e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001110:	2206      	movs	r2, #6
 8001112:	494a      	ldr	r1, [pc, #296]	; (800123c <GPS_parse+0x134>)
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f002 ff54 	bl	8003fc2 <strncmp>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d137      	bne.n	8001190 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001120:	4b47      	ldr	r3, [pc, #284]	; (8001240 <GPS_parse+0x138>)
 8001122:	9307      	str	r3, [sp, #28]
 8001124:	4b47      	ldr	r3, [pc, #284]	; (8001244 <GPS_parse+0x13c>)
 8001126:	9306      	str	r3, [sp, #24]
 8001128:	4b47      	ldr	r3, [pc, #284]	; (8001248 <GPS_parse+0x140>)
 800112a:	9305      	str	r3, [sp, #20]
 800112c:	4b47      	ldr	r3, [pc, #284]	; (800124c <GPS_parse+0x144>)
 800112e:	9304      	str	r3, [sp, #16]
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <GPS_parse+0x148>)
 8001132:	9303      	str	r3, [sp, #12]
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <GPS_parse+0x14c>)
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <GPS_parse+0x150>)
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	4b47      	ldr	r3, [pc, #284]	; (800125c <GPS_parse+0x154>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <GPS_parse+0x158>)
 8001142:	4a48      	ldr	r2, [pc, #288]	; (8001264 <GPS_parse+0x15c>)
 8001144:	4948      	ldr	r1, [pc, #288]	; (8001268 <GPS_parse+0x160>)
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f002 feca 	bl	8003ee0 <siscanf>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd70      	ble.n	8001234 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <GPS_parse+0x164>)
 8001154:	edd3 7a04 	vldr	s15, [r3, #16]
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <GPS_parse+0x164>)
 800115a:	7e1b      	ldrb	r3, [r3, #24]
 800115c:	4618      	mov	r0, r3
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	f000 f8a7 	bl	80012b4 <GPS_nmea_to_dec>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	4b40      	ldr	r3, [pc, #256]	; (800126c <GPS_parse+0x164>)
 800116c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <GPS_parse+0x164>)
 8001172:	edd3 7a03 	vldr	s15, [r3, #12]
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <GPS_parse+0x164>)
 8001178:	7e5b      	ldrb	r3, [r3, #25]
 800117a:	4618      	mov	r0, r3
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	f000 f898 	bl	80012b4 <GPS_nmea_to_dec>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <GPS_parse+0x164>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800118e:	e051      	b.n	8001234 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001190:	2206      	movs	r2, #6
 8001192:	4937      	ldr	r1, [pc, #220]	; (8001270 <GPS_parse+0x168>)
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f002 ff14 	bl	8003fc2 <strncmp>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d114      	bne.n	80011ca <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <GPS_parse+0x16c>)
 80011a2:	9305      	str	r3, [sp, #20]
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <GPS_parse+0x170>)
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <GPS_parse+0x174>)
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <GPS_parse+0x14c>)
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <GPS_parse+0x150>)
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <GPS_parse+0x154>)
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <GPS_parse+0x158>)
 80011ba:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <GPS_parse+0x15c>)
 80011bc:	4930      	ldr	r1, [pc, #192]	; (8001280 <GPS_parse+0x178>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f002 fe8e 	bl	8003ee0 <siscanf>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	e034      	b.n	8001234 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80011ca:	2206      	movs	r2, #6
 80011cc:	492d      	ldr	r1, [pc, #180]	; (8001284 <GPS_parse+0x17c>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f002 fef7 	bl	8003fc2 <strncmp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d110      	bne.n	80011fc <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <GPS_parse+0x180>)
 80011dc:	9303      	str	r3, [sp, #12]
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <GPS_parse+0x15c>)
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <GPS_parse+0x14c>)
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <GPS_parse+0x150>)
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <GPS_parse+0x154>)
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <GPS_parse+0x158>)
 80011ee:	4927      	ldr	r1, [pc, #156]	; (800128c <GPS_parse+0x184>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 fe75 	bl	8003ee0 <siscanf>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	e01b      	b.n	8001234 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80011fc:	2206      	movs	r2, #6
 80011fe:	4924      	ldr	r1, [pc, #144]	; (8001290 <GPS_parse+0x188>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f002 fede 	bl	8003fc2 <strncmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d113      	bne.n	8001234 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <GPS_parse+0x18c>)
 800120e:	9305      	str	r3, [sp, #20]
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <GPS_parse+0x190>)
 8001212:	9304      	str	r3, [sp, #16]
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <GPS_parse+0x194>)
 8001216:	9303      	str	r3, [sp, #12]
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <GPS_parse+0x174>)
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <GPS_parse+0x198>)
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <GPS_parse+0x19c>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <GPS_parse+0x1a0>)
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <GPS_parse+0x1a4>)
 8001228:	4921      	ldr	r1, [pc, #132]	; (80012b0 <GPS_parse+0x1a8>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f002 fe58 	bl	8003ee0 <siscanf>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
            return;
    }
}
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	08007940 	.word	0x08007940
 8001240:	200002b0 	.word	0x200002b0
 8001244:	200002ac 	.word	0x200002ac
 8001248:	200002a8 	.word	0x200002a8
 800124c:	200002a4 	.word	0x200002a4
 8001250:	200002a0 	.word	0x200002a0
 8001254:	2000029d 	.word	0x2000029d
 8001258:	20000290 	.word	0x20000290
 800125c:	2000029c 	.word	0x2000029c
 8001260:	20000294 	.word	0x20000294
 8001264:	20000298 	.word	0x20000298
 8001268:	08007948 	.word	0x08007948
 800126c:	20000284 	.word	0x20000284
 8001270:	08007970 	.word	0x08007970
 8001274:	200002bc 	.word	0x200002bc
 8001278:	200002b8 	.word	0x200002b8
 800127c:	200002b4 	.word	0x200002b4
 8001280:	08007978 	.word	0x08007978
 8001284:	08007998 	.word	0x08007998
 8001288:	200002c0 	.word	0x200002c0
 800128c:	080079a0 	.word	0x080079a0
 8001290:	080079bc 	.word	0x080079bc
 8001294:	200002d8 	.word	0x200002d8
 8001298:	200002d4 	.word	0x200002d4
 800129c:	200002d1 	.word	0x200002d1
 80012a0:	200002d0 	.word	0x200002d0
 80012a4:	200002cc 	.word	0x200002cc
 80012a8:	200002c8 	.word	0x200002c8
 80012ac:	200002c4 	.word	0x200002c4
 80012b0:	080079c4 	.word	0x080079c4

080012b4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80012be:	4603      	mov	r3, r0
 80012c0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80012c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001348 <GPS_nmea_to_dec+0x94>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d2:	ee17 3a90 	vmov	r3, s15
 80012d6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2264      	movs	r2, #100	; 0x64
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80012ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80012f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800134c <GPS_nmea_to_dec+0x98>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001316:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b53      	cmp	r3, #83	; 0x53
 800131e:	d002      	beq.n	8001326 <GPS_nmea_to_dec+0x72>
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b57      	cmp	r3, #87	; 0x57
 8001324:	d105      	bne.n	8001332 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	eef1 7a67 	vneg.f32	s15, s15
 800132e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	ee07 3a90 	vmov	s15, r3
}
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	42c80000 	.word	0x42c80000
 800134c:	42700000 	.word	0x42700000

08001350 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float value[8];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) GPS_UART_CallBack();
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_UART_RxCpltCallback+0x1c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_UART_RxCpltCallback+0x14>
 8001360:	f7ff fe38 	bl	8000fd4 <GPS_UART_CallBack>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200002dc 	.word	0x200002dc

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001374:	f000 fb4a 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001378:	f000 f820 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137c:	f000 f8de 	bl	800153c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001380:	f000 f8b2 	bl	80014e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001384:	f000 f886 	bl	8001494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_SET);
  GPS_Init();
 8001388:	f7ff fe16 	bl	8000fb8 <GPS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(500);
 800138c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001390:	f000 fbae 	bl	8001af0 <HAL_Delay>
	value[0]=GPS.dec_latitude;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <main+0x40>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <main+0x44>)
 800139a:	6013      	str	r3, [r2, #0]
	value[1]=GPS.dec_longitude;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <main+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <main+0x44>)
 80013a2:	6053      	str	r3, [r2, #4]
//	value[2]=GPS.altitude_ft;
//	value[3]=GPS.date;
//	value[4]=GPS.speed_km;
//	value[5]=GPS.nmea_latitude;
//	value[6]=GPS.nmea_longitude;
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013a4:	2120      	movs	r1, #32
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <main+0x48>)
 80013a8:	f000 ff07 	bl	80021ba <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80013ac:	e7ee      	b.n	800138c <main+0x1c>
 80013ae:	bf00      	nop
 80013b0:	20000284 	.word	0x20000284
 80013b4:	20000364 	.word	0x20000364
 80013b8:	40020000 	.word	0x40020000

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	; 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fb4a 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <SystemClock_Config+0xd0>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a28      	ldr	r2, [pc, #160]	; (800148c <SystemClock_Config+0xd0>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <SystemClock_Config+0xd0>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <SystemClock_Config+0xd4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <SystemClock_Config+0xd4>)
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <SystemClock_Config+0xd4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001430:	2310      	movs	r3, #16
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001438:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800143e:	2307      	movs	r3, #7
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fed2 	bl	80021f0 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001452:	f000 f8e1 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f001 f934 	bl	80026e0 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800147e:	f000 f8cb 	bl	8001618 <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	; 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_USART1_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014cc:	f001 fb28 	bl	8002b20 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f000 f89f 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002dc 	.word	0x200002dc
 80014e4:	40011000 	.word	0x40011000

080014e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART2_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001520:	f001 fafe 	bl	8002b20 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f875 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000320 	.word	0x20000320
 8001538:	40004400 	.word	0x40004400

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_GPIO_Init+0xd0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a2c      	ldr	r2, [pc, #176]	; (800160c <MX_GPIO_Init+0xd0>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_GPIO_Init+0xd0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_GPIO_Init+0xd0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <MX_GPIO_Init+0xd0>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_GPIO_Init+0xd0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <MX_GPIO_Init+0xd0>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_GPIO_Init+0xd0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <MX_GPIO_Init+0xd0>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_GPIO_Init+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2120      	movs	r1, #32
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <MX_GPIO_Init+0xd4>)
 80015c8:	f000 fdde 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_GPIO_Init+0xd8>)
 80015e4:	f000 fc4c 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e8:	2320      	movs	r3, #32
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_GPIO_Init+0xd4>)
 8001600:	f000 fc3e 	bl	8001e80 <HAL_GPIO_Init>

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001662:	2007      	movs	r0, #7
 8001664:	f000 fb38 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <HAL_UART_MspInit+0x108>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d135      	bne.n	8001702 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_UART_MspInit+0x10c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e0:	2307      	movs	r3, #7
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4826      	ldr	r0, [pc, #152]	; (8001784 <HAL_UART_MspInit+0x110>)
 80016ec:	f000 fbc8 	bl	8001e80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2025      	movs	r0, #37	; 0x25
 80016f6:	f000 fafa 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016fa:	2025      	movs	r0, #37	; 0x25
 80016fc:	f000 fb13 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001700:	e038      	b.n	8001774 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_UART_MspInit+0x114>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d133      	bne.n	8001774 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x10c>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_UART_MspInit+0x10c>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_UART_MspInit+0x10c>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x10c>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001744:	230c      	movs	r3, #12
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001754:	2307      	movs	r3, #7
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_UART_MspInit+0x110>)
 8001760:	f000 fb8e 	bl	8001e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2026      	movs	r0, #38	; 0x26
 800176a:	f000 fac0 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800176e:	2026      	movs	r0, #38	; 0x26
 8001770:	f000 fad9 	bl	8001d26 <HAL_NVIC_EnableIRQ>
}
 8001774:	bf00      	nop
 8001776:	3730      	adds	r7, #48	; 0x30
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40011000 	.word	0x40011000
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40004400 	.word	0x40004400

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f96a 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART1_IRQHandler+0x10>)
 80017e6:	f001 fa19 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002dc 	.word	0x200002dc

080017f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <USART2_IRQHandler+0x10>)
 80017fa:	f001 fa0f 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000320 	.word	0x20000320

08001808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_kill>:

int _kill(int pid, int sig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001822:	f002 f8f5 	bl	8003a10 <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	2216      	movs	r2, #22
 800182a:	601a      	str	r2, [r3, #0]
	return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_exit>:

void _exit (int status)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffe7 	bl	8001818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800184a:	e7fe      	b.n	800184a <_exit+0x12>

0800184c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e00a      	b.n	8001874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800185e:	f3af 8000 	nop.w
 8001862:	4601      	mov	r1, r0
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	60ba      	str	r2, [r7, #8]
 800186a:	b2ca      	uxtb	r2, r1
 800186c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	dbf0      	blt.n	800185e <_read+0x12>
	}

return len;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e009      	b.n	80018ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	60ba      	str	r2, [r7, #8]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf1      	blt.n	8001898 <_write+0x12>
	}
	return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_close>:

int _close(int file)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	return -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e6:	605a      	str	r2, [r3, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_isatty>:

int _isatty(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	return 1;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f002 f85a 	bl	8003a10 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20018000 	.word	0x20018000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000384 	.word	0x20000384
 8001990:	200003a0 	.word	0x200003a0

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	; (80019f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e2:	f7ff ffd7 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f002 f819 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7ff fcc1 	bl	8001370 <main>
  bx  lr    
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019fc:	08007e68 	.word	0x08007e68
  ldr r2, =_sbss
 8001a00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a04:	2000039c 	.word	0x2000039c

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_Init+0x40>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_Init+0x40>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Init+0x40>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f94f 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fdf0 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f967 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f92f 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000388 	.word	0x20000388

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000388 	.word	0x20000388

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff3e 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff31 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff feb6 	bl	8001ad8 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d008      	beq.n	8001d8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e052      	b.n	8001e32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0216 	bic.w	r2, r2, #22
 8001d9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001daa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d103      	bne.n	8001dbc <HAL_DMA_Abort+0x62>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0208 	bic.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ddc:	e013      	b.n	8001e06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fe7b 	bl	8001ad8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d90c      	bls.n	8001e06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e015      	b.n	8001e32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e4      	bne.n	8001dde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	223f      	movs	r2, #63	; 0x3f
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d004      	beq.n	8001e58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e00c      	b.n	8001e72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e159      	b.n	8002150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8148 	bne.w	800214a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a2 	beq.w	800214a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x202>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x1fe>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2f8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x1fa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a46      	ldr	r2, [pc, #280]	; (800217c <HAL_GPIO_Init+0x2fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x1f6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <HAL_GPIO_Init+0x300>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x1f2>
 800206e:	2304      	movs	r3, #4
 8002070:	e008      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002072:	2307      	movs	r3, #7
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002082:	2300      	movs	r3, #0
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f002 0203 	and.w	r2, r2, #3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4093      	lsls	r3, r2
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	f67f aea2 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	041a      	lsls	r2, r3, #16
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	400b      	ands	r3, r1
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e267      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d075      	beq.n	80022fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002222:	2b08      	cmp	r3, #8
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e242      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x74>
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002288:	4b69      	ldr	r3, [pc, #420]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fc16 	bl	8001ad8 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc12 	bl	8001ad8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e207      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc02 	bl	8001ad8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fbfe 	bl	8001ad8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1f3      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b51      	ldr	r3, [pc, #324]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c7      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4937      	ldr	r1, [pc, #220]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCC_OscConfig+0x244>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff fbb7 	bl	8001ad8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fbb3 	bl	8001ad8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1a8      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x244>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff fb96 	bl	8001ad8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff fb92 	bl	8001ad8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e187      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x248>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff fb76 	bl	8001ad8 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fb72 	bl	8001ad8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e167      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x200>
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_OscConfig+0x248>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fb5f 	bl	8001ad8 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00e      	b.n	800243c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff fb5b 	bl	8001ad8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e150      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b7d      	ldr	r3, [pc, #500]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a7c      	ldr	r2, [pc, #496]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b77      	ldr	r3, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b74      	ldr	r3, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a73      	ldr	r2, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb1b 	bl	8001ad8 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7ff fb17 	bl	8001ad8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e10c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x2ea>
 80024cc:	4b64      	ldr	r3, [pc, #400]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x30c>
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5b      	ldr	r2, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a54      	ldr	r2, [pc, #336]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff fadc 	bl	8001ad8 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7ff fad8 	bl	8001ad8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0cb      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <HAL_RCC_OscConfig+0x334>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7ff fac6 	bl	8001ad8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fac2 	bl	8001ad8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0b5      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ee      	bne.n	8002550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a38      	ldr	r2, [pc, #224]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a1 	beq.w	80026d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d05c      	beq.n	8002654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d141      	bne.n	8002626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fa96 	bl	8001ad8 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff fa92 	bl	8001ad8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e087      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fa6b 	bl	8001ad8 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fa67 	bl	8001ad8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e05c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x416>
 8002624:	e054      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fa54 	bl	8001ad8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fa50 	bl	8001ad8 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e045      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e038      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x4ec>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d028      	beq.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d121      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d11a      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90c      	bls.n	800271c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d044      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e067      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b37      	ldr	r3, [pc, #220]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4934      	ldr	r1, [pc, #208]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f982 	bl	8001ad8 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff f97e 	bl	8001ad8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d20c      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8e2 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	080079f0 	.word	0x080079f0
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b094      	sub	sp, #80	; 0x50
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	647b      	str	r3, [r7, #68]	; 0x44
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80e1 	bhi.w	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028e4:	e0db      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ea:	e0d8      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
 800290c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
 800291a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	6139      	str	r1, [r7, #16]
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4651      	mov	r1, sl
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ebb2 0801 	subs.w	r8, r2, r1
 8002964:	4659      	mov	r1, fp
 8002966:	eb63 0901 	sbc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	462b      	mov	r3, r5
 800298c:	eb49 0303 	adc.w	r3, r9, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299e:	4629      	mov	r1, r5
 80029a0:	024b      	lsls	r3, r1, #9
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a8:	4621      	mov	r1, r4
 80029aa:	024a      	lsls	r2, r1, #9
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029bc:	f7fe f944 	bl	8000c48 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c8:	e058      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	4611      	mov	r1, r2
 80029d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	0159      	lsls	r1, r3, #5
 80029f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f6:	0150      	lsls	r0, r2, #5
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a20:	eb63 050b 	sbc.w	r5, r3, fp
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	00eb      	lsls	r3, r5, #3
 8002a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a32:	00e2      	lsls	r2, r4, #3
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	18e3      	adds	r3, r4, r3
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a52:	4629      	mov	r1, r5
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	028a      	lsls	r2, r1, #10
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fe f8ea 	bl	8000c48 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3750      	adds	r7, #80	; 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08007a00 	.word	0x08007a00

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffdc 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0b5b      	lsrs	r3, r3, #13
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08007a00 	.word	0x08007a00

08002b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e03f      	b.n	8002bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fd94 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fcdf 	bl	8003528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d11d      	bne.n	8002c10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_UART_Receive_IT+0x26>
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e016      	b.n	8002c12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_UART_Receive_IT+0x38>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e00f      	b.n	8002c12 <HAL_UART_Receive_IT+0x58>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fab6 	bl	8003178 <UART_Start_Receive_IT>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0ba      	sub	sp, #232	; 0xe8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_UART_IRQHandler+0x66>
 8002c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fb99 	bl	80033b2 <UART_Receive_IT>
      return;
 8002c80:	e256      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80de 	beq.w	8002e48 <HAL_UART_IRQHandler+0x22c>
 8002c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80d1 	beq.w	8002e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_UART_IRQHandler+0xae>
 8002cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_UART_IRQHandler+0xd2>
 8002cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_UART_IRQHandler+0xf6>
 8002cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d011      	beq.n	8002d42 <HAL_UART_IRQHandler+0x126>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0208 	orr.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 81ed 	beq.w	8003126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_UART_IRQHandler+0x14e>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fb24 	bl	80033b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_UART_IRQHandler+0x17a>
 8002d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04f      	beq.n	8002e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa2c 	bl	80031f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d141      	bne.n	8002e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1d9      	bne.n	8002daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <HAL_UART_IRQHandler+0x3dc>)
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f815 	bl	8001e3a <HAL_DMA_Abort_IT>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	4610      	mov	r0, r2
 8002e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e00e      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f990 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00a      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f98c 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e006      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f988 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e42:	e170      	b.n	8003126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	bf00      	nop
    return;
 8002e46:	e16e      	b.n	8003126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 814a 	bne.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8143 	beq.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 813c 	beq.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	f040 80b4 	bne.w	8002ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8140 	beq.w	800312a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f080 8139 	bcs.w	800312a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eca:	f000 8088 	beq.w	8002fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d9      	bne.n	8002ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e1      	bne.n	8002f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe febe 	bl	8001d5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8b6 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ff4:	e099      	b.n	800312a <HAL_UART_IRQHandler+0x50e>
 8002ff6:	bf00      	nop
 8002ff8:	080032bb 	.word	0x080032bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 808b 	beq.w	800312e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8086 	beq.w	800312e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003046:	647a      	str	r2, [r7, #68]	; 0x44
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800304c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e3      	bne.n	8003022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	623b      	str	r3, [r7, #32]
   return(result);
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800307e:	633a      	str	r2, [r7, #48]	; 0x30
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e3      	bne.n	800305a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0310 	bic.w	r3, r3, #16
 80030b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030c4:	61fa      	str	r2, [r7, #28]
 80030c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	617b      	str	r3, [r7, #20]
   return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e3      	bne.n	80030a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f83e 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e4:	e023      	b.n	800312e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_UART_IRQHandler+0x4ea>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8ef 	bl	80032e2 <UART_Transmit_IT>
    return;
 8003104:	e014      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <HAL_UART_IRQHandler+0x514>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f92f 	bl	8003382 <UART_EndTransmit_IT>
    return;
 8003124:	e004      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
    return;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
      return;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
      return;
 800312e:	bf00      	nop
  }
}
 8003130:	37e8      	adds	r7, #232	; 0xe8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2222      	movs	r2, #34	; 0x22
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0220 	orr.w	r2, r2, #32
 80031e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b095      	sub	sp, #84	; 0x54
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	e853 3f00 	ldrex	r3, [r3]
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800321c:	643a      	str	r2, [r7, #64]	; 0x40
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e5      	bne.n	80031fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3314      	adds	r3, #20
 8003236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e5      	bne.n	8003230 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	2b01      	cmp	r3, #1
 800326a:	d119      	bne.n	80032a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	60bb      	str	r3, [r7, #8]
   return(result);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f023 0310 	bic.w	r3, r3, #16
 8003282:	647b      	str	r3, [r7, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800328c:	61ba      	str	r2, [r7, #24]
 800328e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	6979      	ldr	r1, [r7, #20]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	613b      	str	r3, [r7, #16]
   return(result);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e5      	bne.n	800326c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032ae:	bf00      	nop
 80032b0:	3754      	adds	r7, #84	; 0x54
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ff39 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b21      	cmp	r3, #33	; 0x21
 80032f4:	d13e      	bne.n	8003374 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d114      	bne.n	800332a <UART_Transmit_IT+0x48>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d110      	bne.n	800332a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800331c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]
 8003328:	e008      	b.n	800333c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	1c59      	adds	r1, r3, #1
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6211      	str	r1, [r2, #32]
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4619      	mov	r1, r3
 800334a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003398:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fec8 	bl	8003138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08c      	sub	sp, #48	; 0x30
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b22      	cmp	r3, #34	; 0x22
 80033c4:	f040 80ab 	bne.w	800351e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d117      	bne.n	8003402 <UART_Receive_IT+0x50>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003400:	e026      	b.n	8003450 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d007      	beq.n	8003426 <UART_Receive_IT+0x74>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <UART_Receive_IT+0x82>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e008      	b.n	8003446 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003440:	b2da      	uxtb	r2, r3
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4619      	mov	r1, r3
 800345e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003460:	2b00      	cmp	r3, #0
 8003462:	d15a      	bne.n	800351a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0220 	bic.w	r2, r2, #32
 8003472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d135      	bne.n	8003510 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f023 0310 	bic.w	r3, r3, #16
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	623a      	str	r2, [r7, #32]
 80034cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	69f9      	ldr	r1, [r7, #28]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e5      	bne.n	80034aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d10a      	bne.n	8003502 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fe29 	bl	8003160 <HAL_UARTEx_RxEventCallback>
 800350e:	e002      	b.n	8003516 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fd ff1d 	bl	8001350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e002      	b.n	8003520 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3730      	adds	r7, #48	; 0x30
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b0c0      	sub	sp, #256	; 0x100
 800352e:	af00      	add	r7, sp, #0
 8003530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	ea40 0301 	orr.w	r3, r0, r1
 8003550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003580:	f021 010c 	bic.w	r1, r1, #12
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800358e:	430b      	orrs	r3, r1
 8003590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	ea40 0301 	orr.w	r3, r0, r1
 80035ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b8f      	ldr	r3, [pc, #572]	; (80037f4 <UART_SetConfig+0x2cc>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <UART_SetConfig+0xa0>
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <UART_SetConfig+0x2d0>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d104      	bne.n	80035d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7ff fa96 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 80035cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035d0:	e003      	b.n	80035da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d2:	f7ff fa7d 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 80035d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e4:	f040 810c 	bne.w	8003800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	65b9      	str	r1, [r7, #88]	; 0x58
 8003602:	415b      	adcs	r3, r3
 8003604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800360a:	4621      	mov	r1, r4
 800360c:	eb12 0801 	adds.w	r8, r2, r1
 8003610:	4629      	mov	r1, r5
 8003612:	eb43 0901 	adc.w	r9, r3, r1
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4623      	mov	r3, r4
 8003630:	eb18 0303 	adds.w	r3, r8, r3
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003638:	462b      	mov	r3, r5
 800363a:	eb49 0303 	adc.w	r3, r9, r3
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800364e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003656:	460b      	mov	r3, r1
 8003658:	18db      	adds	r3, r3, r3
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 800365c:	4613      	mov	r3, r2
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
 8003664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800366c:	f7fd faec 	bl	8000c48 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <UART_SetConfig+0x2d4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800368c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	64b9      	str	r1, [r7, #72]	; 0x48
 8003698:	415b      	adcs	r3, r3
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036a0:	4641      	mov	r1, r8
 80036a2:	eb12 0a01 	adds.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb43 0b01 	adc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c0:	4692      	mov	sl, r2
 80036c2:	469b      	mov	fp, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb4b 0303 	adc.w	r3, fp, r3
 80036d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036ec:	460b      	mov	r3, r1
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
 80036f2:	4613      	mov	r3, r2
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
 80036fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003702:	f7fd faa1 	bl	8000c48 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4611      	mov	r1, r2
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <UART_SetConfig+0x2d4>)
 800370e:	fba3 2301 	umull	r2, r3, r3, r1
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2264      	movs	r2, #100	; 0x64
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	1acb      	subs	r3, r1, r3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <UART_SetConfig+0x2d4>)
 8003724:	fba3 2302 	umull	r2, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003730:	441c      	add	r4, r3
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800373c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	63b9      	str	r1, [r7, #56]	; 0x38
 800374c:	415b      	adcs	r3, r3
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6339      	str	r1, [r7, #48]	; 0x30
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037a8:	460b      	mov	r3, r1
 80037aa:	18db      	adds	r3, r3, r3
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	4613      	mov	r3, r2
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037be:	f7fd fa43 	bl	8000c48 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <UART_SetConfig+0x2d4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	; 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <UART_SetConfig+0x2d4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4422      	add	r2, r4
 80037ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f0:	e105      	b.n	80039fe <UART_SetConfig+0x4d6>
 80037f2:	bf00      	nop
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800380a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800380e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	1891      	adds	r1, r2, r2
 8003818:	6239      	str	r1, [r7, #32]
 800381a:	415b      	adcs	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003822:	4641      	mov	r1, r8
 8003824:	1854      	adds	r4, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0501 	adc.w	r5, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	00eb      	lsls	r3, r5, #3
 8003836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	4643      	mov	r3, r8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003848:	464b      	mov	r3, r9
 800384a:	eb45 0303 	adc.w	r3, r5, r3
 800384e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800385e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800386e:	4629      	mov	r1, r5
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4621      	mov	r1, r4
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003880:	f7fd f9e2 	bl	8000c48 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800389c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	61b9      	str	r1, [r7, #24]
 80038ac:	415b      	adcs	r3, r3
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b4:	4641      	mov	r1, r8
 80038b6:	1851      	adds	r1, r2, r1
 80038b8:	6139      	str	r1, [r7, #16]
 80038ba:	4649      	mov	r1, r9
 80038bc:	414b      	adcs	r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4651      	mov	r1, sl
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4642      	mov	r2, r8
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038e8:	464b      	mov	r3, r9
 80038ea:	460a      	mov	r2, r1
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80038fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800390c:	4649      	mov	r1, r9
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003916:	4641      	mov	r1, r8
 8003918:	008a      	lsls	r2, r1, #2
 800391a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800391e:	f7fd f993 	bl	8000c48 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <UART_SetConfig+0x4e4>)
 8003928:	fba3 1302 	umull	r1, r3, r3, r2
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	2164      	movs	r1, #100	; 0x64
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	3332      	adds	r3, #50	; 0x32
 800393a:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <UART_SetConfig+0x4e4>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003946:	441c      	add	r4, r3
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	673b      	str	r3, [r7, #112]	; 0x70
 8003950:	677a      	str	r2, [r7, #116]	; 0x74
 8003952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003956:	4642      	mov	r2, r8
 8003958:	464b      	mov	r3, r9
 800395a:	1891      	adds	r1, r2, r2
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	415b      	adcs	r3, r3
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003966:	4641      	mov	r1, r8
 8003968:	1851      	adds	r1, r2, r1
 800396a:	6039      	str	r1, [r7, #0]
 800396c:	4649      	mov	r1, r9
 800396e:	414b      	adcs	r3, r1
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800397e:	4659      	mov	r1, fp
 8003980:	00cb      	lsls	r3, r1, #3
 8003982:	4651      	mov	r1, sl
 8003984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003988:	4651      	mov	r1, sl
 800398a:	00ca      	lsls	r2, r1, #3
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	4603      	mov	r3, r0
 8003992:	4642      	mov	r2, r8
 8003994:	189b      	adds	r3, r3, r2
 8003996:	66bb      	str	r3, [r7, #104]	; 0x68
 8003998:	464b      	mov	r3, r9
 800399a:	460a      	mov	r2, r1
 800399c:	eb42 0303 	adc.w	r3, r2, r3
 80039a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	663b      	str	r3, [r7, #96]	; 0x60
 80039ac:	667a      	str	r2, [r7, #100]	; 0x64
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039ba:	4649      	mov	r1, r9
 80039bc:	008b      	lsls	r3, r1, #2
 80039be:	4641      	mov	r1, r8
 80039c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c4:	4641      	mov	r1, r8
 80039c6:	008a      	lsls	r2, r1, #2
 80039c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039cc:	f7fd f93c 	bl	8000c48 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <UART_SetConfig+0x4e4>)
 80039d6:	fba3 1302 	umull	r1, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2164      	movs	r1, #100	; 0x64
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <UART_SetConfig+0x4e4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4422      	add	r2, r4
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	bf00      	nop
 8003a00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4d0d      	ldr	r5, [pc, #52]	; (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2600      	movs	r6, #0
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4d0b      	ldr	r5, [pc, #44]	; (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	; (8003a60 <__libc_init_array+0x44>)
 8003a30:	f003 ff74 	bl	800791c <_init>
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2600      	movs	r6, #0
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08007e60 	.word	0x08007e60
 8003a58:	08007e60 	.word	0x08007e60
 8003a5c:	08007e60 	.word	0x08007e60
 8003a60:	08007e64 	.word	0x08007e64

08003a64 <memset>:
 8003a64:	4402      	add	r2, r0
 8003a66:	4603      	mov	r3, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <_scanf_float>:
 8003a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	4617      	mov	r7, r2
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	688b      	ldr	r3, [r1, #8]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a86:	bf83      	ittte	hi
 8003a88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003a8c:	195b      	addhi	r3, r3, r5
 8003a8e:	9302      	strhi	r3, [sp, #8]
 8003a90:	2300      	movls	r3, #0
 8003a92:	bf86      	itte	hi
 8003a94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a98:	608b      	strhi	r3, [r1, #8]
 8003a9a:	9302      	strls	r3, [sp, #8]
 8003a9c:	680b      	ldr	r3, [r1, #0]
 8003a9e:	468b      	mov	fp, r1
 8003aa0:	2500      	movs	r5, #0
 8003aa2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003aa6:	f84b 3b1c 	str.w	r3, [fp], #28
 8003aaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003aae:	4680      	mov	r8, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	465e      	mov	r6, fp
 8003ab4:	46aa      	mov	sl, r5
 8003ab6:	46a9      	mov	r9, r5
 8003ab8:	9501      	str	r5, [sp, #4]
 8003aba:	68a2      	ldr	r2, [r4, #8]
 8003abc:	b152      	cbz	r2, 8003ad4 <_scanf_float+0x60>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b4e      	cmp	r3, #78	; 0x4e
 8003ac4:	d864      	bhi.n	8003b90 <_scanf_float+0x11c>
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d83c      	bhi.n	8003b44 <_scanf_float+0xd0>
 8003aca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003ace:	b2c8      	uxtb	r0, r1
 8003ad0:	280e      	cmp	r0, #14
 8003ad2:	d93a      	bls.n	8003b4a <_scanf_float+0xd6>
 8003ad4:	f1b9 0f00 	cmp.w	r9, #0
 8003ad8:	d003      	beq.n	8003ae2 <_scanf_float+0x6e>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ae6:	f1ba 0f01 	cmp.w	sl, #1
 8003aea:	f200 8113 	bhi.w	8003d14 <_scanf_float+0x2a0>
 8003aee:	455e      	cmp	r6, fp
 8003af0:	f200 8105 	bhi.w	8003cfe <_scanf_float+0x28a>
 8003af4:	2501      	movs	r5, #1
 8003af6:	4628      	mov	r0, r5
 8003af8:	b007      	add	sp, #28
 8003afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003b02:	2a0d      	cmp	r2, #13
 8003b04:	d8e6      	bhi.n	8003ad4 <_scanf_float+0x60>
 8003b06:	a101      	add	r1, pc, #4	; (adr r1, 8003b0c <_scanf_float+0x98>)
 8003b08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b0c:	08003c4b 	.word	0x08003c4b
 8003b10:	08003ad5 	.word	0x08003ad5
 8003b14:	08003ad5 	.word	0x08003ad5
 8003b18:	08003ad5 	.word	0x08003ad5
 8003b1c:	08003cab 	.word	0x08003cab
 8003b20:	08003c83 	.word	0x08003c83
 8003b24:	08003ad5 	.word	0x08003ad5
 8003b28:	08003ad5 	.word	0x08003ad5
 8003b2c:	08003c59 	.word	0x08003c59
 8003b30:	08003ad5 	.word	0x08003ad5
 8003b34:	08003ad5 	.word	0x08003ad5
 8003b38:	08003ad5 	.word	0x08003ad5
 8003b3c:	08003ad5 	.word	0x08003ad5
 8003b40:	08003c11 	.word	0x08003c11
 8003b44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003b48:	e7db      	b.n	8003b02 <_scanf_float+0x8e>
 8003b4a:	290e      	cmp	r1, #14
 8003b4c:	d8c2      	bhi.n	8003ad4 <_scanf_float+0x60>
 8003b4e:	a001      	add	r0, pc, #4	; (adr r0, 8003b54 <_scanf_float+0xe0>)
 8003b50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b54:	08003c03 	.word	0x08003c03
 8003b58:	08003ad5 	.word	0x08003ad5
 8003b5c:	08003c03 	.word	0x08003c03
 8003b60:	08003c97 	.word	0x08003c97
 8003b64:	08003ad5 	.word	0x08003ad5
 8003b68:	08003bb1 	.word	0x08003bb1
 8003b6c:	08003bed 	.word	0x08003bed
 8003b70:	08003bed 	.word	0x08003bed
 8003b74:	08003bed 	.word	0x08003bed
 8003b78:	08003bed 	.word	0x08003bed
 8003b7c:	08003bed 	.word	0x08003bed
 8003b80:	08003bed 	.word	0x08003bed
 8003b84:	08003bed 	.word	0x08003bed
 8003b88:	08003bed 	.word	0x08003bed
 8003b8c:	08003bed 	.word	0x08003bed
 8003b90:	2b6e      	cmp	r3, #110	; 0x6e
 8003b92:	d809      	bhi.n	8003ba8 <_scanf_float+0x134>
 8003b94:	2b60      	cmp	r3, #96	; 0x60
 8003b96:	d8b2      	bhi.n	8003afe <_scanf_float+0x8a>
 8003b98:	2b54      	cmp	r3, #84	; 0x54
 8003b9a:	d077      	beq.n	8003c8c <_scanf_float+0x218>
 8003b9c:	2b59      	cmp	r3, #89	; 0x59
 8003b9e:	d199      	bne.n	8003ad4 <_scanf_float+0x60>
 8003ba0:	2d07      	cmp	r5, #7
 8003ba2:	d197      	bne.n	8003ad4 <_scanf_float+0x60>
 8003ba4:	2508      	movs	r5, #8
 8003ba6:	e029      	b.n	8003bfc <_scanf_float+0x188>
 8003ba8:	2b74      	cmp	r3, #116	; 0x74
 8003baa:	d06f      	beq.n	8003c8c <_scanf_float+0x218>
 8003bac:	2b79      	cmp	r3, #121	; 0x79
 8003bae:	e7f6      	b.n	8003b9e <_scanf_float+0x12a>
 8003bb0:	6821      	ldr	r1, [r4, #0]
 8003bb2:	05c8      	lsls	r0, r1, #23
 8003bb4:	d51a      	bpl.n	8003bec <_scanf_float+0x178>
 8003bb6:	9b02      	ldr	r3, [sp, #8]
 8003bb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003bbc:	6021      	str	r1, [r4, #0]
 8003bbe:	f109 0901 	add.w	r9, r9, #1
 8003bc2:	b11b      	cbz	r3, 8003bcc <_scanf_float+0x158>
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	3201      	adds	r2, #1
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	60a2      	str	r2, [r4, #8]
 8003bcc:	68a3      	ldr	r3, [r4, #8]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	60a3      	str	r3, [r4, #8]
 8003bd2:	6923      	ldr	r3, [r4, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	f340 8084 	ble.w	8003cec <_scanf_float+0x278>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	e766      	b.n	8003aba <_scanf_float+0x46>
 8003bec:	eb1a 0f05 	cmn.w	sl, r5
 8003bf0:	f47f af70 	bne.w	8003ad4 <_scanf_float+0x60>
 8003bf4:	6822      	ldr	r2, [r4, #0]
 8003bf6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003bfa:	6022      	str	r2, [r4, #0]
 8003bfc:	f806 3b01 	strb.w	r3, [r6], #1
 8003c00:	e7e4      	b.n	8003bcc <_scanf_float+0x158>
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	0610      	lsls	r0, r2, #24
 8003c06:	f57f af65 	bpl.w	8003ad4 <_scanf_float+0x60>
 8003c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c0e:	e7f4      	b.n	8003bfa <_scanf_float+0x186>
 8003c10:	f1ba 0f00 	cmp.w	sl, #0
 8003c14:	d10e      	bne.n	8003c34 <_scanf_float+0x1c0>
 8003c16:	f1b9 0f00 	cmp.w	r9, #0
 8003c1a:	d10e      	bne.n	8003c3a <_scanf_float+0x1c6>
 8003c1c:	6822      	ldr	r2, [r4, #0]
 8003c1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c26:	d108      	bne.n	8003c3a <_scanf_float+0x1c6>
 8003c28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c2c:	6022      	str	r2, [r4, #0]
 8003c2e:	f04f 0a01 	mov.w	sl, #1
 8003c32:	e7e3      	b.n	8003bfc <_scanf_float+0x188>
 8003c34:	f1ba 0f02 	cmp.w	sl, #2
 8003c38:	d055      	beq.n	8003ce6 <_scanf_float+0x272>
 8003c3a:	2d01      	cmp	r5, #1
 8003c3c:	d002      	beq.n	8003c44 <_scanf_float+0x1d0>
 8003c3e:	2d04      	cmp	r5, #4
 8003c40:	f47f af48 	bne.w	8003ad4 <_scanf_float+0x60>
 8003c44:	3501      	adds	r5, #1
 8003c46:	b2ed      	uxtb	r5, r5
 8003c48:	e7d8      	b.n	8003bfc <_scanf_float+0x188>
 8003c4a:	f1ba 0f01 	cmp.w	sl, #1
 8003c4e:	f47f af41 	bne.w	8003ad4 <_scanf_float+0x60>
 8003c52:	f04f 0a02 	mov.w	sl, #2
 8003c56:	e7d1      	b.n	8003bfc <_scanf_float+0x188>
 8003c58:	b97d      	cbnz	r5, 8003c7a <_scanf_float+0x206>
 8003c5a:	f1b9 0f00 	cmp.w	r9, #0
 8003c5e:	f47f af3c 	bne.w	8003ada <_scanf_float+0x66>
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c6c:	f47f af39 	bne.w	8003ae2 <_scanf_float+0x6e>
 8003c70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c74:	6022      	str	r2, [r4, #0]
 8003c76:	2501      	movs	r5, #1
 8003c78:	e7c0      	b.n	8003bfc <_scanf_float+0x188>
 8003c7a:	2d03      	cmp	r5, #3
 8003c7c:	d0e2      	beq.n	8003c44 <_scanf_float+0x1d0>
 8003c7e:	2d05      	cmp	r5, #5
 8003c80:	e7de      	b.n	8003c40 <_scanf_float+0x1cc>
 8003c82:	2d02      	cmp	r5, #2
 8003c84:	f47f af26 	bne.w	8003ad4 <_scanf_float+0x60>
 8003c88:	2503      	movs	r5, #3
 8003c8a:	e7b7      	b.n	8003bfc <_scanf_float+0x188>
 8003c8c:	2d06      	cmp	r5, #6
 8003c8e:	f47f af21 	bne.w	8003ad4 <_scanf_float+0x60>
 8003c92:	2507      	movs	r5, #7
 8003c94:	e7b2      	b.n	8003bfc <_scanf_float+0x188>
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	0591      	lsls	r1, r2, #22
 8003c9a:	f57f af1b 	bpl.w	8003ad4 <_scanf_float+0x60>
 8003c9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003ca2:	6022      	str	r2, [r4, #0]
 8003ca4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ca8:	e7a8      	b.n	8003bfc <_scanf_float+0x188>
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003cb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003cb4:	d006      	beq.n	8003cc4 <_scanf_float+0x250>
 8003cb6:	0550      	lsls	r0, r2, #21
 8003cb8:	f57f af0c 	bpl.w	8003ad4 <_scanf_float+0x60>
 8003cbc:	f1b9 0f00 	cmp.w	r9, #0
 8003cc0:	f43f af0f 	beq.w	8003ae2 <_scanf_float+0x6e>
 8003cc4:	0591      	lsls	r1, r2, #22
 8003cc6:	bf58      	it	pl
 8003cc8:	9901      	ldrpl	r1, [sp, #4]
 8003cca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003cce:	bf58      	it	pl
 8003cd0:	eba9 0101 	subpl.w	r1, r9, r1
 8003cd4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003cd8:	bf58      	it	pl
 8003cda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003cde:	6022      	str	r2, [r4, #0]
 8003ce0:	f04f 0900 	mov.w	r9, #0
 8003ce4:	e78a      	b.n	8003bfc <_scanf_float+0x188>
 8003ce6:	f04f 0a03 	mov.w	sl, #3
 8003cea:	e787      	b.n	8003bfc <_scanf_float+0x188>
 8003cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003cf0:	4639      	mov	r1, r7
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	4798      	blx	r3
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f43f aedf 	beq.w	8003aba <_scanf_float+0x46>
 8003cfc:	e6ea      	b.n	8003ad4 <_scanf_float+0x60>
 8003cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d06:	463a      	mov	r2, r7
 8003d08:	4640      	mov	r0, r8
 8003d0a:	4798      	blx	r3
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	e6ec      	b.n	8003aee <_scanf_float+0x7a>
 8003d14:	1e6b      	subs	r3, r5, #1
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d825      	bhi.n	8003d66 <_scanf_float+0x2f2>
 8003d1a:	2d02      	cmp	r5, #2
 8003d1c:	d836      	bhi.n	8003d8c <_scanf_float+0x318>
 8003d1e:	455e      	cmp	r6, fp
 8003d20:	f67f aee8 	bls.w	8003af4 <_scanf_float+0x80>
 8003d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d2c:	463a      	mov	r2, r7
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4798      	blx	r3
 8003d32:	6923      	ldr	r3, [r4, #16]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	6123      	str	r3, [r4, #16]
 8003d38:	e7f1      	b.n	8003d1e <_scanf_float+0x2aa>
 8003d3a:	9802      	ldr	r0, [sp, #8]
 8003d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003d44:	9002      	str	r0, [sp, #8]
 8003d46:	463a      	mov	r2, r7
 8003d48:	4640      	mov	r0, r8
 8003d4a:	4798      	blx	r3
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d56:	fa5f fa8a 	uxtb.w	sl, sl
 8003d5a:	f1ba 0f02 	cmp.w	sl, #2
 8003d5e:	d1ec      	bne.n	8003d3a <_scanf_float+0x2c6>
 8003d60:	3d03      	subs	r5, #3
 8003d62:	b2ed      	uxtb	r5, r5
 8003d64:	1b76      	subs	r6, r6, r5
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	05da      	lsls	r2, r3, #23
 8003d6a:	d52f      	bpl.n	8003dcc <_scanf_float+0x358>
 8003d6c:	055b      	lsls	r3, r3, #21
 8003d6e:	d510      	bpl.n	8003d92 <_scanf_float+0x31e>
 8003d70:	455e      	cmp	r6, fp
 8003d72:	f67f aebf 	bls.w	8003af4 <_scanf_float+0x80>
 8003d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d7e:	463a      	mov	r2, r7
 8003d80:	4640      	mov	r0, r8
 8003d82:	4798      	blx	r3
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	e7f1      	b.n	8003d70 <_scanf_float+0x2fc>
 8003d8c:	46aa      	mov	sl, r5
 8003d8e:	9602      	str	r6, [sp, #8]
 8003d90:	e7df      	b.n	8003d52 <_scanf_float+0x2de>
 8003d92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	2965      	cmp	r1, #101	; 0x65
 8003d9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003da2:	6123      	str	r3, [r4, #16]
 8003da4:	d00c      	beq.n	8003dc0 <_scanf_float+0x34c>
 8003da6:	2945      	cmp	r1, #69	; 0x45
 8003da8:	d00a      	beq.n	8003dc0 <_scanf_float+0x34c>
 8003daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dae:	463a      	mov	r2, r7
 8003db0:	4640      	mov	r0, r8
 8003db2:	4798      	blx	r3
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	1eb5      	subs	r5, r6, #2
 8003dbe:	6123      	str	r3, [r4, #16]
 8003dc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dc4:	463a      	mov	r2, r7
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	4798      	blx	r3
 8003dca:	462e      	mov	r6, r5
 8003dcc:	6825      	ldr	r5, [r4, #0]
 8003dce:	f015 0510 	ands.w	r5, r5, #16
 8003dd2:	d159      	bne.n	8003e88 <_scanf_float+0x414>
 8003dd4:	7035      	strb	r5, [r6, #0]
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d11b      	bne.n	8003e1a <_scanf_float+0x3a6>
 8003de2:	9b01      	ldr	r3, [sp, #4]
 8003de4:	454b      	cmp	r3, r9
 8003de6:	eba3 0209 	sub.w	r2, r3, r9
 8003dea:	d123      	bne.n	8003e34 <_scanf_float+0x3c0>
 8003dec:	2200      	movs	r2, #0
 8003dee:	4659      	mov	r1, fp
 8003df0:	4640      	mov	r0, r8
 8003df2:	f000 ff1f 	bl	8004c34 <_strtod_r>
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	f012 0f02 	tst.w	r2, #2
 8003dfe:	ec57 6b10 	vmov	r6, r7, d0
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	d021      	beq.n	8003e4a <_scanf_float+0x3d6>
 8003e06:	9903      	ldr	r1, [sp, #12]
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	600a      	str	r2, [r1, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	e9c3 6700 	strd	r6, r7, [r3]
 8003e12:	68e3      	ldr	r3, [r4, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60e3      	str	r3, [r4, #12]
 8003e18:	e66d      	b.n	8003af6 <_scanf_float+0x82>
 8003e1a:	9b04      	ldr	r3, [sp, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0e5      	beq.n	8003dec <_scanf_float+0x378>
 8003e20:	9905      	ldr	r1, [sp, #20]
 8003e22:	230a      	movs	r3, #10
 8003e24:	462a      	mov	r2, r5
 8003e26:	3101      	adds	r1, #1
 8003e28:	4640      	mov	r0, r8
 8003e2a:	f000 ff8b 	bl	8004d44 <_strtol_r>
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	9e05      	ldr	r6, [sp, #20]
 8003e32:	1ac2      	subs	r2, r0, r3
 8003e34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003e38:	429e      	cmp	r6, r3
 8003e3a:	bf28      	it	cs
 8003e3c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003e40:	4912      	ldr	r1, [pc, #72]	; (8003e8c <_scanf_float+0x418>)
 8003e42:	4630      	mov	r0, r6
 8003e44:	f000 f82c 	bl	8003ea0 <siprintf>
 8003e48:	e7d0      	b.n	8003dec <_scanf_float+0x378>
 8003e4a:	9903      	ldr	r1, [sp, #12]
 8003e4c:	f012 0f04 	tst.w	r2, #4
 8003e50:	f103 0204 	add.w	r2, r3, #4
 8003e54:	600a      	str	r2, [r1, #0]
 8003e56:	d1d9      	bne.n	8003e0c <_scanf_float+0x398>
 8003e58:	f8d3 8000 	ldr.w	r8, [r3]
 8003e5c:	ee10 2a10 	vmov	r2, s0
 8003e60:	ee10 0a10 	vmov	r0, s0
 8003e64:	463b      	mov	r3, r7
 8003e66:	4639      	mov	r1, r7
 8003e68:	f7fc fe68 	bl	8000b3c <__aeabi_dcmpun>
 8003e6c:	b128      	cbz	r0, 8003e7a <_scanf_float+0x406>
 8003e6e:	4808      	ldr	r0, [pc, #32]	; (8003e90 <_scanf_float+0x41c>)
 8003e70:	f000 f810 	bl	8003e94 <nanf>
 8003e74:	ed88 0a00 	vstr	s0, [r8]
 8003e78:	e7cb      	b.n	8003e12 <_scanf_float+0x39e>
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	f7fc fe93 	bl	8000ba8 <__aeabi_d2f>
 8003e82:	f8c8 0000 	str.w	r0, [r8]
 8003e86:	e7c4      	b.n	8003e12 <_scanf_float+0x39e>
 8003e88:	2500      	movs	r5, #0
 8003e8a:	e634      	b.n	8003af6 <_scanf_float+0x82>
 8003e8c:	08007a0c 	.word	0x08007a0c
 8003e90:	08007df5 	.word	0x08007df5

08003e94 <nanf>:
 8003e94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003e9c <nanf+0x8>
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	7fc00000 	.word	0x7fc00000

08003ea0 <siprintf>:
 8003ea0:	b40e      	push	{r1, r2, r3}
 8003ea2:	b500      	push	{lr}
 8003ea4:	b09c      	sub	sp, #112	; 0x70
 8003ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ea8:	9002      	str	r0, [sp, #8]
 8003eaa:	9006      	str	r0, [sp, #24]
 8003eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003eb0:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <siprintf+0x38>)
 8003eb2:	9107      	str	r1, [sp, #28]
 8003eb4:	9104      	str	r1, [sp, #16]
 8003eb6:	4909      	ldr	r1, [pc, #36]	; (8003edc <siprintf+0x3c>)
 8003eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ebc:	9105      	str	r1, [sp, #20]
 8003ebe:	6800      	ldr	r0, [r0, #0]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	a902      	add	r1, sp, #8
 8003ec4:	f002 f8cc 	bl	8006060 <_svfiprintf_r>
 8003ec8:	9b02      	ldr	r3, [sp, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	b01c      	add	sp, #112	; 0x70
 8003ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed4:	b003      	add	sp, #12
 8003ed6:	4770      	bx	lr
 8003ed8:	2000000c 	.word	0x2000000c
 8003edc:	ffff0208 	.word	0xffff0208

08003ee0 <siscanf>:
 8003ee0:	b40e      	push	{r1, r2, r3}
 8003ee2:	b510      	push	{r4, lr}
 8003ee4:	b09f      	sub	sp, #124	; 0x7c
 8003ee6:	ac21      	add	r4, sp, #132	; 0x84
 8003ee8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003eec:	f854 2b04 	ldr.w	r2, [r4], #4
 8003ef0:	9201      	str	r2, [sp, #4]
 8003ef2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003ef6:	9004      	str	r0, [sp, #16]
 8003ef8:	9008      	str	r0, [sp, #32]
 8003efa:	f7fc f971 	bl	80001e0 <strlen>
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <siscanf+0x50>)
 8003f00:	9005      	str	r0, [sp, #20]
 8003f02:	9009      	str	r0, [sp, #36]	; 0x24
 8003f04:	930d      	str	r3, [sp, #52]	; 0x34
 8003f06:	480b      	ldr	r0, [pc, #44]	; (8003f34 <siscanf+0x54>)
 8003f08:	9a01      	ldr	r2, [sp, #4]
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	9403      	str	r4, [sp, #12]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9311      	str	r3, [sp, #68]	; 0x44
 8003f12:	9316      	str	r3, [sp, #88]	; 0x58
 8003f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f18:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003f1c:	a904      	add	r1, sp, #16
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f002 f9f8 	bl	8006314 <__ssvfiscanf_r>
 8003f24:	b01f      	add	sp, #124	; 0x7c
 8003f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2a:	b003      	add	sp, #12
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	08003f5b 	.word	0x08003f5b
 8003f34:	2000000c 	.word	0x2000000c

08003f38 <__sread>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f40:	f002 fe46 	bl	8006bd0 <_read_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	bfab      	itete	ge
 8003f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f4c:	181b      	addge	r3, r3, r0
 8003f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f52:	bfac      	ite	ge
 8003f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f56:	81a3      	strhlt	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__seofread>:
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	4770      	bx	lr

08003f5e <__swrite>:
 8003f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f62:	461f      	mov	r7, r3
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	05db      	lsls	r3, r3, #23
 8003f68:	4605      	mov	r5, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	d505      	bpl.n	8003f7c <__swrite+0x1e>
 8003f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f74:	2302      	movs	r3, #2
 8003f76:	2200      	movs	r2, #0
 8003f78:	f001 fa78 	bl	800546c <_lseek_r>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	4632      	mov	r2, r6
 8003f8a:	463b      	mov	r3, r7
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f92:	f000 bed9 	b.w	8004d48 <_write_r>

08003f96 <__sseek>:
 8003f96:	b510      	push	{r4, lr}
 8003f98:	460c      	mov	r4, r1
 8003f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9e:	f001 fa65 	bl	800546c <_lseek_r>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	bf15      	itete	ne
 8003fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fb2:	81a3      	strheq	r3, [r4, #12]
 8003fb4:	bf18      	it	ne
 8003fb6:	81a3      	strhne	r3, [r4, #12]
 8003fb8:	bd10      	pop	{r4, pc}

08003fba <__sclose>:
 8003fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fbe:	f000 bed5 	b.w	8004d6c <_close_r>

08003fc2 <strncmp>:
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	b17a      	cbz	r2, 8003fe6 <strncmp+0x24>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	3901      	subs	r1, #1
 8003fca:	1884      	adds	r4, r0, r2
 8003fcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003fd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003fd4:	4290      	cmp	r0, r2
 8003fd6:	d101      	bne.n	8003fdc <strncmp+0x1a>
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	d101      	bne.n	8003fe0 <strncmp+0x1e>
 8003fdc:	1a80      	subs	r0, r0, r2
 8003fde:	bd10      	pop	{r4, pc}
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d1f3      	bne.n	8003fcc <strncmp+0xa>
 8003fe4:	e7fa      	b.n	8003fdc <strncmp+0x1a>
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	e7f9      	b.n	8003fde <strncmp+0x1c>

08003fea <sulp>:
 8003fea:	b570      	push	{r4, r5, r6, lr}
 8003fec:	4604      	mov	r4, r0
 8003fee:	460d      	mov	r5, r1
 8003ff0:	ec45 4b10 	vmov	d0, r4, r5
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	f001 fddd 	bl	8005bb4 <__ulp>
 8003ffa:	ec51 0b10 	vmov	r0, r1, d0
 8003ffe:	b17e      	cbz	r6, 8004020 <sulp+0x36>
 8004000:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004004:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004008:	2b00      	cmp	r3, #0
 800400a:	dd09      	ble.n	8004020 <sulp+0x36>
 800400c:	051b      	lsls	r3, r3, #20
 800400e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004012:	2400      	movs	r4, #0
 8004014:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004018:	4622      	mov	r2, r4
 800401a:	462b      	mov	r3, r5
 800401c:	f7fc faf4 	bl	8000608 <__aeabi_dmul>
 8004020:	bd70      	pop	{r4, r5, r6, pc}
 8004022:	0000      	movs	r0, r0
 8004024:	0000      	movs	r0, r0
	...

08004028 <_strtod_l>:
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	ed2d 8b02 	vpush	{d8}
 8004030:	b09d      	sub	sp, #116	; 0x74
 8004032:	461f      	mov	r7, r3
 8004034:	2300      	movs	r3, #0
 8004036:	9318      	str	r3, [sp, #96]	; 0x60
 8004038:	4ba2      	ldr	r3, [pc, #648]	; (80042c4 <_strtod_l+0x29c>)
 800403a:	9213      	str	r2, [sp, #76]	; 0x4c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	9305      	str	r3, [sp, #20]
 8004040:	4604      	mov	r4, r0
 8004042:	4618      	mov	r0, r3
 8004044:	4688      	mov	r8, r1
 8004046:	f7fc f8cb 	bl	80001e0 <strlen>
 800404a:	f04f 0a00 	mov.w	sl, #0
 800404e:	4605      	mov	r5, r0
 8004050:	f04f 0b00 	mov.w	fp, #0
 8004054:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	2a2b      	cmp	r2, #43	; 0x2b
 800405e:	d04e      	beq.n	80040fe <_strtod_l+0xd6>
 8004060:	d83b      	bhi.n	80040da <_strtod_l+0xb2>
 8004062:	2a0d      	cmp	r2, #13
 8004064:	d834      	bhi.n	80040d0 <_strtod_l+0xa8>
 8004066:	2a08      	cmp	r2, #8
 8004068:	d834      	bhi.n	80040d4 <_strtod_l+0xac>
 800406a:	2a00      	cmp	r2, #0
 800406c:	d03e      	beq.n	80040ec <_strtod_l+0xc4>
 800406e:	2300      	movs	r3, #0
 8004070:	930a      	str	r3, [sp, #40]	; 0x28
 8004072:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004074:	7833      	ldrb	r3, [r6, #0]
 8004076:	2b30      	cmp	r3, #48	; 0x30
 8004078:	f040 80b0 	bne.w	80041dc <_strtod_l+0x1b4>
 800407c:	7873      	ldrb	r3, [r6, #1]
 800407e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004082:	2b58      	cmp	r3, #88	; 0x58
 8004084:	d168      	bne.n	8004158 <_strtod_l+0x130>
 8004086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	ab18      	add	r3, sp, #96	; 0x60
 800408c:	9702      	str	r7, [sp, #8]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	4a8d      	ldr	r2, [pc, #564]	; (80042c8 <_strtod_l+0x2a0>)
 8004092:	ab19      	add	r3, sp, #100	; 0x64
 8004094:	a917      	add	r1, sp, #92	; 0x5c
 8004096:	4620      	mov	r0, r4
 8004098:	f000 fee0 	bl	8004e5c <__gethex>
 800409c:	f010 0707 	ands.w	r7, r0, #7
 80040a0:	4605      	mov	r5, r0
 80040a2:	d005      	beq.n	80040b0 <_strtod_l+0x88>
 80040a4:	2f06      	cmp	r7, #6
 80040a6:	d12c      	bne.n	8004102 <_strtod_l+0xda>
 80040a8:	3601      	adds	r6, #1
 80040aa:	2300      	movs	r3, #0
 80040ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80040ae:	930a      	str	r3, [sp, #40]	; 0x28
 80040b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 8590 	bne.w	8004bd8 <_strtod_l+0xbb0>
 80040b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ba:	b1eb      	cbz	r3, 80040f8 <_strtod_l+0xd0>
 80040bc:	4652      	mov	r2, sl
 80040be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80040c2:	ec43 2b10 	vmov	d0, r2, r3
 80040c6:	b01d      	add	sp, #116	; 0x74
 80040c8:	ecbd 8b02 	vpop	{d8}
 80040cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d0:	2a20      	cmp	r2, #32
 80040d2:	d1cc      	bne.n	800406e <_strtod_l+0x46>
 80040d4:	3301      	adds	r3, #1
 80040d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80040d8:	e7be      	b.n	8004058 <_strtod_l+0x30>
 80040da:	2a2d      	cmp	r2, #45	; 0x2d
 80040dc:	d1c7      	bne.n	800406e <_strtod_l+0x46>
 80040de:	2201      	movs	r2, #1
 80040e0:	920a      	str	r2, [sp, #40]	; 0x28
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1c2      	bne.n	8004072 <_strtod_l+0x4a>
 80040ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 856e 	bne.w	8004bd4 <_strtod_l+0xbac>
 80040f8:	4652      	mov	r2, sl
 80040fa:	465b      	mov	r3, fp
 80040fc:	e7e1      	b.n	80040c2 <_strtod_l+0x9a>
 80040fe:	2200      	movs	r2, #0
 8004100:	e7ee      	b.n	80040e0 <_strtod_l+0xb8>
 8004102:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004104:	b13a      	cbz	r2, 8004116 <_strtod_l+0xee>
 8004106:	2135      	movs	r1, #53	; 0x35
 8004108:	a81a      	add	r0, sp, #104	; 0x68
 800410a:	f001 fe5e 	bl	8005dca <__copybits>
 800410e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004110:	4620      	mov	r0, r4
 8004112:	f001 fa1d 	bl	8005550 <_Bfree>
 8004116:	3f01      	subs	r7, #1
 8004118:	2f04      	cmp	r7, #4
 800411a:	d806      	bhi.n	800412a <_strtod_l+0x102>
 800411c:	e8df f007 	tbb	[pc, r7]
 8004120:	1714030a 	.word	0x1714030a
 8004124:	0a          	.byte	0x0a
 8004125:	00          	.byte	0x00
 8004126:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800412a:	0728      	lsls	r0, r5, #28
 800412c:	d5c0      	bpl.n	80040b0 <_strtod_l+0x88>
 800412e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004132:	e7bd      	b.n	80040b0 <_strtod_l+0x88>
 8004134:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004138:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800413a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800413e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004142:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004146:	e7f0      	b.n	800412a <_strtod_l+0x102>
 8004148:	f8df b180 	ldr.w	fp, [pc, #384]	; 80042cc <_strtod_l+0x2a4>
 800414c:	e7ed      	b.n	800412a <_strtod_l+0x102>
 800414e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004152:	f04f 3aff 	mov.w	sl, #4294967295
 8004156:	e7e8      	b.n	800412a <_strtod_l+0x102>
 8004158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	9217      	str	r2, [sp, #92]	; 0x5c
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b30      	cmp	r3, #48	; 0x30
 8004162:	d0f9      	beq.n	8004158 <_strtod_l+0x130>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0a3      	beq.n	80040b0 <_strtod_l+0x88>
 8004168:	2301      	movs	r3, #1
 800416a:	f04f 0900 	mov.w	r9, #0
 800416e:	9304      	str	r3, [sp, #16]
 8004170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004172:	9308      	str	r3, [sp, #32]
 8004174:	f8cd 901c 	str.w	r9, [sp, #28]
 8004178:	464f      	mov	r7, r9
 800417a:	220a      	movs	r2, #10
 800417c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800417e:	7806      	ldrb	r6, [r0, #0]
 8004180:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004184:	b2d9      	uxtb	r1, r3
 8004186:	2909      	cmp	r1, #9
 8004188:	d92a      	bls.n	80041e0 <_strtod_l+0x1b8>
 800418a:	9905      	ldr	r1, [sp, #20]
 800418c:	462a      	mov	r2, r5
 800418e:	f7ff ff18 	bl	8003fc2 <strncmp>
 8004192:	b398      	cbz	r0, 80041fc <_strtod_l+0x1d4>
 8004194:	2000      	movs	r0, #0
 8004196:	4632      	mov	r2, r6
 8004198:	463d      	mov	r5, r7
 800419a:	9005      	str	r0, [sp, #20]
 800419c:	4603      	mov	r3, r0
 800419e:	2a65      	cmp	r2, #101	; 0x65
 80041a0:	d001      	beq.n	80041a6 <_strtod_l+0x17e>
 80041a2:	2a45      	cmp	r2, #69	; 0x45
 80041a4:	d118      	bne.n	80041d8 <_strtod_l+0x1b0>
 80041a6:	b91d      	cbnz	r5, 80041b0 <_strtod_l+0x188>
 80041a8:	9a04      	ldr	r2, [sp, #16]
 80041aa:	4302      	orrs	r2, r0
 80041ac:	d09e      	beq.n	80040ec <_strtod_l+0xc4>
 80041ae:	2500      	movs	r5, #0
 80041b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80041b4:	f108 0201 	add.w	r2, r8, #1
 80041b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80041ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80041be:	2a2b      	cmp	r2, #43	; 0x2b
 80041c0:	d075      	beq.n	80042ae <_strtod_l+0x286>
 80041c2:	2a2d      	cmp	r2, #45	; 0x2d
 80041c4:	d07b      	beq.n	80042be <_strtod_l+0x296>
 80041c6:	f04f 0c00 	mov.w	ip, #0
 80041ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80041ce:	2909      	cmp	r1, #9
 80041d0:	f240 8082 	bls.w	80042d8 <_strtod_l+0x2b0>
 80041d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80041d8:	2600      	movs	r6, #0
 80041da:	e09d      	b.n	8004318 <_strtod_l+0x2f0>
 80041dc:	2300      	movs	r3, #0
 80041de:	e7c4      	b.n	800416a <_strtod_l+0x142>
 80041e0:	2f08      	cmp	r7, #8
 80041e2:	bfd8      	it	le
 80041e4:	9907      	ldrle	r1, [sp, #28]
 80041e6:	f100 0001 	add.w	r0, r0, #1
 80041ea:	bfda      	itte	le
 80041ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80041f0:	9307      	strle	r3, [sp, #28]
 80041f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80041f6:	3701      	adds	r7, #1
 80041f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80041fa:	e7bf      	b.n	800417c <_strtod_l+0x154>
 80041fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041fe:	195a      	adds	r2, r3, r5
 8004200:	9217      	str	r2, [sp, #92]	; 0x5c
 8004202:	5d5a      	ldrb	r2, [r3, r5]
 8004204:	2f00      	cmp	r7, #0
 8004206:	d037      	beq.n	8004278 <_strtod_l+0x250>
 8004208:	9005      	str	r0, [sp, #20]
 800420a:	463d      	mov	r5, r7
 800420c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004210:	2b09      	cmp	r3, #9
 8004212:	d912      	bls.n	800423a <_strtod_l+0x212>
 8004214:	2301      	movs	r3, #1
 8004216:	e7c2      	b.n	800419e <_strtod_l+0x176>
 8004218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	9217      	str	r2, [sp, #92]	; 0x5c
 800421e:	785a      	ldrb	r2, [r3, #1]
 8004220:	3001      	adds	r0, #1
 8004222:	2a30      	cmp	r2, #48	; 0x30
 8004224:	d0f8      	beq.n	8004218 <_strtod_l+0x1f0>
 8004226:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800422a:	2b08      	cmp	r3, #8
 800422c:	f200 84d9 	bhi.w	8004be2 <_strtod_l+0xbba>
 8004230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004232:	9005      	str	r0, [sp, #20]
 8004234:	2000      	movs	r0, #0
 8004236:	9308      	str	r3, [sp, #32]
 8004238:	4605      	mov	r5, r0
 800423a:	3a30      	subs	r2, #48	; 0x30
 800423c:	f100 0301 	add.w	r3, r0, #1
 8004240:	d014      	beq.n	800426c <_strtod_l+0x244>
 8004242:	9905      	ldr	r1, [sp, #20]
 8004244:	4419      	add	r1, r3
 8004246:	9105      	str	r1, [sp, #20]
 8004248:	462b      	mov	r3, r5
 800424a:	eb00 0e05 	add.w	lr, r0, r5
 800424e:	210a      	movs	r1, #10
 8004250:	4573      	cmp	r3, lr
 8004252:	d113      	bne.n	800427c <_strtod_l+0x254>
 8004254:	182b      	adds	r3, r5, r0
 8004256:	2b08      	cmp	r3, #8
 8004258:	f105 0501 	add.w	r5, r5, #1
 800425c:	4405      	add	r5, r0
 800425e:	dc1c      	bgt.n	800429a <_strtod_l+0x272>
 8004260:	9907      	ldr	r1, [sp, #28]
 8004262:	230a      	movs	r3, #10
 8004264:	fb03 2301 	mla	r3, r3, r1, r2
 8004268:	9307      	str	r3, [sp, #28]
 800426a:	2300      	movs	r3, #0
 800426c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800426e:	1c51      	adds	r1, r2, #1
 8004270:	9117      	str	r1, [sp, #92]	; 0x5c
 8004272:	7852      	ldrb	r2, [r2, #1]
 8004274:	4618      	mov	r0, r3
 8004276:	e7c9      	b.n	800420c <_strtod_l+0x1e4>
 8004278:	4638      	mov	r0, r7
 800427a:	e7d2      	b.n	8004222 <_strtod_l+0x1fa>
 800427c:	2b08      	cmp	r3, #8
 800427e:	dc04      	bgt.n	800428a <_strtod_l+0x262>
 8004280:	9e07      	ldr	r6, [sp, #28]
 8004282:	434e      	muls	r6, r1
 8004284:	9607      	str	r6, [sp, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	e7e2      	b.n	8004250 <_strtod_l+0x228>
 800428a:	f103 0c01 	add.w	ip, r3, #1
 800428e:	f1bc 0f10 	cmp.w	ip, #16
 8004292:	bfd8      	it	le
 8004294:	fb01 f909 	mulle.w	r9, r1, r9
 8004298:	e7f5      	b.n	8004286 <_strtod_l+0x25e>
 800429a:	2d10      	cmp	r5, #16
 800429c:	bfdc      	itt	le
 800429e:	230a      	movle	r3, #10
 80042a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80042a4:	e7e1      	b.n	800426a <_strtod_l+0x242>
 80042a6:	2300      	movs	r3, #0
 80042a8:	9305      	str	r3, [sp, #20]
 80042aa:	2301      	movs	r3, #1
 80042ac:	e77c      	b.n	80041a8 <_strtod_l+0x180>
 80042ae:	f04f 0c00 	mov.w	ip, #0
 80042b2:	f108 0202 	add.w	r2, r8, #2
 80042b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80042b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80042bc:	e785      	b.n	80041ca <_strtod_l+0x1a2>
 80042be:	f04f 0c01 	mov.w	ip, #1
 80042c2:	e7f6      	b.n	80042b2 <_strtod_l+0x28a>
 80042c4:	08007be8 	.word	0x08007be8
 80042c8:	08007a20 	.word	0x08007a20
 80042cc:	7ff00000 	.word	0x7ff00000
 80042d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042d2:	1c51      	adds	r1, r2, #1
 80042d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80042d6:	7852      	ldrb	r2, [r2, #1]
 80042d8:	2a30      	cmp	r2, #48	; 0x30
 80042da:	d0f9      	beq.n	80042d0 <_strtod_l+0x2a8>
 80042dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80042e0:	2908      	cmp	r1, #8
 80042e2:	f63f af79 	bhi.w	80041d8 <_strtod_l+0x1b0>
 80042e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80042ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042ec:	9206      	str	r2, [sp, #24]
 80042ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042f0:	1c51      	adds	r1, r2, #1
 80042f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80042f4:	7852      	ldrb	r2, [r2, #1]
 80042f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80042fa:	2e09      	cmp	r6, #9
 80042fc:	d937      	bls.n	800436e <_strtod_l+0x346>
 80042fe:	9e06      	ldr	r6, [sp, #24]
 8004300:	1b89      	subs	r1, r1, r6
 8004302:	2908      	cmp	r1, #8
 8004304:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004308:	dc02      	bgt.n	8004310 <_strtod_l+0x2e8>
 800430a:	4576      	cmp	r6, lr
 800430c:	bfa8      	it	ge
 800430e:	4676      	movge	r6, lr
 8004310:	f1bc 0f00 	cmp.w	ip, #0
 8004314:	d000      	beq.n	8004318 <_strtod_l+0x2f0>
 8004316:	4276      	negs	r6, r6
 8004318:	2d00      	cmp	r5, #0
 800431a:	d14d      	bne.n	80043b8 <_strtod_l+0x390>
 800431c:	9904      	ldr	r1, [sp, #16]
 800431e:	4301      	orrs	r1, r0
 8004320:	f47f aec6 	bne.w	80040b0 <_strtod_l+0x88>
 8004324:	2b00      	cmp	r3, #0
 8004326:	f47f aee1 	bne.w	80040ec <_strtod_l+0xc4>
 800432a:	2a69      	cmp	r2, #105	; 0x69
 800432c:	d027      	beq.n	800437e <_strtod_l+0x356>
 800432e:	dc24      	bgt.n	800437a <_strtod_l+0x352>
 8004330:	2a49      	cmp	r2, #73	; 0x49
 8004332:	d024      	beq.n	800437e <_strtod_l+0x356>
 8004334:	2a4e      	cmp	r2, #78	; 0x4e
 8004336:	f47f aed9 	bne.w	80040ec <_strtod_l+0xc4>
 800433a:	499f      	ldr	r1, [pc, #636]	; (80045b8 <_strtod_l+0x590>)
 800433c:	a817      	add	r0, sp, #92	; 0x5c
 800433e:	f000 ffe5 	bl	800530c <__match>
 8004342:	2800      	cmp	r0, #0
 8004344:	f43f aed2 	beq.w	80040ec <_strtod_l+0xc4>
 8004348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b28      	cmp	r3, #40	; 0x28
 800434e:	d12d      	bne.n	80043ac <_strtod_l+0x384>
 8004350:	499a      	ldr	r1, [pc, #616]	; (80045bc <_strtod_l+0x594>)
 8004352:	aa1a      	add	r2, sp, #104	; 0x68
 8004354:	a817      	add	r0, sp, #92	; 0x5c
 8004356:	f000 ffed 	bl	8005334 <__hexnan>
 800435a:	2805      	cmp	r0, #5
 800435c:	d126      	bne.n	80043ac <_strtod_l+0x384>
 800435e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004360:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004364:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004368:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800436c:	e6a0      	b.n	80040b0 <_strtod_l+0x88>
 800436e:	210a      	movs	r1, #10
 8004370:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004374:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004378:	e7b9      	b.n	80042ee <_strtod_l+0x2c6>
 800437a:	2a6e      	cmp	r2, #110	; 0x6e
 800437c:	e7db      	b.n	8004336 <_strtod_l+0x30e>
 800437e:	4990      	ldr	r1, [pc, #576]	; (80045c0 <_strtod_l+0x598>)
 8004380:	a817      	add	r0, sp, #92	; 0x5c
 8004382:	f000 ffc3 	bl	800530c <__match>
 8004386:	2800      	cmp	r0, #0
 8004388:	f43f aeb0 	beq.w	80040ec <_strtod_l+0xc4>
 800438c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800438e:	498d      	ldr	r1, [pc, #564]	; (80045c4 <_strtod_l+0x59c>)
 8004390:	3b01      	subs	r3, #1
 8004392:	a817      	add	r0, sp, #92	; 0x5c
 8004394:	9317      	str	r3, [sp, #92]	; 0x5c
 8004396:	f000 ffb9 	bl	800530c <__match>
 800439a:	b910      	cbnz	r0, 80043a2 <_strtod_l+0x37a>
 800439c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800439e:	3301      	adds	r3, #1
 80043a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80043a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80045d4 <_strtod_l+0x5ac>
 80043a6:	f04f 0a00 	mov.w	sl, #0
 80043aa:	e681      	b.n	80040b0 <_strtod_l+0x88>
 80043ac:	4886      	ldr	r0, [pc, #536]	; (80045c8 <_strtod_l+0x5a0>)
 80043ae:	f002 fc23 	bl	8006bf8 <nan>
 80043b2:	ec5b ab10 	vmov	sl, fp, d0
 80043b6:	e67b      	b.n	80040b0 <_strtod_l+0x88>
 80043b8:	9b05      	ldr	r3, [sp, #20]
 80043ba:	9807      	ldr	r0, [sp, #28]
 80043bc:	1af3      	subs	r3, r6, r3
 80043be:	2f00      	cmp	r7, #0
 80043c0:	bf08      	it	eq
 80043c2:	462f      	moveq	r7, r5
 80043c4:	2d10      	cmp	r5, #16
 80043c6:	9306      	str	r3, [sp, #24]
 80043c8:	46a8      	mov	r8, r5
 80043ca:	bfa8      	it	ge
 80043cc:	f04f 0810 	movge.w	r8, #16
 80043d0:	f7fc f8a0 	bl	8000514 <__aeabi_ui2d>
 80043d4:	2d09      	cmp	r5, #9
 80043d6:	4682      	mov	sl, r0
 80043d8:	468b      	mov	fp, r1
 80043da:	dd13      	ble.n	8004404 <_strtod_l+0x3dc>
 80043dc:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <_strtod_l+0x5a4>)
 80043de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80043e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80043e6:	f7fc f90f 	bl	8000608 <__aeabi_dmul>
 80043ea:	4682      	mov	sl, r0
 80043ec:	4648      	mov	r0, r9
 80043ee:	468b      	mov	fp, r1
 80043f0:	f7fc f890 	bl	8000514 <__aeabi_ui2d>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4650      	mov	r0, sl
 80043fa:	4659      	mov	r1, fp
 80043fc:	f7fb ff4e 	bl	800029c <__adddf3>
 8004400:	4682      	mov	sl, r0
 8004402:	468b      	mov	fp, r1
 8004404:	2d0f      	cmp	r5, #15
 8004406:	dc38      	bgt.n	800447a <_strtod_l+0x452>
 8004408:	9b06      	ldr	r3, [sp, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f43f ae50 	beq.w	80040b0 <_strtod_l+0x88>
 8004410:	dd24      	ble.n	800445c <_strtod_l+0x434>
 8004412:	2b16      	cmp	r3, #22
 8004414:	dc0b      	bgt.n	800442e <_strtod_l+0x406>
 8004416:	496d      	ldr	r1, [pc, #436]	; (80045cc <_strtod_l+0x5a4>)
 8004418:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800441c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004420:	4652      	mov	r2, sl
 8004422:	465b      	mov	r3, fp
 8004424:	f7fc f8f0 	bl	8000608 <__aeabi_dmul>
 8004428:	4682      	mov	sl, r0
 800442a:	468b      	mov	fp, r1
 800442c:	e640      	b.n	80040b0 <_strtod_l+0x88>
 800442e:	9a06      	ldr	r2, [sp, #24]
 8004430:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004434:	4293      	cmp	r3, r2
 8004436:	db20      	blt.n	800447a <_strtod_l+0x452>
 8004438:	4c64      	ldr	r4, [pc, #400]	; (80045cc <_strtod_l+0x5a4>)
 800443a:	f1c5 050f 	rsb	r5, r5, #15
 800443e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004442:	4652      	mov	r2, sl
 8004444:	465b      	mov	r3, fp
 8004446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800444a:	f7fc f8dd 	bl	8000608 <__aeabi_dmul>
 800444e:	9b06      	ldr	r3, [sp, #24]
 8004450:	1b5d      	subs	r5, r3, r5
 8004452:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004456:	e9d4 2300 	ldrd	r2, r3, [r4]
 800445a:	e7e3      	b.n	8004424 <_strtod_l+0x3fc>
 800445c:	9b06      	ldr	r3, [sp, #24]
 800445e:	3316      	adds	r3, #22
 8004460:	db0b      	blt.n	800447a <_strtod_l+0x452>
 8004462:	9b05      	ldr	r3, [sp, #20]
 8004464:	1b9e      	subs	r6, r3, r6
 8004466:	4b59      	ldr	r3, [pc, #356]	; (80045cc <_strtod_l+0x5a4>)
 8004468:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800446c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fc f9f2 	bl	800085c <__aeabi_ddiv>
 8004478:	e7d6      	b.n	8004428 <_strtod_l+0x400>
 800447a:	9b06      	ldr	r3, [sp, #24]
 800447c:	eba5 0808 	sub.w	r8, r5, r8
 8004480:	4498      	add	r8, r3
 8004482:	f1b8 0f00 	cmp.w	r8, #0
 8004486:	dd74      	ble.n	8004572 <_strtod_l+0x54a>
 8004488:	f018 030f 	ands.w	r3, r8, #15
 800448c:	d00a      	beq.n	80044a4 <_strtod_l+0x47c>
 800448e:	494f      	ldr	r1, [pc, #316]	; (80045cc <_strtod_l+0x5a4>)
 8004490:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004494:	4652      	mov	r2, sl
 8004496:	465b      	mov	r3, fp
 8004498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800449c:	f7fc f8b4 	bl	8000608 <__aeabi_dmul>
 80044a0:	4682      	mov	sl, r0
 80044a2:	468b      	mov	fp, r1
 80044a4:	f038 080f 	bics.w	r8, r8, #15
 80044a8:	d04f      	beq.n	800454a <_strtod_l+0x522>
 80044aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80044ae:	dd22      	ble.n	80044f6 <_strtod_l+0x4ce>
 80044b0:	2500      	movs	r5, #0
 80044b2:	462e      	mov	r6, r5
 80044b4:	9507      	str	r5, [sp, #28]
 80044b6:	9505      	str	r5, [sp, #20]
 80044b8:	2322      	movs	r3, #34	; 0x22
 80044ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80045d4 <_strtod_l+0x5ac>
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	f04f 0a00 	mov.w	sl, #0
 80044c4:	9b07      	ldr	r3, [sp, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f43f adf2 	beq.w	80040b0 <_strtod_l+0x88>
 80044cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80044ce:	4620      	mov	r0, r4
 80044d0:	f001 f83e 	bl	8005550 <_Bfree>
 80044d4:	9905      	ldr	r1, [sp, #20]
 80044d6:	4620      	mov	r0, r4
 80044d8:	f001 f83a 	bl	8005550 <_Bfree>
 80044dc:	4631      	mov	r1, r6
 80044de:	4620      	mov	r0, r4
 80044e0:	f001 f836 	bl	8005550 <_Bfree>
 80044e4:	9907      	ldr	r1, [sp, #28]
 80044e6:	4620      	mov	r0, r4
 80044e8:	f001 f832 	bl	8005550 <_Bfree>
 80044ec:	4629      	mov	r1, r5
 80044ee:	4620      	mov	r0, r4
 80044f0:	f001 f82e 	bl	8005550 <_Bfree>
 80044f4:	e5dc      	b.n	80040b0 <_strtod_l+0x88>
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <_strtod_l+0x5a8>)
 80044f8:	9304      	str	r3, [sp, #16]
 80044fa:	2300      	movs	r3, #0
 80044fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	4699      	mov	r9, r3
 8004506:	f1b8 0f01 	cmp.w	r8, #1
 800450a:	dc21      	bgt.n	8004550 <_strtod_l+0x528>
 800450c:	b10b      	cbz	r3, 8004512 <_strtod_l+0x4ea>
 800450e:	4682      	mov	sl, r0
 8004510:	468b      	mov	fp, r1
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <_strtod_l+0x5a8>)
 8004514:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004518:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800451c:	4652      	mov	r2, sl
 800451e:	465b      	mov	r3, fp
 8004520:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004524:	f7fc f870 	bl	8000608 <__aeabi_dmul>
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <_strtod_l+0x5ac>)
 800452a:	460a      	mov	r2, r1
 800452c:	400b      	ands	r3, r1
 800452e:	492a      	ldr	r1, [pc, #168]	; (80045d8 <_strtod_l+0x5b0>)
 8004530:	428b      	cmp	r3, r1
 8004532:	4682      	mov	sl, r0
 8004534:	d8bc      	bhi.n	80044b0 <_strtod_l+0x488>
 8004536:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800453a:	428b      	cmp	r3, r1
 800453c:	bf86      	itte	hi
 800453e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80045dc <_strtod_l+0x5b4>
 8004542:	f04f 3aff 	movhi.w	sl, #4294967295
 8004546:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800454a:	2300      	movs	r3, #0
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	e084      	b.n	800465a <_strtod_l+0x632>
 8004550:	f018 0f01 	tst.w	r8, #1
 8004554:	d005      	beq.n	8004562 <_strtod_l+0x53a>
 8004556:	9b04      	ldr	r3, [sp, #16]
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fc f854 	bl	8000608 <__aeabi_dmul>
 8004560:	2301      	movs	r3, #1
 8004562:	9a04      	ldr	r2, [sp, #16]
 8004564:	3208      	adds	r2, #8
 8004566:	f109 0901 	add.w	r9, r9, #1
 800456a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800456e:	9204      	str	r2, [sp, #16]
 8004570:	e7c9      	b.n	8004506 <_strtod_l+0x4de>
 8004572:	d0ea      	beq.n	800454a <_strtod_l+0x522>
 8004574:	f1c8 0800 	rsb	r8, r8, #0
 8004578:	f018 020f 	ands.w	r2, r8, #15
 800457c:	d00a      	beq.n	8004594 <_strtod_l+0x56c>
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <_strtod_l+0x5a4>)
 8004580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004584:	4650      	mov	r0, sl
 8004586:	4659      	mov	r1, fp
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f7fc f966 	bl	800085c <__aeabi_ddiv>
 8004590:	4682      	mov	sl, r0
 8004592:	468b      	mov	fp, r1
 8004594:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004598:	d0d7      	beq.n	800454a <_strtod_l+0x522>
 800459a:	f1b8 0f1f 	cmp.w	r8, #31
 800459e:	dd1f      	ble.n	80045e0 <_strtod_l+0x5b8>
 80045a0:	2500      	movs	r5, #0
 80045a2:	462e      	mov	r6, r5
 80045a4:	9507      	str	r5, [sp, #28]
 80045a6:	9505      	str	r5, [sp, #20]
 80045a8:	2322      	movs	r3, #34	; 0x22
 80045aa:	f04f 0a00 	mov.w	sl, #0
 80045ae:	f04f 0b00 	mov.w	fp, #0
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	e786      	b.n	80044c4 <_strtod_l+0x49c>
 80045b6:	bf00      	nop
 80045b8:	08007a1a 	.word	0x08007a1a
 80045bc:	08007a34 	.word	0x08007a34
 80045c0:	08007a11 	.word	0x08007a11
 80045c4:	08007a14 	.word	0x08007a14
 80045c8:	08007df5 	.word	0x08007df5
 80045cc:	08007c98 	.word	0x08007c98
 80045d0:	08007c70 	.word	0x08007c70
 80045d4:	7ff00000 	.word	0x7ff00000
 80045d8:	7ca00000 	.word	0x7ca00000
 80045dc:	7fefffff 	.word	0x7fefffff
 80045e0:	f018 0310 	ands.w	r3, r8, #16
 80045e4:	bf18      	it	ne
 80045e6:	236a      	movne	r3, #106	; 0x6a
 80045e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004998 <_strtod_l+0x970>
 80045ec:	9304      	str	r3, [sp, #16]
 80045ee:	4650      	mov	r0, sl
 80045f0:	4659      	mov	r1, fp
 80045f2:	2300      	movs	r3, #0
 80045f4:	f018 0f01 	tst.w	r8, #1
 80045f8:	d004      	beq.n	8004604 <_strtod_l+0x5dc>
 80045fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80045fe:	f7fc f803 	bl	8000608 <__aeabi_dmul>
 8004602:	2301      	movs	r3, #1
 8004604:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004608:	f109 0908 	add.w	r9, r9, #8
 800460c:	d1f2      	bne.n	80045f4 <_strtod_l+0x5cc>
 800460e:	b10b      	cbz	r3, 8004614 <_strtod_l+0x5ec>
 8004610:	4682      	mov	sl, r0
 8004612:	468b      	mov	fp, r1
 8004614:	9b04      	ldr	r3, [sp, #16]
 8004616:	b1c3      	cbz	r3, 800464a <_strtod_l+0x622>
 8004618:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800461c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004620:	2b00      	cmp	r3, #0
 8004622:	4659      	mov	r1, fp
 8004624:	dd11      	ble.n	800464a <_strtod_l+0x622>
 8004626:	2b1f      	cmp	r3, #31
 8004628:	f340 8124 	ble.w	8004874 <_strtod_l+0x84c>
 800462c:	2b34      	cmp	r3, #52	; 0x34
 800462e:	bfde      	ittt	le
 8004630:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004634:	f04f 33ff 	movle.w	r3, #4294967295
 8004638:	fa03 f202 	lslle.w	r2, r3, r2
 800463c:	f04f 0a00 	mov.w	sl, #0
 8004640:	bfcc      	ite	gt
 8004642:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004646:	ea02 0b01 	andle.w	fp, r2, r1
 800464a:	2200      	movs	r2, #0
 800464c:	2300      	movs	r3, #0
 800464e:	4650      	mov	r0, sl
 8004650:	4659      	mov	r1, fp
 8004652:	f7fc fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8004656:	2800      	cmp	r0, #0
 8004658:	d1a2      	bne.n	80045a0 <_strtod_l+0x578>
 800465a:	9b07      	ldr	r3, [sp, #28]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	9908      	ldr	r1, [sp, #32]
 8004660:	462b      	mov	r3, r5
 8004662:	463a      	mov	r2, r7
 8004664:	4620      	mov	r0, r4
 8004666:	f000 ffdb 	bl	8005620 <__s2b>
 800466a:	9007      	str	r0, [sp, #28]
 800466c:	2800      	cmp	r0, #0
 800466e:	f43f af1f 	beq.w	80044b0 <_strtod_l+0x488>
 8004672:	9b05      	ldr	r3, [sp, #20]
 8004674:	1b9e      	subs	r6, r3, r6
 8004676:	9b06      	ldr	r3, [sp, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfb4      	ite	lt
 800467c:	4633      	movlt	r3, r6
 800467e:	2300      	movge	r3, #0
 8004680:	930c      	str	r3, [sp, #48]	; 0x30
 8004682:	9b06      	ldr	r3, [sp, #24]
 8004684:	2500      	movs	r5, #0
 8004686:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800468a:	9312      	str	r3, [sp, #72]	; 0x48
 800468c:	462e      	mov	r6, r5
 800468e:	9b07      	ldr	r3, [sp, #28]
 8004690:	4620      	mov	r0, r4
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	f000 ff1c 	bl	80054d0 <_Balloc>
 8004698:	9005      	str	r0, [sp, #20]
 800469a:	2800      	cmp	r0, #0
 800469c:	f43f af0c 	beq.w	80044b8 <_strtod_l+0x490>
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	3202      	adds	r2, #2
 80046a6:	f103 010c 	add.w	r1, r3, #12
 80046aa:	0092      	lsls	r2, r2, #2
 80046ac:	300c      	adds	r0, #12
 80046ae:	f000 ff01 	bl	80054b4 <memcpy>
 80046b2:	ec4b ab10 	vmov	d0, sl, fp
 80046b6:	aa1a      	add	r2, sp, #104	; 0x68
 80046b8:	a919      	add	r1, sp, #100	; 0x64
 80046ba:	4620      	mov	r0, r4
 80046bc:	f001 faf6 	bl	8005cac <__d2b>
 80046c0:	ec4b ab18 	vmov	d8, sl, fp
 80046c4:	9018      	str	r0, [sp, #96]	; 0x60
 80046c6:	2800      	cmp	r0, #0
 80046c8:	f43f aef6 	beq.w	80044b8 <_strtod_l+0x490>
 80046cc:	2101      	movs	r1, #1
 80046ce:	4620      	mov	r0, r4
 80046d0:	f001 f840 	bl	8005754 <__i2b>
 80046d4:	4606      	mov	r6, r0
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f43f aeee 	beq.w	80044b8 <_strtod_l+0x490>
 80046dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046de:	9904      	ldr	r1, [sp, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bfab      	itete	ge
 80046e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80046e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80046e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80046ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80046ee:	bfac      	ite	ge
 80046f0:	eb03 0902 	addge.w	r9, r3, r2
 80046f4:	1ad7      	sublt	r7, r2, r3
 80046f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80046f8:	eba3 0801 	sub.w	r8, r3, r1
 80046fc:	4490      	add	r8, r2
 80046fe:	4ba1      	ldr	r3, [pc, #644]	; (8004984 <_strtod_l+0x95c>)
 8004700:	f108 38ff 	add.w	r8, r8, #4294967295
 8004704:	4598      	cmp	r8, r3
 8004706:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800470a:	f280 80c7 	bge.w	800489c <_strtod_l+0x874>
 800470e:	eba3 0308 	sub.w	r3, r3, r8
 8004712:	2b1f      	cmp	r3, #31
 8004714:	eba2 0203 	sub.w	r2, r2, r3
 8004718:	f04f 0101 	mov.w	r1, #1
 800471c:	f300 80b1 	bgt.w	8004882 <_strtod_l+0x85a>
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	930d      	str	r3, [sp, #52]	; 0x34
 8004726:	2300      	movs	r3, #0
 8004728:	9308      	str	r3, [sp, #32]
 800472a:	eb09 0802 	add.w	r8, r9, r2
 800472e:	9b04      	ldr	r3, [sp, #16]
 8004730:	45c1      	cmp	r9, r8
 8004732:	4417      	add	r7, r2
 8004734:	441f      	add	r7, r3
 8004736:	464b      	mov	r3, r9
 8004738:	bfa8      	it	ge
 800473a:	4643      	movge	r3, r8
 800473c:	42bb      	cmp	r3, r7
 800473e:	bfa8      	it	ge
 8004740:	463b      	movge	r3, r7
 8004742:	2b00      	cmp	r3, #0
 8004744:	bfc2      	ittt	gt
 8004746:	eba8 0803 	subgt.w	r8, r8, r3
 800474a:	1aff      	subgt	r7, r7, r3
 800474c:	eba9 0903 	subgt.w	r9, r9, r3
 8004750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	dd17      	ble.n	8004786 <_strtod_l+0x75e>
 8004756:	4631      	mov	r1, r6
 8004758:	461a      	mov	r2, r3
 800475a:	4620      	mov	r0, r4
 800475c:	f001 f8ba 	bl	80058d4 <__pow5mult>
 8004760:	4606      	mov	r6, r0
 8004762:	2800      	cmp	r0, #0
 8004764:	f43f aea8 	beq.w	80044b8 <_strtod_l+0x490>
 8004768:	4601      	mov	r1, r0
 800476a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800476c:	4620      	mov	r0, r4
 800476e:	f001 f807 	bl	8005780 <__multiply>
 8004772:	900b      	str	r0, [sp, #44]	; 0x2c
 8004774:	2800      	cmp	r0, #0
 8004776:	f43f ae9f 	beq.w	80044b8 <_strtod_l+0x490>
 800477a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800477c:	4620      	mov	r0, r4
 800477e:	f000 fee7 	bl	8005550 <_Bfree>
 8004782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004784:	9318      	str	r3, [sp, #96]	; 0x60
 8004786:	f1b8 0f00 	cmp.w	r8, #0
 800478a:	f300 808c 	bgt.w	80048a6 <_strtod_l+0x87e>
 800478e:	9b06      	ldr	r3, [sp, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	dd08      	ble.n	80047a6 <_strtod_l+0x77e>
 8004794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004796:	9905      	ldr	r1, [sp, #20]
 8004798:	4620      	mov	r0, r4
 800479a:	f001 f89b 	bl	80058d4 <__pow5mult>
 800479e:	9005      	str	r0, [sp, #20]
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f43f ae89 	beq.w	80044b8 <_strtod_l+0x490>
 80047a6:	2f00      	cmp	r7, #0
 80047a8:	dd08      	ble.n	80047bc <_strtod_l+0x794>
 80047aa:	9905      	ldr	r1, [sp, #20]
 80047ac:	463a      	mov	r2, r7
 80047ae:	4620      	mov	r0, r4
 80047b0:	f001 f8ea 	bl	8005988 <__lshift>
 80047b4:	9005      	str	r0, [sp, #20]
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f43f ae7e 	beq.w	80044b8 <_strtod_l+0x490>
 80047bc:	f1b9 0f00 	cmp.w	r9, #0
 80047c0:	dd08      	ble.n	80047d4 <_strtod_l+0x7ac>
 80047c2:	4631      	mov	r1, r6
 80047c4:	464a      	mov	r2, r9
 80047c6:	4620      	mov	r0, r4
 80047c8:	f001 f8de 	bl	8005988 <__lshift>
 80047cc:	4606      	mov	r6, r0
 80047ce:	2800      	cmp	r0, #0
 80047d0:	f43f ae72 	beq.w	80044b8 <_strtod_l+0x490>
 80047d4:	9a05      	ldr	r2, [sp, #20]
 80047d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80047d8:	4620      	mov	r0, r4
 80047da:	f001 f961 	bl	8005aa0 <__mdiff>
 80047de:	4605      	mov	r5, r0
 80047e0:	2800      	cmp	r0, #0
 80047e2:	f43f ae69 	beq.w	80044b8 <_strtod_l+0x490>
 80047e6:	68c3      	ldr	r3, [r0, #12]
 80047e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ea:	2300      	movs	r3, #0
 80047ec:	60c3      	str	r3, [r0, #12]
 80047ee:	4631      	mov	r1, r6
 80047f0:	f001 f93a 	bl	8005a68 <__mcmp>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	da60      	bge.n	80048ba <_strtod_l+0x892>
 80047f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047fa:	ea53 030a 	orrs.w	r3, r3, sl
 80047fe:	f040 8082 	bne.w	8004906 <_strtod_l+0x8de>
 8004802:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004806:	2b00      	cmp	r3, #0
 8004808:	d17d      	bne.n	8004906 <_strtod_l+0x8de>
 800480a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800480e:	0d1b      	lsrs	r3, r3, #20
 8004810:	051b      	lsls	r3, r3, #20
 8004812:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004816:	d976      	bls.n	8004906 <_strtod_l+0x8de>
 8004818:	696b      	ldr	r3, [r5, #20]
 800481a:	b913      	cbnz	r3, 8004822 <_strtod_l+0x7fa>
 800481c:	692b      	ldr	r3, [r5, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	dd71      	ble.n	8004906 <_strtod_l+0x8de>
 8004822:	4629      	mov	r1, r5
 8004824:	2201      	movs	r2, #1
 8004826:	4620      	mov	r0, r4
 8004828:	f001 f8ae 	bl	8005988 <__lshift>
 800482c:	4631      	mov	r1, r6
 800482e:	4605      	mov	r5, r0
 8004830:	f001 f91a 	bl	8005a68 <__mcmp>
 8004834:	2800      	cmp	r0, #0
 8004836:	dd66      	ble.n	8004906 <_strtod_l+0x8de>
 8004838:	9904      	ldr	r1, [sp, #16]
 800483a:	4a53      	ldr	r2, [pc, #332]	; (8004988 <_strtod_l+0x960>)
 800483c:	465b      	mov	r3, fp
 800483e:	2900      	cmp	r1, #0
 8004840:	f000 8081 	beq.w	8004946 <_strtod_l+0x91e>
 8004844:	ea02 010b 	and.w	r1, r2, fp
 8004848:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800484c:	dc7b      	bgt.n	8004946 <_strtod_l+0x91e>
 800484e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004852:	f77f aea9 	ble.w	80045a8 <_strtod_l+0x580>
 8004856:	4b4d      	ldr	r3, [pc, #308]	; (800498c <_strtod_l+0x964>)
 8004858:	4650      	mov	r0, sl
 800485a:	4659      	mov	r1, fp
 800485c:	2200      	movs	r2, #0
 800485e:	f7fb fed3 	bl	8000608 <__aeabi_dmul>
 8004862:	460b      	mov	r3, r1
 8004864:	4303      	orrs	r3, r0
 8004866:	bf08      	it	eq
 8004868:	2322      	moveq	r3, #34	; 0x22
 800486a:	4682      	mov	sl, r0
 800486c:	468b      	mov	fp, r1
 800486e:	bf08      	it	eq
 8004870:	6023      	streq	r3, [r4, #0]
 8004872:	e62b      	b.n	80044cc <_strtod_l+0x4a4>
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	ea03 0a0a 	and.w	sl, r3, sl
 8004880:	e6e3      	b.n	800464a <_strtod_l+0x622>
 8004882:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004886:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800488a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800488e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004892:	fa01 f308 	lsl.w	r3, r1, r8
 8004896:	9308      	str	r3, [sp, #32]
 8004898:	910d      	str	r1, [sp, #52]	; 0x34
 800489a:	e746      	b.n	800472a <_strtod_l+0x702>
 800489c:	2300      	movs	r3, #0
 800489e:	9308      	str	r3, [sp, #32]
 80048a0:	2301      	movs	r3, #1
 80048a2:	930d      	str	r3, [sp, #52]	; 0x34
 80048a4:	e741      	b.n	800472a <_strtod_l+0x702>
 80048a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80048a8:	4642      	mov	r2, r8
 80048aa:	4620      	mov	r0, r4
 80048ac:	f001 f86c 	bl	8005988 <__lshift>
 80048b0:	9018      	str	r0, [sp, #96]	; 0x60
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f47f af6b 	bne.w	800478e <_strtod_l+0x766>
 80048b8:	e5fe      	b.n	80044b8 <_strtod_l+0x490>
 80048ba:	465f      	mov	r7, fp
 80048bc:	d16e      	bne.n	800499c <_strtod_l+0x974>
 80048be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048c4:	b342      	cbz	r2, 8004918 <_strtod_l+0x8f0>
 80048c6:	4a32      	ldr	r2, [pc, #200]	; (8004990 <_strtod_l+0x968>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d128      	bne.n	800491e <_strtod_l+0x8f6>
 80048cc:	9b04      	ldr	r3, [sp, #16]
 80048ce:	4651      	mov	r1, sl
 80048d0:	b1eb      	cbz	r3, 800490e <_strtod_l+0x8e6>
 80048d2:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <_strtod_l+0x960>)
 80048d4:	403b      	ands	r3, r7
 80048d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80048da:	f04f 32ff 	mov.w	r2, #4294967295
 80048de:	d819      	bhi.n	8004914 <_strtod_l+0x8ec>
 80048e0:	0d1b      	lsrs	r3, r3, #20
 80048e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	4299      	cmp	r1, r3
 80048ec:	d117      	bne.n	800491e <_strtod_l+0x8f6>
 80048ee:	4b29      	ldr	r3, [pc, #164]	; (8004994 <_strtod_l+0x96c>)
 80048f0:	429f      	cmp	r7, r3
 80048f2:	d102      	bne.n	80048fa <_strtod_l+0x8d2>
 80048f4:	3101      	adds	r1, #1
 80048f6:	f43f addf 	beq.w	80044b8 <_strtod_l+0x490>
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <_strtod_l+0x960>)
 80048fc:	403b      	ands	r3, r7
 80048fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004902:	f04f 0a00 	mov.w	sl, #0
 8004906:	9b04      	ldr	r3, [sp, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1a4      	bne.n	8004856 <_strtod_l+0x82e>
 800490c:	e5de      	b.n	80044cc <_strtod_l+0x4a4>
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	e7ea      	b.n	80048ea <_strtod_l+0x8c2>
 8004914:	4613      	mov	r3, r2
 8004916:	e7e8      	b.n	80048ea <_strtod_l+0x8c2>
 8004918:	ea53 030a 	orrs.w	r3, r3, sl
 800491c:	d08c      	beq.n	8004838 <_strtod_l+0x810>
 800491e:	9b08      	ldr	r3, [sp, #32]
 8004920:	b1db      	cbz	r3, 800495a <_strtod_l+0x932>
 8004922:	423b      	tst	r3, r7
 8004924:	d0ef      	beq.n	8004906 <_strtod_l+0x8de>
 8004926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004928:	9a04      	ldr	r2, [sp, #16]
 800492a:	4650      	mov	r0, sl
 800492c:	4659      	mov	r1, fp
 800492e:	b1c3      	cbz	r3, 8004962 <_strtod_l+0x93a>
 8004930:	f7ff fb5b 	bl	8003fea <sulp>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	ec51 0b18 	vmov	r0, r1, d8
 800493c:	f7fb fcae 	bl	800029c <__adddf3>
 8004940:	4682      	mov	sl, r0
 8004942:	468b      	mov	fp, r1
 8004944:	e7df      	b.n	8004906 <_strtod_l+0x8de>
 8004946:	4013      	ands	r3, r2
 8004948:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800494c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004950:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004954:	f04f 3aff 	mov.w	sl, #4294967295
 8004958:	e7d5      	b.n	8004906 <_strtod_l+0x8de>
 800495a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800495c:	ea13 0f0a 	tst.w	r3, sl
 8004960:	e7e0      	b.n	8004924 <_strtod_l+0x8fc>
 8004962:	f7ff fb42 	bl	8003fea <sulp>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	ec51 0b18 	vmov	r0, r1, d8
 800496e:	f7fb fc93 	bl	8000298 <__aeabi_dsub>
 8004972:	2200      	movs	r2, #0
 8004974:	2300      	movs	r3, #0
 8004976:	4682      	mov	sl, r0
 8004978:	468b      	mov	fp, r1
 800497a:	f7fc f8ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800497e:	2800      	cmp	r0, #0
 8004980:	d0c1      	beq.n	8004906 <_strtod_l+0x8de>
 8004982:	e611      	b.n	80045a8 <_strtod_l+0x580>
 8004984:	fffffc02 	.word	0xfffffc02
 8004988:	7ff00000 	.word	0x7ff00000
 800498c:	39500000 	.word	0x39500000
 8004990:	000fffff 	.word	0x000fffff
 8004994:	7fefffff 	.word	0x7fefffff
 8004998:	08007a48 	.word	0x08007a48
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	f001 f9e0 	bl	8005d64 <__ratio>
 80049a4:	ec59 8b10 	vmov	r8, r9, d0
 80049a8:	ee10 0a10 	vmov	r0, s0
 80049ac:	2200      	movs	r2, #0
 80049ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049b2:	4649      	mov	r1, r9
 80049b4:	f7fc f8a4 	bl	8000b00 <__aeabi_dcmple>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d07a      	beq.n	8004ab2 <_strtod_l+0xa8a>
 80049bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04a      	beq.n	8004a58 <_strtod_l+0xa30>
 80049c2:	4b95      	ldr	r3, [pc, #596]	; (8004c18 <_strtod_l+0xbf0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004c18 <_strtod_l+0xbf0>
 80049ce:	f04f 0800 	mov.w	r8, #0
 80049d2:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <_strtod_l+0xbf4>)
 80049d4:	403b      	ands	r3, r7
 80049d6:	930d      	str	r3, [sp, #52]	; 0x34
 80049d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049da:	4b91      	ldr	r3, [pc, #580]	; (8004c20 <_strtod_l+0xbf8>)
 80049dc:	429a      	cmp	r2, r3
 80049de:	f040 80b0 	bne.w	8004b42 <_strtod_l+0xb1a>
 80049e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80049ea:	ec4b ab10 	vmov	d0, sl, fp
 80049ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049f2:	f001 f8df 	bl	8005bb4 <__ulp>
 80049f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049fa:	ec53 2b10 	vmov	r2, r3, d0
 80049fe:	f7fb fe03 	bl	8000608 <__aeabi_dmul>
 8004a02:	4652      	mov	r2, sl
 8004a04:	465b      	mov	r3, fp
 8004a06:	f7fb fc49 	bl	800029c <__adddf3>
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4983      	ldr	r1, [pc, #524]	; (8004c1c <_strtod_l+0xbf4>)
 8004a0e:	4a85      	ldr	r2, [pc, #532]	; (8004c24 <_strtod_l+0xbfc>)
 8004a10:	4019      	ands	r1, r3
 8004a12:	4291      	cmp	r1, r2
 8004a14:	4682      	mov	sl, r0
 8004a16:	d960      	bls.n	8004ada <_strtod_l+0xab2>
 8004a18:	ee18 3a90 	vmov	r3, s17
 8004a1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d104      	bne.n	8004a2e <_strtod_l+0xa06>
 8004a24:	ee18 3a10 	vmov	r3, s16
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f43f ad45 	beq.w	80044b8 <_strtod_l+0x490>
 8004a2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004c30 <_strtod_l+0xc08>
 8004a32:	f04f 3aff 	mov.w	sl, #4294967295
 8004a36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fd89 	bl	8005550 <_Bfree>
 8004a3e:	9905      	ldr	r1, [sp, #20]
 8004a40:	4620      	mov	r0, r4
 8004a42:	f000 fd85 	bl	8005550 <_Bfree>
 8004a46:	4631      	mov	r1, r6
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 fd81 	bl	8005550 <_Bfree>
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 fd7d 	bl	8005550 <_Bfree>
 8004a56:	e61a      	b.n	800468e <_strtod_l+0x666>
 8004a58:	f1ba 0f00 	cmp.w	sl, #0
 8004a5c:	d11b      	bne.n	8004a96 <_strtod_l+0xa6e>
 8004a5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a62:	b9f3      	cbnz	r3, 8004aa2 <_strtod_l+0xa7a>
 8004a64:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <_strtod_l+0xbf0>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fc f83e 	bl	8000aec <__aeabi_dcmplt>
 8004a70:	b9d0      	cbnz	r0, 8004aa8 <_strtod_l+0xa80>
 8004a72:	4640      	mov	r0, r8
 8004a74:	4649      	mov	r1, r9
 8004a76:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <_strtod_l+0xc00>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f7fb fdc5 	bl	8000608 <__aeabi_dmul>
 8004a7e:	4680      	mov	r8, r0
 8004a80:	4689      	mov	r9, r1
 8004a82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004a8a:	9315      	str	r3, [sp, #84]	; 0x54
 8004a8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004a90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a94:	e79d      	b.n	80049d2 <_strtod_l+0x9aa>
 8004a96:	f1ba 0f01 	cmp.w	sl, #1
 8004a9a:	d102      	bne.n	8004aa2 <_strtod_l+0xa7a>
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	f43f ad83 	beq.w	80045a8 <_strtod_l+0x580>
 8004aa2:	4b62      	ldr	r3, [pc, #392]	; (8004c2c <_strtod_l+0xc04>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	e78e      	b.n	80049c6 <_strtod_l+0x99e>
 8004aa8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004c28 <_strtod_l+0xc00>
 8004aac:	f04f 0800 	mov.w	r8, #0
 8004ab0:	e7e7      	b.n	8004a82 <_strtod_l+0xa5a>
 8004ab2:	4b5d      	ldr	r3, [pc, #372]	; (8004c28 <_strtod_l+0xc00>)
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f7fb fda5 	bl	8000608 <__aeabi_dmul>
 8004abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	4689      	mov	r9, r1
 8004ac4:	b933      	cbnz	r3, 8004ad4 <_strtod_l+0xaac>
 8004ac6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aca:	900e      	str	r0, [sp, #56]	; 0x38
 8004acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ace:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004ad2:	e7dd      	b.n	8004a90 <_strtod_l+0xa68>
 8004ad4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004ad8:	e7f9      	b.n	8004ace <_strtod_l+0xaa6>
 8004ada:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004ade:	9b04      	ldr	r3, [sp, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1a8      	bne.n	8004a36 <_strtod_l+0xa0e>
 8004ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004aea:	0d1b      	lsrs	r3, r3, #20
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d1a1      	bne.n	8004a36 <_strtod_l+0xa0e>
 8004af2:	4640      	mov	r0, r8
 8004af4:	4649      	mov	r1, r9
 8004af6:	f7fc f8bf 	bl	8000c78 <__aeabi_d2lz>
 8004afa:	f7fb fd57 	bl	80005ac <__aeabi_l2d>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4640      	mov	r0, r8
 8004b04:	4649      	mov	r1, r9
 8004b06:	f7fb fbc7 	bl	8000298 <__aeabi_dsub>
 8004b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b10:	ea43 030a 	orr.w	r3, r3, sl
 8004b14:	4313      	orrs	r3, r2
 8004b16:	4680      	mov	r8, r0
 8004b18:	4689      	mov	r9, r1
 8004b1a:	d055      	beq.n	8004bc8 <_strtod_l+0xba0>
 8004b1c:	a336      	add	r3, pc, #216	; (adr r3, 8004bf8 <_strtod_l+0xbd0>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb ffe3 	bl	8000aec <__aeabi_dcmplt>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f47f acd0 	bne.w	80044cc <_strtod_l+0x4a4>
 8004b2c:	a334      	add	r3, pc, #208	; (adr r3, 8004c00 <_strtod_l+0xbd8>)
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fff7 	bl	8000b28 <__aeabi_dcmpgt>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f43f af7b 	beq.w	8004a36 <_strtod_l+0xa0e>
 8004b40:	e4c4      	b.n	80044cc <_strtod_l+0x4a4>
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	b333      	cbz	r3, 8004b94 <_strtod_l+0xb6c>
 8004b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b4c:	d822      	bhi.n	8004b94 <_strtod_l+0xb6c>
 8004b4e:	a32e      	add	r3, pc, #184	; (adr r3, 8004c08 <_strtod_l+0xbe0>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	4640      	mov	r0, r8
 8004b56:	4649      	mov	r1, r9
 8004b58:	f7fb ffd2 	bl	8000b00 <__aeabi_dcmple>
 8004b5c:	b1a0      	cbz	r0, 8004b88 <_strtod_l+0xb60>
 8004b5e:	4649      	mov	r1, r9
 8004b60:	4640      	mov	r0, r8
 8004b62:	f7fc f801 	bl	8000b68 <__aeabi_d2uiz>
 8004b66:	2801      	cmp	r0, #1
 8004b68:	bf38      	it	cc
 8004b6a:	2001      	movcc	r0, #1
 8004b6c:	f7fb fcd2 	bl	8000514 <__aeabi_ui2d>
 8004b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b72:	4680      	mov	r8, r0
 8004b74:	4689      	mov	r9, r1
 8004b76:	bb23      	cbnz	r3, 8004bc2 <_strtod_l+0xb9a>
 8004b78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b7c:	9010      	str	r0, [sp, #64]	; 0x40
 8004b7e:	9311      	str	r3, [sp, #68]	; 0x44
 8004b80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	9309      	str	r3, [sp, #36]	; 0x24
 8004b94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b98:	eeb0 0a48 	vmov.f32	s0, s16
 8004b9c:	eef0 0a68 	vmov.f32	s1, s17
 8004ba0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ba4:	f001 f806 	bl	8005bb4 <__ulp>
 8004ba8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004bac:	ec53 2b10 	vmov	r2, r3, d0
 8004bb0:	f7fb fd2a 	bl	8000608 <__aeabi_dmul>
 8004bb4:	ec53 2b18 	vmov	r2, r3, d8
 8004bb8:	f7fb fb70 	bl	800029c <__adddf3>
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	468b      	mov	fp, r1
 8004bc0:	e78d      	b.n	8004ade <_strtod_l+0xab6>
 8004bc2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004bc6:	e7db      	b.n	8004b80 <_strtod_l+0xb58>
 8004bc8:	a311      	add	r3, pc, #68	; (adr r3, 8004c10 <_strtod_l+0xbe8>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb ff8d 	bl	8000aec <__aeabi_dcmplt>
 8004bd2:	e7b2      	b.n	8004b3a <_strtod_l+0xb12>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004bd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	f7ff ba6b 	b.w	80040b8 <_strtod_l+0x90>
 8004be2:	2a65      	cmp	r2, #101	; 0x65
 8004be4:	f43f ab5f 	beq.w	80042a6 <_strtod_l+0x27e>
 8004be8:	2a45      	cmp	r2, #69	; 0x45
 8004bea:	f43f ab5c 	beq.w	80042a6 <_strtod_l+0x27e>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f7ff bb94 	b.w	800431c <_strtod_l+0x2f4>
 8004bf4:	f3af 8000 	nop.w
 8004bf8:	94a03595 	.word	0x94a03595
 8004bfc:	3fdfffff 	.word	0x3fdfffff
 8004c00:	35afe535 	.word	0x35afe535
 8004c04:	3fe00000 	.word	0x3fe00000
 8004c08:	ffc00000 	.word	0xffc00000
 8004c0c:	41dfffff 	.word	0x41dfffff
 8004c10:	94a03595 	.word	0x94a03595
 8004c14:	3fcfffff 	.word	0x3fcfffff
 8004c18:	3ff00000 	.word	0x3ff00000
 8004c1c:	7ff00000 	.word	0x7ff00000
 8004c20:	7fe00000 	.word	0x7fe00000
 8004c24:	7c9fffff 	.word	0x7c9fffff
 8004c28:	3fe00000 	.word	0x3fe00000
 8004c2c:	bff00000 	.word	0xbff00000
 8004c30:	7fefffff 	.word	0x7fefffff

08004c34 <_strtod_r>:
 8004c34:	4b01      	ldr	r3, [pc, #4]	; (8004c3c <_strtod_r+0x8>)
 8004c36:	f7ff b9f7 	b.w	8004028 <_strtod_l>
 8004c3a:	bf00      	nop
 8004c3c:	20000074 	.word	0x20000074

08004c40 <_strtol_l.constprop.0>:
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c46:	d001      	beq.n	8004c4c <_strtol_l.constprop.0+0xc>
 8004c48:	2b24      	cmp	r3, #36	; 0x24
 8004c4a:	d906      	bls.n	8004c5a <_strtol_l.constprop.0+0x1a>
 8004c4c:	f7fe fee0 	bl	8003a10 <__errno>
 8004c50:	2316      	movs	r3, #22
 8004c52:	6003      	str	r3, [r0, #0]
 8004c54:	2000      	movs	r0, #0
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004d40 <_strtol_l.constprop.0+0x100>
 8004c5e:	460d      	mov	r5, r1
 8004c60:	462e      	mov	r6, r5
 8004c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c66:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004c6a:	f017 0708 	ands.w	r7, r7, #8
 8004c6e:	d1f7      	bne.n	8004c60 <_strtol_l.constprop.0+0x20>
 8004c70:	2c2d      	cmp	r4, #45	; 0x2d
 8004c72:	d132      	bne.n	8004cda <_strtol_l.constprop.0+0x9a>
 8004c74:	782c      	ldrb	r4, [r5, #0]
 8004c76:	2701      	movs	r7, #1
 8004c78:	1cb5      	adds	r5, r6, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d05b      	beq.n	8004d36 <_strtol_l.constprop.0+0xf6>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d109      	bne.n	8004c96 <_strtol_l.constprop.0+0x56>
 8004c82:	2c30      	cmp	r4, #48	; 0x30
 8004c84:	d107      	bne.n	8004c96 <_strtol_l.constprop.0+0x56>
 8004c86:	782c      	ldrb	r4, [r5, #0]
 8004c88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c8c:	2c58      	cmp	r4, #88	; 0x58
 8004c8e:	d14d      	bne.n	8004d2c <_strtol_l.constprop.0+0xec>
 8004c90:	786c      	ldrb	r4, [r5, #1]
 8004c92:	2310      	movs	r3, #16
 8004c94:	3502      	adds	r5, #2
 8004c96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c9e:	f04f 0c00 	mov.w	ip, #0
 8004ca2:	fbb8 f9f3 	udiv	r9, r8, r3
 8004ca6:	4666      	mov	r6, ip
 8004ca8:	fb03 8a19 	mls	sl, r3, r9, r8
 8004cac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004cb0:	f1be 0f09 	cmp.w	lr, #9
 8004cb4:	d816      	bhi.n	8004ce4 <_strtol_l.constprop.0+0xa4>
 8004cb6:	4674      	mov	r4, lr
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	dd24      	ble.n	8004d06 <_strtol_l.constprop.0+0xc6>
 8004cbc:	f1bc 0f00 	cmp.w	ip, #0
 8004cc0:	db1e      	blt.n	8004d00 <_strtol_l.constprop.0+0xc0>
 8004cc2:	45b1      	cmp	r9, r6
 8004cc4:	d31c      	bcc.n	8004d00 <_strtol_l.constprop.0+0xc0>
 8004cc6:	d101      	bne.n	8004ccc <_strtol_l.constprop.0+0x8c>
 8004cc8:	45a2      	cmp	sl, r4
 8004cca:	db19      	blt.n	8004d00 <_strtol_l.constprop.0+0xc0>
 8004ccc:	fb06 4603 	mla	r6, r6, r3, r4
 8004cd0:	f04f 0c01 	mov.w	ip, #1
 8004cd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cd8:	e7e8      	b.n	8004cac <_strtol_l.constprop.0+0x6c>
 8004cda:	2c2b      	cmp	r4, #43	; 0x2b
 8004cdc:	bf04      	itt	eq
 8004cde:	782c      	ldrbeq	r4, [r5, #0]
 8004ce0:	1cb5      	addeq	r5, r6, #2
 8004ce2:	e7ca      	b.n	8004c7a <_strtol_l.constprop.0+0x3a>
 8004ce4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004ce8:	f1be 0f19 	cmp.w	lr, #25
 8004cec:	d801      	bhi.n	8004cf2 <_strtol_l.constprop.0+0xb2>
 8004cee:	3c37      	subs	r4, #55	; 0x37
 8004cf0:	e7e2      	b.n	8004cb8 <_strtol_l.constprop.0+0x78>
 8004cf2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004cf6:	f1be 0f19 	cmp.w	lr, #25
 8004cfa:	d804      	bhi.n	8004d06 <_strtol_l.constprop.0+0xc6>
 8004cfc:	3c57      	subs	r4, #87	; 0x57
 8004cfe:	e7db      	b.n	8004cb8 <_strtol_l.constprop.0+0x78>
 8004d00:	f04f 3cff 	mov.w	ip, #4294967295
 8004d04:	e7e6      	b.n	8004cd4 <_strtol_l.constprop.0+0x94>
 8004d06:	f1bc 0f00 	cmp.w	ip, #0
 8004d0a:	da05      	bge.n	8004d18 <_strtol_l.constprop.0+0xd8>
 8004d0c:	2322      	movs	r3, #34	; 0x22
 8004d0e:	6003      	str	r3, [r0, #0]
 8004d10:	4646      	mov	r6, r8
 8004d12:	b942      	cbnz	r2, 8004d26 <_strtol_l.constprop.0+0xe6>
 8004d14:	4630      	mov	r0, r6
 8004d16:	e79e      	b.n	8004c56 <_strtol_l.constprop.0+0x16>
 8004d18:	b107      	cbz	r7, 8004d1c <_strtol_l.constprop.0+0xdc>
 8004d1a:	4276      	negs	r6, r6
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	d0f9      	beq.n	8004d14 <_strtol_l.constprop.0+0xd4>
 8004d20:	f1bc 0f00 	cmp.w	ip, #0
 8004d24:	d000      	beq.n	8004d28 <_strtol_l.constprop.0+0xe8>
 8004d26:	1e69      	subs	r1, r5, #1
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	e7f3      	b.n	8004d14 <_strtol_l.constprop.0+0xd4>
 8004d2c:	2430      	movs	r4, #48	; 0x30
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1b1      	bne.n	8004c96 <_strtol_l.constprop.0+0x56>
 8004d32:	2308      	movs	r3, #8
 8004d34:	e7af      	b.n	8004c96 <_strtol_l.constprop.0+0x56>
 8004d36:	2c30      	cmp	r4, #48	; 0x30
 8004d38:	d0a5      	beq.n	8004c86 <_strtol_l.constprop.0+0x46>
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	e7ab      	b.n	8004c96 <_strtol_l.constprop.0+0x56>
 8004d3e:	bf00      	nop
 8004d40:	08007a71 	.word	0x08007a71

08004d44 <_strtol_r>:
 8004d44:	f7ff bf7c 	b.w	8004c40 <_strtol_l.constprop.0>

08004d48 <_write_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d07      	ldr	r5, [pc, #28]	; (8004d68 <_write_r+0x20>)
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	4608      	mov	r0, r1
 8004d50:	4611      	mov	r1, r2
 8004d52:	2200      	movs	r2, #0
 8004d54:	602a      	str	r2, [r5, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f7fc fd95 	bl	8001886 <_write>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_write_r+0x1e>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_write_r+0x1e>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000394 	.word	0x20000394

08004d6c <_close_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	; (8004d88 <_close_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f7fc fda1 	bl	80018be <_close>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_close_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_close_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	20000394 	.word	0x20000394

08004d8c <rshift>:
 8004d8c:	6903      	ldr	r3, [r0, #16]
 8004d8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004d92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004d9a:	f100 0414 	add.w	r4, r0, #20
 8004d9e:	dd45      	ble.n	8004e2c <rshift+0xa0>
 8004da0:	f011 011f 	ands.w	r1, r1, #31
 8004da4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004da8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004dac:	d10c      	bne.n	8004dc8 <rshift+0x3c>
 8004dae:	f100 0710 	add.w	r7, r0, #16
 8004db2:	4629      	mov	r1, r5
 8004db4:	42b1      	cmp	r1, r6
 8004db6:	d334      	bcc.n	8004e22 <rshift+0x96>
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	1eea      	subs	r2, r5, #3
 8004dbe:	4296      	cmp	r6, r2
 8004dc0:	bf38      	it	cc
 8004dc2:	2300      	movcc	r3, #0
 8004dc4:	4423      	add	r3, r4
 8004dc6:	e015      	b.n	8004df4 <rshift+0x68>
 8004dc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004dcc:	f1c1 0820 	rsb	r8, r1, #32
 8004dd0:	40cf      	lsrs	r7, r1
 8004dd2:	f105 0e04 	add.w	lr, r5, #4
 8004dd6:	46a1      	mov	r9, r4
 8004dd8:	4576      	cmp	r6, lr
 8004dda:	46f4      	mov	ip, lr
 8004ddc:	d815      	bhi.n	8004e0a <rshift+0x7e>
 8004dde:	1a9a      	subs	r2, r3, r2
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	3a04      	subs	r2, #4
 8004de4:	3501      	adds	r5, #1
 8004de6:	42ae      	cmp	r6, r5
 8004de8:	bf38      	it	cc
 8004dea:	2200      	movcc	r2, #0
 8004dec:	18a3      	adds	r3, r4, r2
 8004dee:	50a7      	str	r7, [r4, r2]
 8004df0:	b107      	cbz	r7, 8004df4 <rshift+0x68>
 8004df2:	3304      	adds	r3, #4
 8004df4:	1b1a      	subs	r2, r3, r4
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004dfc:	bf08      	it	eq
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	6102      	str	r2, [r0, #16]
 8004e02:	bf08      	it	eq
 8004e04:	6143      	streq	r3, [r0, #20]
 8004e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e0a:	f8dc c000 	ldr.w	ip, [ip]
 8004e0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8004e12:	ea4c 0707 	orr.w	r7, ip, r7
 8004e16:	f849 7b04 	str.w	r7, [r9], #4
 8004e1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004e1e:	40cf      	lsrs	r7, r1
 8004e20:	e7da      	b.n	8004dd8 <rshift+0x4c>
 8004e22:	f851 cb04 	ldr.w	ip, [r1], #4
 8004e26:	f847 cf04 	str.w	ip, [r7, #4]!
 8004e2a:	e7c3      	b.n	8004db4 <rshift+0x28>
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	e7e1      	b.n	8004df4 <rshift+0x68>

08004e30 <__hexdig_fun>:
 8004e30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	d802      	bhi.n	8004e3e <__hexdig_fun+0xe>
 8004e38:	3820      	subs	r0, #32
 8004e3a:	b2c0      	uxtb	r0, r0
 8004e3c:	4770      	bx	lr
 8004e3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	d801      	bhi.n	8004e4a <__hexdig_fun+0x1a>
 8004e46:	3847      	subs	r0, #71	; 0x47
 8004e48:	e7f7      	b.n	8004e3a <__hexdig_fun+0xa>
 8004e4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d801      	bhi.n	8004e56 <__hexdig_fun+0x26>
 8004e52:	3827      	subs	r0, #39	; 0x27
 8004e54:	e7f1      	b.n	8004e3a <__hexdig_fun+0xa>
 8004e56:	2000      	movs	r0, #0
 8004e58:	4770      	bx	lr
	...

08004e5c <__gethex>:
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	ed2d 8b02 	vpush	{d8}
 8004e64:	b089      	sub	sp, #36	; 0x24
 8004e66:	ee08 0a10 	vmov	s16, r0
 8004e6a:	9304      	str	r3, [sp, #16]
 8004e6c:	4bb4      	ldr	r3, [pc, #720]	; (8005140 <__gethex+0x2e4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	4618      	mov	r0, r3
 8004e74:	468b      	mov	fp, r1
 8004e76:	4690      	mov	r8, r2
 8004e78:	f7fb f9b2 	bl	80001e0 <strlen>
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	f8db 2000 	ldr.w	r2, [fp]
 8004e82:	4403      	add	r3, r0
 8004e84:	4682      	mov	sl, r0
 8004e86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e8a:	9305      	str	r3, [sp, #20]
 8004e8c:	1c93      	adds	r3, r2, #2
 8004e8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004e92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004e96:	32fe      	adds	r2, #254	; 0xfe
 8004e98:	18d1      	adds	r1, r2, r3
 8004e9a:	461f      	mov	r7, r3
 8004e9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004ea0:	9100      	str	r1, [sp, #0]
 8004ea2:	2830      	cmp	r0, #48	; 0x30
 8004ea4:	d0f8      	beq.n	8004e98 <__gethex+0x3c>
 8004ea6:	f7ff ffc3 	bl	8004e30 <__hexdig_fun>
 8004eaa:	4604      	mov	r4, r0
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d13a      	bne.n	8004f26 <__gethex+0xca>
 8004eb0:	9901      	ldr	r1, [sp, #4]
 8004eb2:	4652      	mov	r2, sl
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff f884 	bl	8003fc2 <strncmp>
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d168      	bne.n	8004f92 <__gethex+0x136>
 8004ec0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004ec4:	eb07 060a 	add.w	r6, r7, sl
 8004ec8:	f7ff ffb2 	bl	8004e30 <__hexdig_fun>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d062      	beq.n	8004f96 <__gethex+0x13a>
 8004ed0:	4633      	mov	r3, r6
 8004ed2:	7818      	ldrb	r0, [r3, #0]
 8004ed4:	2830      	cmp	r0, #48	; 0x30
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	f103 0301 	add.w	r3, r3, #1
 8004edc:	d0f9      	beq.n	8004ed2 <__gethex+0x76>
 8004ede:	f7ff ffa7 	bl	8004e30 <__hexdig_fun>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	fab0 f480 	clz	r4, r0
 8004ee8:	0964      	lsrs	r4, r4, #5
 8004eea:	4635      	mov	r5, r6
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	463a      	mov	r2, r7
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	3201      	adds	r2, #1
 8004ef4:	7830      	ldrb	r0, [r6, #0]
 8004ef6:	f7ff ff9b 	bl	8004e30 <__hexdig_fun>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d1f8      	bne.n	8004ef0 <__gethex+0x94>
 8004efe:	9901      	ldr	r1, [sp, #4]
 8004f00:	4652      	mov	r2, sl
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff f85d 	bl	8003fc2 <strncmp>
 8004f08:	b980      	cbnz	r0, 8004f2c <__gethex+0xd0>
 8004f0a:	b94d      	cbnz	r5, 8004f20 <__gethex+0xc4>
 8004f0c:	eb06 050a 	add.w	r5, r6, sl
 8004f10:	462a      	mov	r2, r5
 8004f12:	4616      	mov	r6, r2
 8004f14:	3201      	adds	r2, #1
 8004f16:	7830      	ldrb	r0, [r6, #0]
 8004f18:	f7ff ff8a 	bl	8004e30 <__hexdig_fun>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d1f8      	bne.n	8004f12 <__gethex+0xb6>
 8004f20:	1bad      	subs	r5, r5, r6
 8004f22:	00ad      	lsls	r5, r5, #2
 8004f24:	e004      	b.n	8004f30 <__gethex+0xd4>
 8004f26:	2400      	movs	r4, #0
 8004f28:	4625      	mov	r5, r4
 8004f2a:	e7e0      	b.n	8004eee <__gethex+0x92>
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	d1f7      	bne.n	8004f20 <__gethex+0xc4>
 8004f30:	7833      	ldrb	r3, [r6, #0]
 8004f32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f36:	2b50      	cmp	r3, #80	; 0x50
 8004f38:	d13b      	bne.n	8004fb2 <__gethex+0x156>
 8004f3a:	7873      	ldrb	r3, [r6, #1]
 8004f3c:	2b2b      	cmp	r3, #43	; 0x2b
 8004f3e:	d02c      	beq.n	8004f9a <__gethex+0x13e>
 8004f40:	2b2d      	cmp	r3, #45	; 0x2d
 8004f42:	d02e      	beq.n	8004fa2 <__gethex+0x146>
 8004f44:	1c71      	adds	r1, r6, #1
 8004f46:	f04f 0900 	mov.w	r9, #0
 8004f4a:	7808      	ldrb	r0, [r1, #0]
 8004f4c:	f7ff ff70 	bl	8004e30 <__hexdig_fun>
 8004f50:	1e43      	subs	r3, r0, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b18      	cmp	r3, #24
 8004f56:	d82c      	bhi.n	8004fb2 <__gethex+0x156>
 8004f58:	f1a0 0210 	sub.w	r2, r0, #16
 8004f5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004f60:	f7ff ff66 	bl	8004e30 <__hexdig_fun>
 8004f64:	1e43      	subs	r3, r0, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b18      	cmp	r3, #24
 8004f6a:	d91d      	bls.n	8004fa8 <__gethex+0x14c>
 8004f6c:	f1b9 0f00 	cmp.w	r9, #0
 8004f70:	d000      	beq.n	8004f74 <__gethex+0x118>
 8004f72:	4252      	negs	r2, r2
 8004f74:	4415      	add	r5, r2
 8004f76:	f8cb 1000 	str.w	r1, [fp]
 8004f7a:	b1e4      	cbz	r4, 8004fb6 <__gethex+0x15a>
 8004f7c:	9b00      	ldr	r3, [sp, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2700      	movne	r7, #0
 8004f84:	2706      	moveq	r7, #6
 8004f86:	4638      	mov	r0, r7
 8004f88:	b009      	add	sp, #36	; 0x24
 8004f8a:	ecbd 8b02 	vpop	{d8}
 8004f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f92:	463e      	mov	r6, r7
 8004f94:	4625      	mov	r5, r4
 8004f96:	2401      	movs	r4, #1
 8004f98:	e7ca      	b.n	8004f30 <__gethex+0xd4>
 8004f9a:	f04f 0900 	mov.w	r9, #0
 8004f9e:	1cb1      	adds	r1, r6, #2
 8004fa0:	e7d3      	b.n	8004f4a <__gethex+0xee>
 8004fa2:	f04f 0901 	mov.w	r9, #1
 8004fa6:	e7fa      	b.n	8004f9e <__gethex+0x142>
 8004fa8:	230a      	movs	r3, #10
 8004faa:	fb03 0202 	mla	r2, r3, r2, r0
 8004fae:	3a10      	subs	r2, #16
 8004fb0:	e7d4      	b.n	8004f5c <__gethex+0x100>
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	e7df      	b.n	8004f76 <__gethex+0x11a>
 8004fb6:	1bf3      	subs	r3, r6, r7
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4621      	mov	r1, r4
 8004fbc:	2b07      	cmp	r3, #7
 8004fbe:	dc0b      	bgt.n	8004fd8 <__gethex+0x17c>
 8004fc0:	ee18 0a10 	vmov	r0, s16
 8004fc4:	f000 fa84 	bl	80054d0 <_Balloc>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	b940      	cbnz	r0, 8004fde <__gethex+0x182>
 8004fcc:	4b5d      	ldr	r3, [pc, #372]	; (8005144 <__gethex+0x2e8>)
 8004fce:	4602      	mov	r2, r0
 8004fd0:	21de      	movs	r1, #222	; 0xde
 8004fd2:	485d      	ldr	r0, [pc, #372]	; (8005148 <__gethex+0x2ec>)
 8004fd4:	f001 ff1c 	bl	8006e10 <__assert_func>
 8004fd8:	3101      	adds	r1, #1
 8004fda:	105b      	asrs	r3, r3, #1
 8004fdc:	e7ee      	b.n	8004fbc <__gethex+0x160>
 8004fde:	f100 0914 	add.w	r9, r0, #20
 8004fe2:	f04f 0b00 	mov.w	fp, #0
 8004fe6:	f1ca 0301 	rsb	r3, sl, #1
 8004fea:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fee:	f8cd b000 	str.w	fp, [sp]
 8004ff2:	9306      	str	r3, [sp, #24]
 8004ff4:	42b7      	cmp	r7, r6
 8004ff6:	d340      	bcc.n	800507a <__gethex+0x21e>
 8004ff8:	9802      	ldr	r0, [sp, #8]
 8004ffa:	9b00      	ldr	r3, [sp, #0]
 8004ffc:	f840 3b04 	str.w	r3, [r0], #4
 8005000:	eba0 0009 	sub.w	r0, r0, r9
 8005004:	1080      	asrs	r0, r0, #2
 8005006:	0146      	lsls	r6, r0, #5
 8005008:	6120      	str	r0, [r4, #16]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fb52 	bl	80056b4 <__hi0bits>
 8005010:	1a30      	subs	r0, r6, r0
 8005012:	f8d8 6000 	ldr.w	r6, [r8]
 8005016:	42b0      	cmp	r0, r6
 8005018:	dd63      	ble.n	80050e2 <__gethex+0x286>
 800501a:	1b87      	subs	r7, r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	4620      	mov	r0, r4
 8005020:	f000 fef6 	bl	8005e10 <__any_on>
 8005024:	4682      	mov	sl, r0
 8005026:	b1a8      	cbz	r0, 8005054 <__gethex+0x1f8>
 8005028:	1e7b      	subs	r3, r7, #1
 800502a:	1159      	asrs	r1, r3, #5
 800502c:	f003 021f 	and.w	r2, r3, #31
 8005030:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005034:	f04f 0a01 	mov.w	sl, #1
 8005038:	fa0a f202 	lsl.w	r2, sl, r2
 800503c:	420a      	tst	r2, r1
 800503e:	d009      	beq.n	8005054 <__gethex+0x1f8>
 8005040:	4553      	cmp	r3, sl
 8005042:	dd05      	ble.n	8005050 <__gethex+0x1f4>
 8005044:	1eb9      	subs	r1, r7, #2
 8005046:	4620      	mov	r0, r4
 8005048:	f000 fee2 	bl	8005e10 <__any_on>
 800504c:	2800      	cmp	r0, #0
 800504e:	d145      	bne.n	80050dc <__gethex+0x280>
 8005050:	f04f 0a02 	mov.w	sl, #2
 8005054:	4639      	mov	r1, r7
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fe98 	bl	8004d8c <rshift>
 800505c:	443d      	add	r5, r7
 800505e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005062:	42ab      	cmp	r3, r5
 8005064:	da4c      	bge.n	8005100 <__gethex+0x2a4>
 8005066:	ee18 0a10 	vmov	r0, s16
 800506a:	4621      	mov	r1, r4
 800506c:	f000 fa70 	bl	8005550 <_Bfree>
 8005070:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005072:	2300      	movs	r3, #0
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	27a3      	movs	r7, #163	; 0xa3
 8005078:	e785      	b.n	8004f86 <__gethex+0x12a>
 800507a:	1e73      	subs	r3, r6, #1
 800507c:	9a05      	ldr	r2, [sp, #20]
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005084:	4293      	cmp	r3, r2
 8005086:	d019      	beq.n	80050bc <__gethex+0x260>
 8005088:	f1bb 0f20 	cmp.w	fp, #32
 800508c:	d107      	bne.n	800509e <__gethex+0x242>
 800508e:	9b02      	ldr	r3, [sp, #8]
 8005090:	9a00      	ldr	r2, [sp, #0]
 8005092:	f843 2b04 	str.w	r2, [r3], #4
 8005096:	9302      	str	r3, [sp, #8]
 8005098:	2300      	movs	r3, #0
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	469b      	mov	fp, r3
 800509e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80050a2:	f7ff fec5 	bl	8004e30 <__hexdig_fun>
 80050a6:	9b00      	ldr	r3, [sp, #0]
 80050a8:	f000 000f 	and.w	r0, r0, #15
 80050ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80050b0:	4303      	orrs	r3, r0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f10b 0b04 	add.w	fp, fp, #4
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	e00d      	b.n	80050d8 <__gethex+0x27c>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	9a06      	ldr	r2, [sp, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	42bb      	cmp	r3, r7
 80050c4:	d3e0      	bcc.n	8005088 <__gethex+0x22c>
 80050c6:	4618      	mov	r0, r3
 80050c8:	9901      	ldr	r1, [sp, #4]
 80050ca:	9307      	str	r3, [sp, #28]
 80050cc:	4652      	mov	r2, sl
 80050ce:	f7fe ff78 	bl	8003fc2 <strncmp>
 80050d2:	9b07      	ldr	r3, [sp, #28]
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1d7      	bne.n	8005088 <__gethex+0x22c>
 80050d8:	461e      	mov	r6, r3
 80050da:	e78b      	b.n	8004ff4 <__gethex+0x198>
 80050dc:	f04f 0a03 	mov.w	sl, #3
 80050e0:	e7b8      	b.n	8005054 <__gethex+0x1f8>
 80050e2:	da0a      	bge.n	80050fa <__gethex+0x29e>
 80050e4:	1a37      	subs	r7, r6, r0
 80050e6:	4621      	mov	r1, r4
 80050e8:	ee18 0a10 	vmov	r0, s16
 80050ec:	463a      	mov	r2, r7
 80050ee:	f000 fc4b 	bl	8005988 <__lshift>
 80050f2:	1bed      	subs	r5, r5, r7
 80050f4:	4604      	mov	r4, r0
 80050f6:	f100 0914 	add.w	r9, r0, #20
 80050fa:	f04f 0a00 	mov.w	sl, #0
 80050fe:	e7ae      	b.n	800505e <__gethex+0x202>
 8005100:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005104:	42a8      	cmp	r0, r5
 8005106:	dd72      	ble.n	80051ee <__gethex+0x392>
 8005108:	1b45      	subs	r5, r0, r5
 800510a:	42ae      	cmp	r6, r5
 800510c:	dc36      	bgt.n	800517c <__gethex+0x320>
 800510e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d02a      	beq.n	800516c <__gethex+0x310>
 8005116:	2b03      	cmp	r3, #3
 8005118:	d02c      	beq.n	8005174 <__gethex+0x318>
 800511a:	2b01      	cmp	r3, #1
 800511c:	d11c      	bne.n	8005158 <__gethex+0x2fc>
 800511e:	42ae      	cmp	r6, r5
 8005120:	d11a      	bne.n	8005158 <__gethex+0x2fc>
 8005122:	2e01      	cmp	r6, #1
 8005124:	d112      	bne.n	800514c <__gethex+0x2f0>
 8005126:	9a04      	ldr	r2, [sp, #16]
 8005128:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	2301      	movs	r3, #1
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	f8c9 3000 	str.w	r3, [r9]
 8005136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005138:	2762      	movs	r7, #98	; 0x62
 800513a:	601c      	str	r4, [r3, #0]
 800513c:	e723      	b.n	8004f86 <__gethex+0x12a>
 800513e:	bf00      	nop
 8005140:	08007be8 	.word	0x08007be8
 8005144:	08007b71 	.word	0x08007b71
 8005148:	08007b82 	.word	0x08007b82
 800514c:	1e71      	subs	r1, r6, #1
 800514e:	4620      	mov	r0, r4
 8005150:	f000 fe5e 	bl	8005e10 <__any_on>
 8005154:	2800      	cmp	r0, #0
 8005156:	d1e6      	bne.n	8005126 <__gethex+0x2ca>
 8005158:	ee18 0a10 	vmov	r0, s16
 800515c:	4621      	mov	r1, r4
 800515e:	f000 f9f7 	bl	8005550 <_Bfree>
 8005162:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005164:	2300      	movs	r3, #0
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	2750      	movs	r7, #80	; 0x50
 800516a:	e70c      	b.n	8004f86 <__gethex+0x12a>
 800516c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f2      	bne.n	8005158 <__gethex+0x2fc>
 8005172:	e7d8      	b.n	8005126 <__gethex+0x2ca>
 8005174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1d5      	bne.n	8005126 <__gethex+0x2ca>
 800517a:	e7ed      	b.n	8005158 <__gethex+0x2fc>
 800517c:	1e6f      	subs	r7, r5, #1
 800517e:	f1ba 0f00 	cmp.w	sl, #0
 8005182:	d131      	bne.n	80051e8 <__gethex+0x38c>
 8005184:	b127      	cbz	r7, 8005190 <__gethex+0x334>
 8005186:	4639      	mov	r1, r7
 8005188:	4620      	mov	r0, r4
 800518a:	f000 fe41 	bl	8005e10 <__any_on>
 800518e:	4682      	mov	sl, r0
 8005190:	117b      	asrs	r3, r7, #5
 8005192:	2101      	movs	r1, #1
 8005194:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005198:	f007 071f 	and.w	r7, r7, #31
 800519c:	fa01 f707 	lsl.w	r7, r1, r7
 80051a0:	421f      	tst	r7, r3
 80051a2:	4629      	mov	r1, r5
 80051a4:	4620      	mov	r0, r4
 80051a6:	bf18      	it	ne
 80051a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80051ac:	1b76      	subs	r6, r6, r5
 80051ae:	f7ff fded 	bl	8004d8c <rshift>
 80051b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80051b6:	2702      	movs	r7, #2
 80051b8:	f1ba 0f00 	cmp.w	sl, #0
 80051bc:	d048      	beq.n	8005250 <__gethex+0x3f4>
 80051be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d015      	beq.n	80051f2 <__gethex+0x396>
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d017      	beq.n	80051fa <__gethex+0x39e>
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d109      	bne.n	80051e2 <__gethex+0x386>
 80051ce:	f01a 0f02 	tst.w	sl, #2
 80051d2:	d006      	beq.n	80051e2 <__gethex+0x386>
 80051d4:	f8d9 0000 	ldr.w	r0, [r9]
 80051d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80051dc:	f01a 0f01 	tst.w	sl, #1
 80051e0:	d10e      	bne.n	8005200 <__gethex+0x3a4>
 80051e2:	f047 0710 	orr.w	r7, r7, #16
 80051e6:	e033      	b.n	8005250 <__gethex+0x3f4>
 80051e8:	f04f 0a01 	mov.w	sl, #1
 80051ec:	e7d0      	b.n	8005190 <__gethex+0x334>
 80051ee:	2701      	movs	r7, #1
 80051f0:	e7e2      	b.n	80051b8 <__gethex+0x35c>
 80051f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051f4:	f1c3 0301 	rsb	r3, r3, #1
 80051f8:	9315      	str	r3, [sp, #84]	; 0x54
 80051fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <__gethex+0x386>
 8005200:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005204:	f104 0314 	add.w	r3, r4, #20
 8005208:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800520c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005210:	f04f 0c00 	mov.w	ip, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f853 2b04 	ldr.w	r2, [r3], #4
 800521a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800521e:	d01c      	beq.n	800525a <__gethex+0x3fe>
 8005220:	3201      	adds	r2, #1
 8005222:	6002      	str	r2, [r0, #0]
 8005224:	2f02      	cmp	r7, #2
 8005226:	f104 0314 	add.w	r3, r4, #20
 800522a:	d13f      	bne.n	80052ac <__gethex+0x450>
 800522c:	f8d8 2000 	ldr.w	r2, [r8]
 8005230:	3a01      	subs	r2, #1
 8005232:	42b2      	cmp	r2, r6
 8005234:	d10a      	bne.n	800524c <__gethex+0x3f0>
 8005236:	1171      	asrs	r1, r6, #5
 8005238:	2201      	movs	r2, #1
 800523a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800523e:	f006 061f 	and.w	r6, r6, #31
 8005242:	fa02 f606 	lsl.w	r6, r2, r6
 8005246:	421e      	tst	r6, r3
 8005248:	bf18      	it	ne
 800524a:	4617      	movne	r7, r2
 800524c:	f047 0720 	orr.w	r7, r7, #32
 8005250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005252:	601c      	str	r4, [r3, #0]
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	601d      	str	r5, [r3, #0]
 8005258:	e695      	b.n	8004f86 <__gethex+0x12a>
 800525a:	4299      	cmp	r1, r3
 800525c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005260:	d8d8      	bhi.n	8005214 <__gethex+0x3b8>
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	459b      	cmp	fp, r3
 8005266:	db19      	blt.n	800529c <__gethex+0x440>
 8005268:	6861      	ldr	r1, [r4, #4]
 800526a:	ee18 0a10 	vmov	r0, s16
 800526e:	3101      	adds	r1, #1
 8005270:	f000 f92e 	bl	80054d0 <_Balloc>
 8005274:	4681      	mov	r9, r0
 8005276:	b918      	cbnz	r0, 8005280 <__gethex+0x424>
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <__gethex+0x488>)
 800527a:	4602      	mov	r2, r0
 800527c:	2184      	movs	r1, #132	; 0x84
 800527e:	e6a8      	b.n	8004fd2 <__gethex+0x176>
 8005280:	6922      	ldr	r2, [r4, #16]
 8005282:	3202      	adds	r2, #2
 8005284:	f104 010c 	add.w	r1, r4, #12
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	300c      	adds	r0, #12
 800528c:	f000 f912 	bl	80054b4 <memcpy>
 8005290:	4621      	mov	r1, r4
 8005292:	ee18 0a10 	vmov	r0, s16
 8005296:	f000 f95b 	bl	8005550 <_Bfree>
 800529a:	464c      	mov	r4, r9
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052a4:	6122      	str	r2, [r4, #16]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
 80052aa:	e7bb      	b.n	8005224 <__gethex+0x3c8>
 80052ac:	6922      	ldr	r2, [r4, #16]
 80052ae:	455a      	cmp	r2, fp
 80052b0:	dd0b      	ble.n	80052ca <__gethex+0x46e>
 80052b2:	2101      	movs	r1, #1
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff fd69 	bl	8004d8c <rshift>
 80052ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052be:	3501      	adds	r5, #1
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	f6ff aed0 	blt.w	8005066 <__gethex+0x20a>
 80052c6:	2701      	movs	r7, #1
 80052c8:	e7c0      	b.n	800524c <__gethex+0x3f0>
 80052ca:	f016 061f 	ands.w	r6, r6, #31
 80052ce:	d0fa      	beq.n	80052c6 <__gethex+0x46a>
 80052d0:	4453      	add	r3, sl
 80052d2:	f1c6 0620 	rsb	r6, r6, #32
 80052d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80052da:	f000 f9eb 	bl	80056b4 <__hi0bits>
 80052de:	42b0      	cmp	r0, r6
 80052e0:	dbe7      	blt.n	80052b2 <__gethex+0x456>
 80052e2:	e7f0      	b.n	80052c6 <__gethex+0x46a>
 80052e4:	08007b71 	.word	0x08007b71

080052e8 <L_shift>:
 80052e8:	f1c2 0208 	rsb	r2, r2, #8
 80052ec:	0092      	lsls	r2, r2, #2
 80052ee:	b570      	push	{r4, r5, r6, lr}
 80052f0:	f1c2 0620 	rsb	r6, r2, #32
 80052f4:	6843      	ldr	r3, [r0, #4]
 80052f6:	6804      	ldr	r4, [r0, #0]
 80052f8:	fa03 f506 	lsl.w	r5, r3, r6
 80052fc:	432c      	orrs	r4, r5
 80052fe:	40d3      	lsrs	r3, r2
 8005300:	6004      	str	r4, [r0, #0]
 8005302:	f840 3f04 	str.w	r3, [r0, #4]!
 8005306:	4288      	cmp	r0, r1
 8005308:	d3f4      	bcc.n	80052f4 <L_shift+0xc>
 800530a:	bd70      	pop	{r4, r5, r6, pc}

0800530c <__match>:
 800530c:	b530      	push	{r4, r5, lr}
 800530e:	6803      	ldr	r3, [r0, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005316:	b914      	cbnz	r4, 800531e <__match+0x12>
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	2001      	movs	r0, #1
 800531c:	bd30      	pop	{r4, r5, pc}
 800531e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005326:	2d19      	cmp	r5, #25
 8005328:	bf98      	it	ls
 800532a:	3220      	addls	r2, #32
 800532c:	42a2      	cmp	r2, r4
 800532e:	d0f0      	beq.n	8005312 <__match+0x6>
 8005330:	2000      	movs	r0, #0
 8005332:	e7f3      	b.n	800531c <__match+0x10>

08005334 <__hexnan>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	680b      	ldr	r3, [r1, #0]
 800533a:	115e      	asrs	r6, r3, #5
 800533c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005340:	f013 031f 	ands.w	r3, r3, #31
 8005344:	b087      	sub	sp, #28
 8005346:	bf18      	it	ne
 8005348:	3604      	addne	r6, #4
 800534a:	2500      	movs	r5, #0
 800534c:	1f37      	subs	r7, r6, #4
 800534e:	4690      	mov	r8, r2
 8005350:	6802      	ldr	r2, [r0, #0]
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	4682      	mov	sl, r0
 8005356:	f846 5c04 	str.w	r5, [r6, #-4]
 800535a:	46b9      	mov	r9, r7
 800535c:	463c      	mov	r4, r7
 800535e:	9502      	str	r5, [sp, #8]
 8005360:	46ab      	mov	fp, r5
 8005362:	7851      	ldrb	r1, [r2, #1]
 8005364:	1c53      	adds	r3, r2, #1
 8005366:	9303      	str	r3, [sp, #12]
 8005368:	b341      	cbz	r1, 80053bc <__hexnan+0x88>
 800536a:	4608      	mov	r0, r1
 800536c:	9205      	str	r2, [sp, #20]
 800536e:	9104      	str	r1, [sp, #16]
 8005370:	f7ff fd5e 	bl	8004e30 <__hexdig_fun>
 8005374:	2800      	cmp	r0, #0
 8005376:	d14f      	bne.n	8005418 <__hexnan+0xe4>
 8005378:	9904      	ldr	r1, [sp, #16]
 800537a:	9a05      	ldr	r2, [sp, #20]
 800537c:	2920      	cmp	r1, #32
 800537e:	d818      	bhi.n	80053b2 <__hexnan+0x7e>
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	459b      	cmp	fp, r3
 8005384:	dd13      	ble.n	80053ae <__hexnan+0x7a>
 8005386:	454c      	cmp	r4, r9
 8005388:	d206      	bcs.n	8005398 <__hexnan+0x64>
 800538a:	2d07      	cmp	r5, #7
 800538c:	dc04      	bgt.n	8005398 <__hexnan+0x64>
 800538e:	462a      	mov	r2, r5
 8005390:	4649      	mov	r1, r9
 8005392:	4620      	mov	r0, r4
 8005394:	f7ff ffa8 	bl	80052e8 <L_shift>
 8005398:	4544      	cmp	r4, r8
 800539a:	d950      	bls.n	800543e <__hexnan+0x10a>
 800539c:	2300      	movs	r3, #0
 800539e:	f1a4 0904 	sub.w	r9, r4, #4
 80053a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80053a6:	f8cd b008 	str.w	fp, [sp, #8]
 80053aa:	464c      	mov	r4, r9
 80053ac:	461d      	mov	r5, r3
 80053ae:	9a03      	ldr	r2, [sp, #12]
 80053b0:	e7d7      	b.n	8005362 <__hexnan+0x2e>
 80053b2:	2929      	cmp	r1, #41	; 0x29
 80053b4:	d156      	bne.n	8005464 <__hexnan+0x130>
 80053b6:	3202      	adds	r2, #2
 80053b8:	f8ca 2000 	str.w	r2, [sl]
 80053bc:	f1bb 0f00 	cmp.w	fp, #0
 80053c0:	d050      	beq.n	8005464 <__hexnan+0x130>
 80053c2:	454c      	cmp	r4, r9
 80053c4:	d206      	bcs.n	80053d4 <__hexnan+0xa0>
 80053c6:	2d07      	cmp	r5, #7
 80053c8:	dc04      	bgt.n	80053d4 <__hexnan+0xa0>
 80053ca:	462a      	mov	r2, r5
 80053cc:	4649      	mov	r1, r9
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7ff ff8a 	bl	80052e8 <L_shift>
 80053d4:	4544      	cmp	r4, r8
 80053d6:	d934      	bls.n	8005442 <__hexnan+0x10e>
 80053d8:	f1a8 0204 	sub.w	r2, r8, #4
 80053dc:	4623      	mov	r3, r4
 80053de:	f853 1b04 	ldr.w	r1, [r3], #4
 80053e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80053e6:	429f      	cmp	r7, r3
 80053e8:	d2f9      	bcs.n	80053de <__hexnan+0xaa>
 80053ea:	1b3b      	subs	r3, r7, r4
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	3304      	adds	r3, #4
 80053f2:	3401      	adds	r4, #1
 80053f4:	3e03      	subs	r6, #3
 80053f6:	42b4      	cmp	r4, r6
 80053f8:	bf88      	it	hi
 80053fa:	2304      	movhi	r3, #4
 80053fc:	4443      	add	r3, r8
 80053fe:	2200      	movs	r2, #0
 8005400:	f843 2b04 	str.w	r2, [r3], #4
 8005404:	429f      	cmp	r7, r3
 8005406:	d2fb      	bcs.n	8005400 <__hexnan+0xcc>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	b91b      	cbnz	r3, 8005414 <__hexnan+0xe0>
 800540c:	4547      	cmp	r7, r8
 800540e:	d127      	bne.n	8005460 <__hexnan+0x12c>
 8005410:	2301      	movs	r3, #1
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	2005      	movs	r0, #5
 8005416:	e026      	b.n	8005466 <__hexnan+0x132>
 8005418:	3501      	adds	r5, #1
 800541a:	2d08      	cmp	r5, #8
 800541c:	f10b 0b01 	add.w	fp, fp, #1
 8005420:	dd06      	ble.n	8005430 <__hexnan+0xfc>
 8005422:	4544      	cmp	r4, r8
 8005424:	d9c3      	bls.n	80053ae <__hexnan+0x7a>
 8005426:	2300      	movs	r3, #0
 8005428:	f844 3c04 	str.w	r3, [r4, #-4]
 800542c:	2501      	movs	r5, #1
 800542e:	3c04      	subs	r4, #4
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	f000 000f 	and.w	r0, r0, #15
 8005436:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800543a:	6022      	str	r2, [r4, #0]
 800543c:	e7b7      	b.n	80053ae <__hexnan+0x7a>
 800543e:	2508      	movs	r5, #8
 8005440:	e7b5      	b.n	80053ae <__hexnan+0x7a>
 8005442:	9b01      	ldr	r3, [sp, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0df      	beq.n	8005408 <__hexnan+0xd4>
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	f1c3 0320 	rsb	r3, r3, #32
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005458:	401a      	ands	r2, r3
 800545a:	f846 2c04 	str.w	r2, [r6, #-4]
 800545e:	e7d3      	b.n	8005408 <__hexnan+0xd4>
 8005460:	3f04      	subs	r7, #4
 8005462:	e7d1      	b.n	8005408 <__hexnan+0xd4>
 8005464:	2004      	movs	r0, #4
 8005466:	b007      	add	sp, #28
 8005468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800546c <_lseek_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	; (800548c <_lseek_r+0x20>)
 8005470:	4604      	mov	r4, r0
 8005472:	4608      	mov	r0, r1
 8005474:	4611      	mov	r1, r2
 8005476:	2200      	movs	r2, #0
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f7fc fa46 	bl	800190c <_lseek>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_lseek_r+0x1e>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_lseek_r+0x1e>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000394 	.word	0x20000394

08005490 <__ascii_mbtowc>:
 8005490:	b082      	sub	sp, #8
 8005492:	b901      	cbnz	r1, 8005496 <__ascii_mbtowc+0x6>
 8005494:	a901      	add	r1, sp, #4
 8005496:	b142      	cbz	r2, 80054aa <__ascii_mbtowc+0x1a>
 8005498:	b14b      	cbz	r3, 80054ae <__ascii_mbtowc+0x1e>
 800549a:	7813      	ldrb	r3, [r2, #0]
 800549c:	600b      	str	r3, [r1, #0]
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	1e10      	subs	r0, r2, #0
 80054a2:	bf18      	it	ne
 80054a4:	2001      	movne	r0, #1
 80054a6:	b002      	add	sp, #8
 80054a8:	4770      	bx	lr
 80054aa:	4610      	mov	r0, r2
 80054ac:	e7fb      	b.n	80054a6 <__ascii_mbtowc+0x16>
 80054ae:	f06f 0001 	mvn.w	r0, #1
 80054b2:	e7f8      	b.n	80054a6 <__ascii_mbtowc+0x16>

080054b4 <memcpy>:
 80054b4:	440a      	add	r2, r1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054bc:	d100      	bne.n	80054c0 <memcpy+0xc>
 80054be:	4770      	bx	lr
 80054c0:	b510      	push	{r4, lr}
 80054c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ca:	4291      	cmp	r1, r2
 80054cc:	d1f9      	bne.n	80054c2 <memcpy+0xe>
 80054ce:	bd10      	pop	{r4, pc}

080054d0 <_Balloc>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054d4:	4604      	mov	r4, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	b976      	cbnz	r6, 80054f8 <_Balloc+0x28>
 80054da:	2010      	movs	r0, #16
 80054dc:	f001 fe82 	bl	80071e4 <malloc>
 80054e0:	4602      	mov	r2, r0
 80054e2:	6260      	str	r0, [r4, #36]	; 0x24
 80054e4:	b920      	cbnz	r0, 80054f0 <_Balloc+0x20>
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <_Balloc+0x78>)
 80054e8:	4818      	ldr	r0, [pc, #96]	; (800554c <_Balloc+0x7c>)
 80054ea:	2166      	movs	r1, #102	; 0x66
 80054ec:	f001 fc90 	bl	8006e10 <__assert_func>
 80054f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054f4:	6006      	str	r6, [r0, #0]
 80054f6:	60c6      	str	r6, [r0, #12]
 80054f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054fa:	68f3      	ldr	r3, [r6, #12]
 80054fc:	b183      	cbz	r3, 8005520 <_Balloc+0x50>
 80054fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005506:	b9b8      	cbnz	r0, 8005538 <_Balloc+0x68>
 8005508:	2101      	movs	r1, #1
 800550a:	fa01 f605 	lsl.w	r6, r1, r5
 800550e:	1d72      	adds	r2, r6, #5
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fc9d 	bl	8005e52 <_calloc_r>
 8005518:	b160      	cbz	r0, 8005534 <_Balloc+0x64>
 800551a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800551e:	e00e      	b.n	800553e <_Balloc+0x6e>
 8005520:	2221      	movs	r2, #33	; 0x21
 8005522:	2104      	movs	r1, #4
 8005524:	4620      	mov	r0, r4
 8005526:	f000 fc94 	bl	8005e52 <_calloc_r>
 800552a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552c:	60f0      	str	r0, [r6, #12]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e4      	bne.n	80054fe <_Balloc+0x2e>
 8005534:	2000      	movs	r0, #0
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	6802      	ldr	r2, [r0, #0]
 800553a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800553e:	2300      	movs	r3, #0
 8005540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005544:	e7f7      	b.n	8005536 <_Balloc+0x66>
 8005546:	bf00      	nop
 8005548:	08007bfc 	.word	0x08007bfc
 800554c:	08007c13 	.word	0x08007c13

08005550 <_Bfree>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005554:	4605      	mov	r5, r0
 8005556:	460c      	mov	r4, r1
 8005558:	b976      	cbnz	r6, 8005578 <_Bfree+0x28>
 800555a:	2010      	movs	r0, #16
 800555c:	f001 fe42 	bl	80071e4 <malloc>
 8005560:	4602      	mov	r2, r0
 8005562:	6268      	str	r0, [r5, #36]	; 0x24
 8005564:	b920      	cbnz	r0, 8005570 <_Bfree+0x20>
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <_Bfree+0x3c>)
 8005568:	4809      	ldr	r0, [pc, #36]	; (8005590 <_Bfree+0x40>)
 800556a:	218a      	movs	r1, #138	; 0x8a
 800556c:	f001 fc50 	bl	8006e10 <__assert_func>
 8005570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005574:	6006      	str	r6, [r0, #0]
 8005576:	60c6      	str	r6, [r0, #12]
 8005578:	b13c      	cbz	r4, 800558a <_Bfree+0x3a>
 800557a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005584:	6021      	str	r1, [r4, #0]
 8005586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	08007bfc 	.word	0x08007bfc
 8005590:	08007c13 	.word	0x08007c13

08005594 <__multadd>:
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	690d      	ldr	r5, [r1, #16]
 800559a:	4607      	mov	r7, r0
 800559c:	460c      	mov	r4, r1
 800559e:	461e      	mov	r6, r3
 80055a0:	f101 0c14 	add.w	ip, r1, #20
 80055a4:	2000      	movs	r0, #0
 80055a6:	f8dc 3000 	ldr.w	r3, [ip]
 80055aa:	b299      	uxth	r1, r3
 80055ac:	fb02 6101 	mla	r1, r2, r1, r6
 80055b0:	0c1e      	lsrs	r6, r3, #16
 80055b2:	0c0b      	lsrs	r3, r1, #16
 80055b4:	fb02 3306 	mla	r3, r2, r6, r3
 80055b8:	b289      	uxth	r1, r1
 80055ba:	3001      	adds	r0, #1
 80055bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055c0:	4285      	cmp	r5, r0
 80055c2:	f84c 1b04 	str.w	r1, [ip], #4
 80055c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055ca:	dcec      	bgt.n	80055a6 <__multadd+0x12>
 80055cc:	b30e      	cbz	r6, 8005612 <__multadd+0x7e>
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	42ab      	cmp	r3, r5
 80055d2:	dc19      	bgt.n	8005608 <__multadd+0x74>
 80055d4:	6861      	ldr	r1, [r4, #4]
 80055d6:	4638      	mov	r0, r7
 80055d8:	3101      	adds	r1, #1
 80055da:	f7ff ff79 	bl	80054d0 <_Balloc>
 80055de:	4680      	mov	r8, r0
 80055e0:	b928      	cbnz	r0, 80055ee <__multadd+0x5a>
 80055e2:	4602      	mov	r2, r0
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <__multadd+0x84>)
 80055e6:	480d      	ldr	r0, [pc, #52]	; (800561c <__multadd+0x88>)
 80055e8:	21b5      	movs	r1, #181	; 0xb5
 80055ea:	f001 fc11 	bl	8006e10 <__assert_func>
 80055ee:	6922      	ldr	r2, [r4, #16]
 80055f0:	3202      	adds	r2, #2
 80055f2:	f104 010c 	add.w	r1, r4, #12
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	300c      	adds	r0, #12
 80055fa:	f7ff ff5b 	bl	80054b4 <memcpy>
 80055fe:	4621      	mov	r1, r4
 8005600:	4638      	mov	r0, r7
 8005602:	f7ff ffa5 	bl	8005550 <_Bfree>
 8005606:	4644      	mov	r4, r8
 8005608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800560c:	3501      	adds	r5, #1
 800560e:	615e      	str	r6, [r3, #20]
 8005610:	6125      	str	r5, [r4, #16]
 8005612:	4620      	mov	r0, r4
 8005614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005618:	08007b71 	.word	0x08007b71
 800561c:	08007c13 	.word	0x08007c13

08005620 <__s2b>:
 8005620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005624:	460c      	mov	r4, r1
 8005626:	4615      	mov	r5, r2
 8005628:	461f      	mov	r7, r3
 800562a:	2209      	movs	r2, #9
 800562c:	3308      	adds	r3, #8
 800562e:	4606      	mov	r6, r0
 8005630:	fb93 f3f2 	sdiv	r3, r3, r2
 8005634:	2100      	movs	r1, #0
 8005636:	2201      	movs	r2, #1
 8005638:	429a      	cmp	r2, r3
 800563a:	db09      	blt.n	8005650 <__s2b+0x30>
 800563c:	4630      	mov	r0, r6
 800563e:	f7ff ff47 	bl	80054d0 <_Balloc>
 8005642:	b940      	cbnz	r0, 8005656 <__s2b+0x36>
 8005644:	4602      	mov	r2, r0
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <__s2b+0x8c>)
 8005648:	4819      	ldr	r0, [pc, #100]	; (80056b0 <__s2b+0x90>)
 800564a:	21ce      	movs	r1, #206	; 0xce
 800564c:	f001 fbe0 	bl	8006e10 <__assert_func>
 8005650:	0052      	lsls	r2, r2, #1
 8005652:	3101      	adds	r1, #1
 8005654:	e7f0      	b.n	8005638 <__s2b+0x18>
 8005656:	9b08      	ldr	r3, [sp, #32]
 8005658:	6143      	str	r3, [r0, #20]
 800565a:	2d09      	cmp	r5, #9
 800565c:	f04f 0301 	mov.w	r3, #1
 8005660:	6103      	str	r3, [r0, #16]
 8005662:	dd16      	ble.n	8005692 <__s2b+0x72>
 8005664:	f104 0909 	add.w	r9, r4, #9
 8005668:	46c8      	mov	r8, r9
 800566a:	442c      	add	r4, r5
 800566c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005670:	4601      	mov	r1, r0
 8005672:	3b30      	subs	r3, #48	; 0x30
 8005674:	220a      	movs	r2, #10
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff ff8c 	bl	8005594 <__multadd>
 800567c:	45a0      	cmp	r8, r4
 800567e:	d1f5      	bne.n	800566c <__s2b+0x4c>
 8005680:	f1a5 0408 	sub.w	r4, r5, #8
 8005684:	444c      	add	r4, r9
 8005686:	1b2d      	subs	r5, r5, r4
 8005688:	1963      	adds	r3, r4, r5
 800568a:	42bb      	cmp	r3, r7
 800568c:	db04      	blt.n	8005698 <__s2b+0x78>
 800568e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005692:	340a      	adds	r4, #10
 8005694:	2509      	movs	r5, #9
 8005696:	e7f6      	b.n	8005686 <__s2b+0x66>
 8005698:	f814 3b01 	ldrb.w	r3, [r4], #1
 800569c:	4601      	mov	r1, r0
 800569e:	3b30      	subs	r3, #48	; 0x30
 80056a0:	220a      	movs	r2, #10
 80056a2:	4630      	mov	r0, r6
 80056a4:	f7ff ff76 	bl	8005594 <__multadd>
 80056a8:	e7ee      	b.n	8005688 <__s2b+0x68>
 80056aa:	bf00      	nop
 80056ac:	08007b71 	.word	0x08007b71
 80056b0:	08007c13 	.word	0x08007c13

080056b4 <__hi0bits>:
 80056b4:	0c03      	lsrs	r3, r0, #16
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	b9d3      	cbnz	r3, 80056f0 <__hi0bits+0x3c>
 80056ba:	0400      	lsls	r0, r0, #16
 80056bc:	2310      	movs	r3, #16
 80056be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80056c2:	bf04      	itt	eq
 80056c4:	0200      	lsleq	r0, r0, #8
 80056c6:	3308      	addeq	r3, #8
 80056c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80056cc:	bf04      	itt	eq
 80056ce:	0100      	lsleq	r0, r0, #4
 80056d0:	3304      	addeq	r3, #4
 80056d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80056d6:	bf04      	itt	eq
 80056d8:	0080      	lsleq	r0, r0, #2
 80056da:	3302      	addeq	r3, #2
 80056dc:	2800      	cmp	r0, #0
 80056de:	db05      	blt.n	80056ec <__hi0bits+0x38>
 80056e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80056e4:	f103 0301 	add.w	r3, r3, #1
 80056e8:	bf08      	it	eq
 80056ea:	2320      	moveq	r3, #32
 80056ec:	4618      	mov	r0, r3
 80056ee:	4770      	bx	lr
 80056f0:	2300      	movs	r3, #0
 80056f2:	e7e4      	b.n	80056be <__hi0bits+0xa>

080056f4 <__lo0bits>:
 80056f4:	6803      	ldr	r3, [r0, #0]
 80056f6:	f013 0207 	ands.w	r2, r3, #7
 80056fa:	4601      	mov	r1, r0
 80056fc:	d00b      	beq.n	8005716 <__lo0bits+0x22>
 80056fe:	07da      	lsls	r2, r3, #31
 8005700:	d423      	bmi.n	800574a <__lo0bits+0x56>
 8005702:	0798      	lsls	r0, r3, #30
 8005704:	bf49      	itett	mi
 8005706:	085b      	lsrmi	r3, r3, #1
 8005708:	089b      	lsrpl	r3, r3, #2
 800570a:	2001      	movmi	r0, #1
 800570c:	600b      	strmi	r3, [r1, #0]
 800570e:	bf5c      	itt	pl
 8005710:	600b      	strpl	r3, [r1, #0]
 8005712:	2002      	movpl	r0, #2
 8005714:	4770      	bx	lr
 8005716:	b298      	uxth	r0, r3
 8005718:	b9a8      	cbnz	r0, 8005746 <__lo0bits+0x52>
 800571a:	0c1b      	lsrs	r3, r3, #16
 800571c:	2010      	movs	r0, #16
 800571e:	b2da      	uxtb	r2, r3
 8005720:	b90a      	cbnz	r2, 8005726 <__lo0bits+0x32>
 8005722:	3008      	adds	r0, #8
 8005724:	0a1b      	lsrs	r3, r3, #8
 8005726:	071a      	lsls	r2, r3, #28
 8005728:	bf04      	itt	eq
 800572a:	091b      	lsreq	r3, r3, #4
 800572c:	3004      	addeq	r0, #4
 800572e:	079a      	lsls	r2, r3, #30
 8005730:	bf04      	itt	eq
 8005732:	089b      	lsreq	r3, r3, #2
 8005734:	3002      	addeq	r0, #2
 8005736:	07da      	lsls	r2, r3, #31
 8005738:	d403      	bmi.n	8005742 <__lo0bits+0x4e>
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	f100 0001 	add.w	r0, r0, #1
 8005740:	d005      	beq.n	800574e <__lo0bits+0x5a>
 8005742:	600b      	str	r3, [r1, #0]
 8005744:	4770      	bx	lr
 8005746:	4610      	mov	r0, r2
 8005748:	e7e9      	b.n	800571e <__lo0bits+0x2a>
 800574a:	2000      	movs	r0, #0
 800574c:	4770      	bx	lr
 800574e:	2020      	movs	r0, #32
 8005750:	4770      	bx	lr
	...

08005754 <__i2b>:
 8005754:	b510      	push	{r4, lr}
 8005756:	460c      	mov	r4, r1
 8005758:	2101      	movs	r1, #1
 800575a:	f7ff feb9 	bl	80054d0 <_Balloc>
 800575e:	4602      	mov	r2, r0
 8005760:	b928      	cbnz	r0, 800576e <__i2b+0x1a>
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <__i2b+0x24>)
 8005764:	4805      	ldr	r0, [pc, #20]	; (800577c <__i2b+0x28>)
 8005766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800576a:	f001 fb51 	bl	8006e10 <__assert_func>
 800576e:	2301      	movs	r3, #1
 8005770:	6144      	str	r4, [r0, #20]
 8005772:	6103      	str	r3, [r0, #16]
 8005774:	bd10      	pop	{r4, pc}
 8005776:	bf00      	nop
 8005778:	08007b71 	.word	0x08007b71
 800577c:	08007c13 	.word	0x08007c13

08005780 <__multiply>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	4691      	mov	r9, r2
 8005786:	690a      	ldr	r2, [r1, #16]
 8005788:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	bfb8      	it	lt
 8005790:	460b      	movlt	r3, r1
 8005792:	460c      	mov	r4, r1
 8005794:	bfbc      	itt	lt
 8005796:	464c      	movlt	r4, r9
 8005798:	4699      	movlt	r9, r3
 800579a:	6927      	ldr	r7, [r4, #16]
 800579c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057a0:	68a3      	ldr	r3, [r4, #8]
 80057a2:	6861      	ldr	r1, [r4, #4]
 80057a4:	eb07 060a 	add.w	r6, r7, sl
 80057a8:	42b3      	cmp	r3, r6
 80057aa:	b085      	sub	sp, #20
 80057ac:	bfb8      	it	lt
 80057ae:	3101      	addlt	r1, #1
 80057b0:	f7ff fe8e 	bl	80054d0 <_Balloc>
 80057b4:	b930      	cbnz	r0, 80057c4 <__multiply+0x44>
 80057b6:	4602      	mov	r2, r0
 80057b8:	4b44      	ldr	r3, [pc, #272]	; (80058cc <__multiply+0x14c>)
 80057ba:	4845      	ldr	r0, [pc, #276]	; (80058d0 <__multiply+0x150>)
 80057bc:	f240 115d 	movw	r1, #349	; 0x15d
 80057c0:	f001 fb26 	bl	8006e10 <__assert_func>
 80057c4:	f100 0514 	add.w	r5, r0, #20
 80057c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057cc:	462b      	mov	r3, r5
 80057ce:	2200      	movs	r2, #0
 80057d0:	4543      	cmp	r3, r8
 80057d2:	d321      	bcc.n	8005818 <__multiply+0x98>
 80057d4:	f104 0314 	add.w	r3, r4, #20
 80057d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057dc:	f109 0314 	add.w	r3, r9, #20
 80057e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80057e4:	9202      	str	r2, [sp, #8]
 80057e6:	1b3a      	subs	r2, r7, r4
 80057e8:	3a15      	subs	r2, #21
 80057ea:	f022 0203 	bic.w	r2, r2, #3
 80057ee:	3204      	adds	r2, #4
 80057f0:	f104 0115 	add.w	r1, r4, #21
 80057f4:	428f      	cmp	r7, r1
 80057f6:	bf38      	it	cc
 80057f8:	2204      	movcc	r2, #4
 80057fa:	9201      	str	r2, [sp, #4]
 80057fc:	9a02      	ldr	r2, [sp, #8]
 80057fe:	9303      	str	r3, [sp, #12]
 8005800:	429a      	cmp	r2, r3
 8005802:	d80c      	bhi.n	800581e <__multiply+0x9e>
 8005804:	2e00      	cmp	r6, #0
 8005806:	dd03      	ble.n	8005810 <__multiply+0x90>
 8005808:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05a      	beq.n	80058c6 <__multiply+0x146>
 8005810:	6106      	str	r6, [r0, #16]
 8005812:	b005      	add	sp, #20
 8005814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005818:	f843 2b04 	str.w	r2, [r3], #4
 800581c:	e7d8      	b.n	80057d0 <__multiply+0x50>
 800581e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005822:	f1ba 0f00 	cmp.w	sl, #0
 8005826:	d024      	beq.n	8005872 <__multiply+0xf2>
 8005828:	f104 0e14 	add.w	lr, r4, #20
 800582c:	46a9      	mov	r9, r5
 800582e:	f04f 0c00 	mov.w	ip, #0
 8005832:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005836:	f8d9 1000 	ldr.w	r1, [r9]
 800583a:	fa1f fb82 	uxth.w	fp, r2
 800583e:	b289      	uxth	r1, r1
 8005840:	fb0a 110b 	mla	r1, sl, fp, r1
 8005844:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005848:	f8d9 2000 	ldr.w	r2, [r9]
 800584c:	4461      	add	r1, ip
 800584e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005852:	fb0a c20b 	mla	r2, sl, fp, ip
 8005856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800585a:	b289      	uxth	r1, r1
 800585c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005860:	4577      	cmp	r7, lr
 8005862:	f849 1b04 	str.w	r1, [r9], #4
 8005866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800586a:	d8e2      	bhi.n	8005832 <__multiply+0xb2>
 800586c:	9a01      	ldr	r2, [sp, #4]
 800586e:	f845 c002 	str.w	ip, [r5, r2]
 8005872:	9a03      	ldr	r2, [sp, #12]
 8005874:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005878:	3304      	adds	r3, #4
 800587a:	f1b9 0f00 	cmp.w	r9, #0
 800587e:	d020      	beq.n	80058c2 <__multiply+0x142>
 8005880:	6829      	ldr	r1, [r5, #0]
 8005882:	f104 0c14 	add.w	ip, r4, #20
 8005886:	46ae      	mov	lr, r5
 8005888:	f04f 0a00 	mov.w	sl, #0
 800588c:	f8bc b000 	ldrh.w	fp, [ip]
 8005890:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005894:	fb09 220b 	mla	r2, r9, fp, r2
 8005898:	4492      	add	sl, r2
 800589a:	b289      	uxth	r1, r1
 800589c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80058a0:	f84e 1b04 	str.w	r1, [lr], #4
 80058a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80058a8:	f8be 1000 	ldrh.w	r1, [lr]
 80058ac:	0c12      	lsrs	r2, r2, #16
 80058ae:	fb09 1102 	mla	r1, r9, r2, r1
 80058b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80058b6:	4567      	cmp	r7, ip
 80058b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058bc:	d8e6      	bhi.n	800588c <__multiply+0x10c>
 80058be:	9a01      	ldr	r2, [sp, #4]
 80058c0:	50a9      	str	r1, [r5, r2]
 80058c2:	3504      	adds	r5, #4
 80058c4:	e79a      	b.n	80057fc <__multiply+0x7c>
 80058c6:	3e01      	subs	r6, #1
 80058c8:	e79c      	b.n	8005804 <__multiply+0x84>
 80058ca:	bf00      	nop
 80058cc:	08007b71 	.word	0x08007b71
 80058d0:	08007c13 	.word	0x08007c13

080058d4 <__pow5mult>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	4615      	mov	r5, r2
 80058da:	f012 0203 	ands.w	r2, r2, #3
 80058de:	4606      	mov	r6, r0
 80058e0:	460f      	mov	r7, r1
 80058e2:	d007      	beq.n	80058f4 <__pow5mult+0x20>
 80058e4:	4c25      	ldr	r4, [pc, #148]	; (800597c <__pow5mult+0xa8>)
 80058e6:	3a01      	subs	r2, #1
 80058e8:	2300      	movs	r3, #0
 80058ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058ee:	f7ff fe51 	bl	8005594 <__multadd>
 80058f2:	4607      	mov	r7, r0
 80058f4:	10ad      	asrs	r5, r5, #2
 80058f6:	d03d      	beq.n	8005974 <__pow5mult+0xa0>
 80058f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058fa:	b97c      	cbnz	r4, 800591c <__pow5mult+0x48>
 80058fc:	2010      	movs	r0, #16
 80058fe:	f001 fc71 	bl	80071e4 <malloc>
 8005902:	4602      	mov	r2, r0
 8005904:	6270      	str	r0, [r6, #36]	; 0x24
 8005906:	b928      	cbnz	r0, 8005914 <__pow5mult+0x40>
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <__pow5mult+0xac>)
 800590a:	481e      	ldr	r0, [pc, #120]	; (8005984 <__pow5mult+0xb0>)
 800590c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005910:	f001 fa7e 	bl	8006e10 <__assert_func>
 8005914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005918:	6004      	str	r4, [r0, #0]
 800591a:	60c4      	str	r4, [r0, #12]
 800591c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005924:	b94c      	cbnz	r4, 800593a <__pow5mult+0x66>
 8005926:	f240 2171 	movw	r1, #625	; 0x271
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ff12 	bl	8005754 <__i2b>
 8005930:	2300      	movs	r3, #0
 8005932:	f8c8 0008 	str.w	r0, [r8, #8]
 8005936:	4604      	mov	r4, r0
 8005938:	6003      	str	r3, [r0, #0]
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	07eb      	lsls	r3, r5, #31
 8005940:	d50a      	bpl.n	8005958 <__pow5mult+0x84>
 8005942:	4639      	mov	r1, r7
 8005944:	4622      	mov	r2, r4
 8005946:	4630      	mov	r0, r6
 8005948:	f7ff ff1a 	bl	8005780 <__multiply>
 800594c:	4639      	mov	r1, r7
 800594e:	4680      	mov	r8, r0
 8005950:	4630      	mov	r0, r6
 8005952:	f7ff fdfd 	bl	8005550 <_Bfree>
 8005956:	4647      	mov	r7, r8
 8005958:	106d      	asrs	r5, r5, #1
 800595a:	d00b      	beq.n	8005974 <__pow5mult+0xa0>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	b938      	cbnz	r0, 8005970 <__pow5mult+0x9c>
 8005960:	4622      	mov	r2, r4
 8005962:	4621      	mov	r1, r4
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ff0b 	bl	8005780 <__multiply>
 800596a:	6020      	str	r0, [r4, #0]
 800596c:	f8c0 9000 	str.w	r9, [r0]
 8005970:	4604      	mov	r4, r0
 8005972:	e7e4      	b.n	800593e <__pow5mult+0x6a>
 8005974:	4638      	mov	r0, r7
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	bf00      	nop
 800597c:	08007d60 	.word	0x08007d60
 8005980:	08007bfc 	.word	0x08007bfc
 8005984:	08007c13 	.word	0x08007c13

08005988 <__lshift>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	460c      	mov	r4, r1
 800598e:	6849      	ldr	r1, [r1, #4]
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	4607      	mov	r7, r0
 800599a:	4691      	mov	r9, r2
 800599c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059a0:	f108 0601 	add.w	r6, r8, #1
 80059a4:	42b3      	cmp	r3, r6
 80059a6:	db0b      	blt.n	80059c0 <__lshift+0x38>
 80059a8:	4638      	mov	r0, r7
 80059aa:	f7ff fd91 	bl	80054d0 <_Balloc>
 80059ae:	4605      	mov	r5, r0
 80059b0:	b948      	cbnz	r0, 80059c6 <__lshift+0x3e>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <__lshift+0xd8>)
 80059b6:	482b      	ldr	r0, [pc, #172]	; (8005a64 <__lshift+0xdc>)
 80059b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80059bc:	f001 fa28 	bl	8006e10 <__assert_func>
 80059c0:	3101      	adds	r1, #1
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	e7ee      	b.n	80059a4 <__lshift+0x1c>
 80059c6:	2300      	movs	r3, #0
 80059c8:	f100 0114 	add.w	r1, r0, #20
 80059cc:	f100 0210 	add.w	r2, r0, #16
 80059d0:	4618      	mov	r0, r3
 80059d2:	4553      	cmp	r3, sl
 80059d4:	db37      	blt.n	8005a46 <__lshift+0xbe>
 80059d6:	6920      	ldr	r0, [r4, #16]
 80059d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059dc:	f104 0314 	add.w	r3, r4, #20
 80059e0:	f019 091f 	ands.w	r9, r9, #31
 80059e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80059ec:	d02f      	beq.n	8005a4e <__lshift+0xc6>
 80059ee:	f1c9 0e20 	rsb	lr, r9, #32
 80059f2:	468a      	mov	sl, r1
 80059f4:	f04f 0c00 	mov.w	ip, #0
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	fa02 f209 	lsl.w	r2, r2, r9
 80059fe:	ea42 020c 	orr.w	r2, r2, ip
 8005a02:	f84a 2b04 	str.w	r2, [sl], #4
 8005a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a10:	d8f2      	bhi.n	80059f8 <__lshift+0x70>
 8005a12:	1b03      	subs	r3, r0, r4
 8005a14:	3b15      	subs	r3, #21
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	f104 0215 	add.w	r2, r4, #21
 8005a20:	4290      	cmp	r0, r2
 8005a22:	bf38      	it	cc
 8005a24:	2304      	movcc	r3, #4
 8005a26:	f841 c003 	str.w	ip, [r1, r3]
 8005a2a:	f1bc 0f00 	cmp.w	ip, #0
 8005a2e:	d001      	beq.n	8005a34 <__lshift+0xac>
 8005a30:	f108 0602 	add.w	r6, r8, #2
 8005a34:	3e01      	subs	r6, #1
 8005a36:	4638      	mov	r0, r7
 8005a38:	612e      	str	r6, [r5, #16]
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	f7ff fd88 	bl	8005550 <_Bfree>
 8005a40:	4628      	mov	r0, r5
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	e7c1      	b.n	80059d2 <__lshift+0x4a>
 8005a4e:	3904      	subs	r1, #4
 8005a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a54:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	d8f9      	bhi.n	8005a50 <__lshift+0xc8>
 8005a5c:	e7ea      	b.n	8005a34 <__lshift+0xac>
 8005a5e:	bf00      	nop
 8005a60:	08007b71 	.word	0x08007b71
 8005a64:	08007c13 	.word	0x08007c13

08005a68 <__mcmp>:
 8005a68:	b530      	push	{r4, r5, lr}
 8005a6a:	6902      	ldr	r2, [r0, #16]
 8005a6c:	690c      	ldr	r4, [r1, #16]
 8005a6e:	1b12      	subs	r2, r2, r4
 8005a70:	d10e      	bne.n	8005a90 <__mcmp+0x28>
 8005a72:	f100 0314 	add.w	r3, r0, #20
 8005a76:	3114      	adds	r1, #20
 8005a78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005a84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005a88:	42a5      	cmp	r5, r4
 8005a8a:	d003      	beq.n	8005a94 <__mcmp+0x2c>
 8005a8c:	d305      	bcc.n	8005a9a <__mcmp+0x32>
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4610      	mov	r0, r2
 8005a92:	bd30      	pop	{r4, r5, pc}
 8005a94:	4283      	cmp	r3, r0
 8005a96:	d3f3      	bcc.n	8005a80 <__mcmp+0x18>
 8005a98:	e7fa      	b.n	8005a90 <__mcmp+0x28>
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	e7f7      	b.n	8005a90 <__mcmp+0x28>

08005aa0 <__mdiff>:
 8005aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4690      	mov	r8, r2
 8005aae:	f7ff ffdb 	bl	8005a68 <__mcmp>
 8005ab2:	1e05      	subs	r5, r0, #0
 8005ab4:	d110      	bne.n	8005ad8 <__mdiff+0x38>
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7ff fd09 	bl	80054d0 <_Balloc>
 8005abe:	b930      	cbnz	r0, 8005ace <__mdiff+0x2e>
 8005ac0:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <__mdiff+0x10c>)
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f240 2132 	movw	r1, #562	; 0x232
 8005ac8:	4839      	ldr	r0, [pc, #228]	; (8005bb0 <__mdiff+0x110>)
 8005aca:	f001 f9a1 	bl	8006e10 <__assert_func>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad8:	bfa4      	itt	ge
 8005ada:	4643      	movge	r3, r8
 8005adc:	46a0      	movge	r8, r4
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ae4:	bfa6      	itte	ge
 8005ae6:	461c      	movge	r4, r3
 8005ae8:	2500      	movge	r5, #0
 8005aea:	2501      	movlt	r5, #1
 8005aec:	f7ff fcf0 	bl	80054d0 <_Balloc>
 8005af0:	b920      	cbnz	r0, 8005afc <__mdiff+0x5c>
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <__mdiff+0x10c>)
 8005af4:	4602      	mov	r2, r0
 8005af6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005afa:	e7e5      	b.n	8005ac8 <__mdiff+0x28>
 8005afc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b00:	6926      	ldr	r6, [r4, #16]
 8005b02:	60c5      	str	r5, [r0, #12]
 8005b04:	f104 0914 	add.w	r9, r4, #20
 8005b08:	f108 0514 	add.w	r5, r8, #20
 8005b0c:	f100 0e14 	add.w	lr, r0, #20
 8005b10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b18:	f108 0210 	add.w	r2, r8, #16
 8005b1c:	46f2      	mov	sl, lr
 8005b1e:	2100      	movs	r1, #0
 8005b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b28:	fa1f f883 	uxth.w	r8, r3
 8005b2c:	fa11 f18b 	uxtah	r1, r1, fp
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	eba1 0808 	sub.w	r8, r1, r8
 8005b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b3e:	fa1f f888 	uxth.w	r8, r8
 8005b42:	1419      	asrs	r1, r3, #16
 8005b44:	454e      	cmp	r6, r9
 8005b46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b4a:	f84a 3b04 	str.w	r3, [sl], #4
 8005b4e:	d8e7      	bhi.n	8005b20 <__mdiff+0x80>
 8005b50:	1b33      	subs	r3, r6, r4
 8005b52:	3b15      	subs	r3, #21
 8005b54:	f023 0303 	bic.w	r3, r3, #3
 8005b58:	3304      	adds	r3, #4
 8005b5a:	3415      	adds	r4, #21
 8005b5c:	42a6      	cmp	r6, r4
 8005b5e:	bf38      	it	cc
 8005b60:	2304      	movcc	r3, #4
 8005b62:	441d      	add	r5, r3
 8005b64:	4473      	add	r3, lr
 8005b66:	469e      	mov	lr, r3
 8005b68:	462e      	mov	r6, r5
 8005b6a:	4566      	cmp	r6, ip
 8005b6c:	d30e      	bcc.n	8005b8c <__mdiff+0xec>
 8005b6e:	f10c 0203 	add.w	r2, ip, #3
 8005b72:	1b52      	subs	r2, r2, r5
 8005b74:	f022 0203 	bic.w	r2, r2, #3
 8005b78:	3d03      	subs	r5, #3
 8005b7a:	45ac      	cmp	ip, r5
 8005b7c:	bf38      	it	cc
 8005b7e:	2200      	movcc	r2, #0
 8005b80:	441a      	add	r2, r3
 8005b82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005b86:	b17b      	cbz	r3, 8005ba8 <__mdiff+0x108>
 8005b88:	6107      	str	r7, [r0, #16]
 8005b8a:	e7a3      	b.n	8005ad4 <__mdiff+0x34>
 8005b8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005b90:	fa11 f288 	uxtah	r2, r1, r8
 8005b94:	1414      	asrs	r4, r2, #16
 8005b96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ba0:	f84e 2b04 	str.w	r2, [lr], #4
 8005ba4:	1421      	asrs	r1, r4, #16
 8005ba6:	e7e0      	b.n	8005b6a <__mdiff+0xca>
 8005ba8:	3f01      	subs	r7, #1
 8005baa:	e7ea      	b.n	8005b82 <__mdiff+0xe2>
 8005bac:	08007b71 	.word	0x08007b71
 8005bb0:	08007c13 	.word	0x08007c13

08005bb4 <__ulp>:
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	ed8d 0b00 	vstr	d0, [sp]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	4912      	ldr	r1, [pc, #72]	; (8005c08 <__ulp+0x54>)
 8005bbe:	4019      	ands	r1, r3
 8005bc0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	dd05      	ble.n	8005bd4 <__ulp+0x20>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	ec43 2b10 	vmov	d0, r2, r3
 8005bd0:	b002      	add	sp, #8
 8005bd2:	4770      	bx	lr
 8005bd4:	4249      	negs	r1, r1
 8005bd6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005bda:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	da04      	bge.n	8005bf2 <__ulp+0x3e>
 8005be8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005bec:	fa41 f300 	asr.w	r3, r1, r0
 8005bf0:	e7ec      	b.n	8005bcc <__ulp+0x18>
 8005bf2:	f1a0 0114 	sub.w	r1, r0, #20
 8005bf6:	291e      	cmp	r1, #30
 8005bf8:	bfda      	itte	le
 8005bfa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005bfe:	fa20 f101 	lsrle.w	r1, r0, r1
 8005c02:	2101      	movgt	r1, #1
 8005c04:	460a      	mov	r2, r1
 8005c06:	e7e1      	b.n	8005bcc <__ulp+0x18>
 8005c08:	7ff00000 	.word	0x7ff00000

08005c0c <__b2d>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	6905      	ldr	r5, [r0, #16]
 8005c10:	f100 0714 	add.w	r7, r0, #20
 8005c14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005c18:	1f2e      	subs	r6, r5, #4
 8005c1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f7ff fd48 	bl	80056b4 <__hi0bits>
 8005c24:	f1c0 0320 	rsb	r3, r0, #32
 8005c28:	280a      	cmp	r0, #10
 8005c2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005ca8 <__b2d+0x9c>
 8005c2e:	600b      	str	r3, [r1, #0]
 8005c30:	dc14      	bgt.n	8005c5c <__b2d+0x50>
 8005c32:	f1c0 0e0b 	rsb	lr, r0, #11
 8005c36:	fa24 f10e 	lsr.w	r1, r4, lr
 8005c3a:	42b7      	cmp	r7, r6
 8005c3c:	ea41 030c 	orr.w	r3, r1, ip
 8005c40:	bf34      	ite	cc
 8005c42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005c46:	2100      	movcs	r1, #0
 8005c48:	3015      	adds	r0, #21
 8005c4a:	fa04 f000 	lsl.w	r0, r4, r0
 8005c4e:	fa21 f10e 	lsr.w	r1, r1, lr
 8005c52:	ea40 0201 	orr.w	r2, r0, r1
 8005c56:	ec43 2b10 	vmov	d0, r2, r3
 8005c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c5c:	42b7      	cmp	r7, r6
 8005c5e:	bf3a      	itte	cc
 8005c60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005c64:	f1a5 0608 	subcc.w	r6, r5, #8
 8005c68:	2100      	movcs	r1, #0
 8005c6a:	380b      	subs	r0, #11
 8005c6c:	d017      	beq.n	8005c9e <__b2d+0x92>
 8005c6e:	f1c0 0c20 	rsb	ip, r0, #32
 8005c72:	fa04 f500 	lsl.w	r5, r4, r0
 8005c76:	42be      	cmp	r6, r7
 8005c78:	fa21 f40c 	lsr.w	r4, r1, ip
 8005c7c:	ea45 0504 	orr.w	r5, r5, r4
 8005c80:	bf8c      	ite	hi
 8005c82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005c86:	2400      	movls	r4, #0
 8005c88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005c8c:	fa01 f000 	lsl.w	r0, r1, r0
 8005c90:	fa24 f40c 	lsr.w	r4, r4, ip
 8005c94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c98:	ea40 0204 	orr.w	r2, r0, r4
 8005c9c:	e7db      	b.n	8005c56 <__b2d+0x4a>
 8005c9e:	ea44 030c 	orr.w	r3, r4, ip
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	e7d7      	b.n	8005c56 <__b2d+0x4a>
 8005ca6:	bf00      	nop
 8005ca8:	3ff00000 	.word	0x3ff00000

08005cac <__d2b>:
 8005cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4689      	mov	r9, r1
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	ec57 6b10 	vmov	r6, r7, d0
 8005cb8:	4690      	mov	r8, r2
 8005cba:	f7ff fc09 	bl	80054d0 <_Balloc>
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	b930      	cbnz	r0, 8005cd0 <__d2b+0x24>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <__d2b+0xb0>)
 8005cc6:	4826      	ldr	r0, [pc, #152]	; (8005d60 <__d2b+0xb4>)
 8005cc8:	f240 310a 	movw	r1, #778	; 0x30a
 8005ccc:	f001 f8a0 	bl	8006e10 <__assert_func>
 8005cd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005cd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cd8:	bb35      	cbnz	r5, 8005d28 <__d2b+0x7c>
 8005cda:	2e00      	cmp	r6, #0
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	d028      	beq.n	8005d32 <__d2b+0x86>
 8005ce0:	4668      	mov	r0, sp
 8005ce2:	9600      	str	r6, [sp, #0]
 8005ce4:	f7ff fd06 	bl	80056f4 <__lo0bits>
 8005ce8:	9900      	ldr	r1, [sp, #0]
 8005cea:	b300      	cbz	r0, 8005d2e <__d2b+0x82>
 8005cec:	9a01      	ldr	r2, [sp, #4]
 8005cee:	f1c0 0320 	rsb	r3, r0, #32
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	40c2      	lsrs	r2, r0
 8005cfa:	6163      	str	r3, [r4, #20]
 8005cfc:	9201      	str	r2, [sp, #4]
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	61a3      	str	r3, [r4, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf14      	ite	ne
 8005d06:	2202      	movne	r2, #2
 8005d08:	2201      	moveq	r2, #1
 8005d0a:	6122      	str	r2, [r4, #16]
 8005d0c:	b1d5      	cbz	r5, 8005d44 <__d2b+0x98>
 8005d0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d12:	4405      	add	r5, r0
 8005d14:	f8c9 5000 	str.w	r5, [r9]
 8005d18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d1c:	f8c8 0000 	str.w	r0, [r8]
 8005d20:	4620      	mov	r0, r4
 8005d22:	b003      	add	sp, #12
 8005d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d2c:	e7d5      	b.n	8005cda <__d2b+0x2e>
 8005d2e:	6161      	str	r1, [r4, #20]
 8005d30:	e7e5      	b.n	8005cfe <__d2b+0x52>
 8005d32:	a801      	add	r0, sp, #4
 8005d34:	f7ff fcde 	bl	80056f4 <__lo0bits>
 8005d38:	9b01      	ldr	r3, [sp, #4]
 8005d3a:	6163      	str	r3, [r4, #20]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	6122      	str	r2, [r4, #16]
 8005d40:	3020      	adds	r0, #32
 8005d42:	e7e3      	b.n	8005d0c <__d2b+0x60>
 8005d44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d4c:	f8c9 0000 	str.w	r0, [r9]
 8005d50:	6918      	ldr	r0, [r3, #16]
 8005d52:	f7ff fcaf 	bl	80056b4 <__hi0bits>
 8005d56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d5a:	e7df      	b.n	8005d1c <__d2b+0x70>
 8005d5c:	08007b71 	.word	0x08007b71
 8005d60:	08007c13 	.word	0x08007c13

08005d64 <__ratio>:
 8005d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	4688      	mov	r8, r1
 8005d6a:	4669      	mov	r1, sp
 8005d6c:	4681      	mov	r9, r0
 8005d6e:	f7ff ff4d 	bl	8005c0c <__b2d>
 8005d72:	a901      	add	r1, sp, #4
 8005d74:	4640      	mov	r0, r8
 8005d76:	ec55 4b10 	vmov	r4, r5, d0
 8005d7a:	f7ff ff47 	bl	8005c0c <__b2d>
 8005d7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005d86:	eba3 0c02 	sub.w	ip, r3, r2
 8005d8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005d94:	ec51 0b10 	vmov	r0, r1, d0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bfd6      	itet	le
 8005d9c:	460a      	movle	r2, r1
 8005d9e:	462a      	movgt	r2, r5
 8005da0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005da4:	468b      	mov	fp, r1
 8005da6:	462f      	mov	r7, r5
 8005da8:	bfd4      	ite	le
 8005daa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005dae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005db2:	4620      	mov	r0, r4
 8005db4:	ee10 2a10 	vmov	r2, s0
 8005db8:	465b      	mov	r3, fp
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa fd4e 	bl	800085c <__aeabi_ddiv>
 8005dc0:	ec41 0b10 	vmov	d0, r0, r1
 8005dc4:	b003      	add	sp, #12
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005dca <__copybits>:
 8005dca:	3901      	subs	r1, #1
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	1149      	asrs	r1, r1, #5
 8005dd0:	6914      	ldr	r4, [r2, #16]
 8005dd2:	3101      	adds	r1, #1
 8005dd4:	f102 0314 	add.w	r3, r2, #20
 8005dd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005ddc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005de0:	1f05      	subs	r5, r0, #4
 8005de2:	42a3      	cmp	r3, r4
 8005de4:	d30c      	bcc.n	8005e00 <__copybits+0x36>
 8005de6:	1aa3      	subs	r3, r4, r2
 8005de8:	3b11      	subs	r3, #17
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	3211      	adds	r2, #17
 8005df0:	42a2      	cmp	r2, r4
 8005df2:	bf88      	it	hi
 8005df4:	2300      	movhi	r3, #0
 8005df6:	4418      	add	r0, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4288      	cmp	r0, r1
 8005dfc:	d305      	bcc.n	8005e0a <__copybits+0x40>
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	f853 6b04 	ldr.w	r6, [r3], #4
 8005e04:	f845 6f04 	str.w	r6, [r5, #4]!
 8005e08:	e7eb      	b.n	8005de2 <__copybits+0x18>
 8005e0a:	f840 3b04 	str.w	r3, [r0], #4
 8005e0e:	e7f4      	b.n	8005dfa <__copybits+0x30>

08005e10 <__any_on>:
 8005e10:	f100 0214 	add.w	r2, r0, #20
 8005e14:	6900      	ldr	r0, [r0, #16]
 8005e16:	114b      	asrs	r3, r1, #5
 8005e18:	4298      	cmp	r0, r3
 8005e1a:	b510      	push	{r4, lr}
 8005e1c:	db11      	blt.n	8005e42 <__any_on+0x32>
 8005e1e:	dd0a      	ble.n	8005e36 <__any_on+0x26>
 8005e20:	f011 011f 	ands.w	r1, r1, #31
 8005e24:	d007      	beq.n	8005e36 <__any_on+0x26>
 8005e26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005e2a:	fa24 f001 	lsr.w	r0, r4, r1
 8005e2e:	fa00 f101 	lsl.w	r1, r0, r1
 8005e32:	428c      	cmp	r4, r1
 8005e34:	d10b      	bne.n	8005e4e <__any_on+0x3e>
 8005e36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d803      	bhi.n	8005e46 <__any_on+0x36>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	4603      	mov	r3, r0
 8005e44:	e7f7      	b.n	8005e36 <__any_on+0x26>
 8005e46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	d0f5      	beq.n	8005e3a <__any_on+0x2a>
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7f6      	b.n	8005e40 <__any_on+0x30>

08005e52 <_calloc_r>:
 8005e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e54:	fba1 2402 	umull	r2, r4, r1, r2
 8005e58:	b94c      	cbnz	r4, 8005e6e <_calloc_r+0x1c>
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	9201      	str	r2, [sp, #4]
 8005e5e:	f000 f82f 	bl	8005ec0 <_malloc_r>
 8005e62:	9a01      	ldr	r2, [sp, #4]
 8005e64:	4605      	mov	r5, r0
 8005e66:	b930      	cbnz	r0, 8005e76 <_calloc_r+0x24>
 8005e68:	4628      	mov	r0, r5
 8005e6a:	b003      	add	sp, #12
 8005e6c:	bd30      	pop	{r4, r5, pc}
 8005e6e:	220c      	movs	r2, #12
 8005e70:	6002      	str	r2, [r0, #0]
 8005e72:	2500      	movs	r5, #0
 8005e74:	e7f8      	b.n	8005e68 <_calloc_r+0x16>
 8005e76:	4621      	mov	r1, r4
 8005e78:	f7fd fdf4 	bl	8003a64 <memset>
 8005e7c:	e7f4      	b.n	8005e68 <_calloc_r+0x16>
	...

08005e80 <sbrk_aligned>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	4e0e      	ldr	r6, [pc, #56]	; (8005ebc <sbrk_aligned+0x3c>)
 8005e84:	460c      	mov	r4, r1
 8005e86:	6831      	ldr	r1, [r6, #0]
 8005e88:	4605      	mov	r5, r0
 8005e8a:	b911      	cbnz	r1, 8005e92 <sbrk_aligned+0x12>
 8005e8c:	f000 febc 	bl	8006c08 <_sbrk_r>
 8005e90:	6030      	str	r0, [r6, #0]
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 feb7 	bl	8006c08 <_sbrk_r>
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	d00a      	beq.n	8005eb4 <sbrk_aligned+0x34>
 8005e9e:	1cc4      	adds	r4, r0, #3
 8005ea0:	f024 0403 	bic.w	r4, r4, #3
 8005ea4:	42a0      	cmp	r0, r4
 8005ea6:	d007      	beq.n	8005eb8 <sbrk_aligned+0x38>
 8005ea8:	1a21      	subs	r1, r4, r0
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 feac 	bl	8006c08 <_sbrk_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d101      	bne.n	8005eb8 <sbrk_aligned+0x38>
 8005eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8005eb8:	4620      	mov	r0, r4
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	20000390 	.word	0x20000390

08005ec0 <_malloc_r>:
 8005ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	1ccd      	adds	r5, r1, #3
 8005ec6:	f025 0503 	bic.w	r5, r5, #3
 8005eca:	3508      	adds	r5, #8
 8005ecc:	2d0c      	cmp	r5, #12
 8005ece:	bf38      	it	cc
 8005ed0:	250c      	movcc	r5, #12
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	db01      	blt.n	8005edc <_malloc_r+0x1c>
 8005ed8:	42a9      	cmp	r1, r5
 8005eda:	d905      	bls.n	8005ee8 <_malloc_r+0x28>
 8005edc:	230c      	movs	r3, #12
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	2600      	movs	r6, #0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee8:	4e2e      	ldr	r6, [pc, #184]	; (8005fa4 <_malloc_r+0xe4>)
 8005eea:	f001 f99d 	bl	8007228 <__malloc_lock>
 8005eee:	6833      	ldr	r3, [r6, #0]
 8005ef0:	461c      	mov	r4, r3
 8005ef2:	bb34      	cbnz	r4, 8005f42 <_malloc_r+0x82>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7ff ffc2 	bl	8005e80 <sbrk_aligned>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	4604      	mov	r4, r0
 8005f00:	d14d      	bne.n	8005f9e <_malloc_r+0xde>
 8005f02:	6834      	ldr	r4, [r6, #0]
 8005f04:	4626      	mov	r6, r4
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	d140      	bne.n	8005f8c <_malloc_r+0xcc>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4638      	mov	r0, r7
 8005f10:	eb04 0803 	add.w	r8, r4, r3
 8005f14:	f000 fe78 	bl	8006c08 <_sbrk_r>
 8005f18:	4580      	cmp	r8, r0
 8005f1a:	d13a      	bne.n	8005f92 <_malloc_r+0xd2>
 8005f1c:	6821      	ldr	r1, [r4, #0]
 8005f1e:	3503      	adds	r5, #3
 8005f20:	1a6d      	subs	r5, r5, r1
 8005f22:	f025 0503 	bic.w	r5, r5, #3
 8005f26:	3508      	adds	r5, #8
 8005f28:	2d0c      	cmp	r5, #12
 8005f2a:	bf38      	it	cc
 8005f2c:	250c      	movcc	r5, #12
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4638      	mov	r0, r7
 8005f32:	f7ff ffa5 	bl	8005e80 <sbrk_aligned>
 8005f36:	3001      	adds	r0, #1
 8005f38:	d02b      	beq.n	8005f92 <_malloc_r+0xd2>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	442b      	add	r3, r5
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	e00e      	b.n	8005f60 <_malloc_r+0xa0>
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	1b52      	subs	r2, r2, r5
 8005f46:	d41e      	bmi.n	8005f86 <_malloc_r+0xc6>
 8005f48:	2a0b      	cmp	r2, #11
 8005f4a:	d916      	bls.n	8005f7a <_malloc_r+0xba>
 8005f4c:	1961      	adds	r1, r4, r5
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	6025      	str	r5, [r4, #0]
 8005f52:	bf18      	it	ne
 8005f54:	6059      	strne	r1, [r3, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	bf08      	it	eq
 8005f5a:	6031      	streq	r1, [r6, #0]
 8005f5c:	5162      	str	r2, [r4, r5]
 8005f5e:	604b      	str	r3, [r1, #4]
 8005f60:	4638      	mov	r0, r7
 8005f62:	f104 060b 	add.w	r6, r4, #11
 8005f66:	f001 f965 	bl	8007234 <__malloc_unlock>
 8005f6a:	f026 0607 	bic.w	r6, r6, #7
 8005f6e:	1d23      	adds	r3, r4, #4
 8005f70:	1af2      	subs	r2, r6, r3
 8005f72:	d0b6      	beq.n	8005ee2 <_malloc_r+0x22>
 8005f74:	1b9b      	subs	r3, r3, r6
 8005f76:	50a3      	str	r3, [r4, r2]
 8005f78:	e7b3      	b.n	8005ee2 <_malloc_r+0x22>
 8005f7a:	6862      	ldr	r2, [r4, #4]
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	bf0c      	ite	eq
 8005f80:	6032      	streq	r2, [r6, #0]
 8005f82:	605a      	strne	r2, [r3, #4]
 8005f84:	e7ec      	b.n	8005f60 <_malloc_r+0xa0>
 8005f86:	4623      	mov	r3, r4
 8005f88:	6864      	ldr	r4, [r4, #4]
 8005f8a:	e7b2      	b.n	8005ef2 <_malloc_r+0x32>
 8005f8c:	4634      	mov	r4, r6
 8005f8e:	6876      	ldr	r6, [r6, #4]
 8005f90:	e7b9      	b.n	8005f06 <_malloc_r+0x46>
 8005f92:	230c      	movs	r3, #12
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4638      	mov	r0, r7
 8005f98:	f001 f94c 	bl	8007234 <__malloc_unlock>
 8005f9c:	e7a1      	b.n	8005ee2 <_malloc_r+0x22>
 8005f9e:	6025      	str	r5, [r4, #0]
 8005fa0:	e7de      	b.n	8005f60 <_malloc_r+0xa0>
 8005fa2:	bf00      	nop
 8005fa4:	2000038c 	.word	0x2000038c

08005fa8 <__ssputs_r>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	688e      	ldr	r6, [r1, #8]
 8005fae:	429e      	cmp	r6, r3
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	d838      	bhi.n	800602c <__ssputs_r+0x84>
 8005fba:	898a      	ldrh	r2, [r1, #12]
 8005fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fc0:	d032      	beq.n	8006028 <__ssputs_r+0x80>
 8005fc2:	6825      	ldr	r5, [r4, #0]
 8005fc4:	6909      	ldr	r1, [r1, #16]
 8005fc6:	eba5 0901 	sub.w	r9, r5, r1
 8005fca:	6965      	ldr	r5, [r4, #20]
 8005fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	444b      	add	r3, r9
 8005fd8:	106d      	asrs	r5, r5, #1
 8005fda:	429d      	cmp	r5, r3
 8005fdc:	bf38      	it	cc
 8005fde:	461d      	movcc	r5, r3
 8005fe0:	0553      	lsls	r3, r2, #21
 8005fe2:	d531      	bpl.n	8006048 <__ssputs_r+0xa0>
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7ff ff6b 	bl	8005ec0 <_malloc_r>
 8005fea:	4606      	mov	r6, r0
 8005fec:	b950      	cbnz	r0, 8006004 <__ssputs_r+0x5c>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	f8ca 3000 	str.w	r3, [sl]
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8006000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006004:	6921      	ldr	r1, [r4, #16]
 8006006:	464a      	mov	r2, r9
 8006008:	f7ff fa54 	bl	80054b4 <memcpy>
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	6126      	str	r6, [r4, #16]
 800601a:	6165      	str	r5, [r4, #20]
 800601c:	444e      	add	r6, r9
 800601e:	eba5 0509 	sub.w	r5, r5, r9
 8006022:	6026      	str	r6, [r4, #0]
 8006024:	60a5      	str	r5, [r4, #8]
 8006026:	463e      	mov	r6, r7
 8006028:	42be      	cmp	r6, r7
 800602a:	d900      	bls.n	800602e <__ssputs_r+0x86>
 800602c:	463e      	mov	r6, r7
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	4632      	mov	r2, r6
 8006032:	4641      	mov	r1, r8
 8006034:	f001 f8de 	bl	80071f4 <memmove>
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	1b9b      	subs	r3, r3, r6
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	4433      	add	r3, r6
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	2000      	movs	r0, #0
 8006046:	e7db      	b.n	8006000 <__ssputs_r+0x58>
 8006048:	462a      	mov	r2, r5
 800604a:	f001 f945 	bl	80072d8 <_realloc_r>
 800604e:	4606      	mov	r6, r0
 8006050:	2800      	cmp	r0, #0
 8006052:	d1e1      	bne.n	8006018 <__ssputs_r+0x70>
 8006054:	6921      	ldr	r1, [r4, #16]
 8006056:	4650      	mov	r0, sl
 8006058:	f001 f8f2 	bl	8007240 <_free_r>
 800605c:	e7c7      	b.n	8005fee <__ssputs_r+0x46>
	...

08006060 <_svfiprintf_r>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	4698      	mov	r8, r3
 8006066:	898b      	ldrh	r3, [r1, #12]
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	b09d      	sub	sp, #116	; 0x74
 800606c:	4607      	mov	r7, r0
 800606e:	460d      	mov	r5, r1
 8006070:	4614      	mov	r4, r2
 8006072:	d50e      	bpl.n	8006092 <_svfiprintf_r+0x32>
 8006074:	690b      	ldr	r3, [r1, #16]
 8006076:	b963      	cbnz	r3, 8006092 <_svfiprintf_r+0x32>
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	f7ff ff21 	bl	8005ec0 <_malloc_r>
 800607e:	6028      	str	r0, [r5, #0]
 8006080:	6128      	str	r0, [r5, #16]
 8006082:	b920      	cbnz	r0, 800608e <_svfiprintf_r+0x2e>
 8006084:	230c      	movs	r3, #12
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e0d1      	b.n	8006232 <_svfiprintf_r+0x1d2>
 800608e:	2340      	movs	r3, #64	; 0x40
 8006090:	616b      	str	r3, [r5, #20]
 8006092:	2300      	movs	r3, #0
 8006094:	9309      	str	r3, [sp, #36]	; 0x24
 8006096:	2320      	movs	r3, #32
 8006098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800609c:	f8cd 800c 	str.w	r8, [sp, #12]
 80060a0:	2330      	movs	r3, #48	; 0x30
 80060a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800624c <_svfiprintf_r+0x1ec>
 80060a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060aa:	f04f 0901 	mov.w	r9, #1
 80060ae:	4623      	mov	r3, r4
 80060b0:	469a      	mov	sl, r3
 80060b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b6:	b10a      	cbz	r2, 80060bc <_svfiprintf_r+0x5c>
 80060b8:	2a25      	cmp	r2, #37	; 0x25
 80060ba:	d1f9      	bne.n	80060b0 <_svfiprintf_r+0x50>
 80060bc:	ebba 0b04 	subs.w	fp, sl, r4
 80060c0:	d00b      	beq.n	80060da <_svfiprintf_r+0x7a>
 80060c2:	465b      	mov	r3, fp
 80060c4:	4622      	mov	r2, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	4638      	mov	r0, r7
 80060ca:	f7ff ff6d 	bl	8005fa8 <__ssputs_r>
 80060ce:	3001      	adds	r0, #1
 80060d0:	f000 80aa 	beq.w	8006228 <_svfiprintf_r+0x1c8>
 80060d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d6:	445a      	add	r2, fp
 80060d8:	9209      	str	r2, [sp, #36]	; 0x24
 80060da:	f89a 3000 	ldrb.w	r3, [sl]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 80a2 	beq.w	8006228 <_svfiprintf_r+0x1c8>
 80060e4:	2300      	movs	r3, #0
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ee:	f10a 0a01 	add.w	sl, sl, #1
 80060f2:	9304      	str	r3, [sp, #16]
 80060f4:	9307      	str	r3, [sp, #28]
 80060f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060fa:	931a      	str	r3, [sp, #104]	; 0x68
 80060fc:	4654      	mov	r4, sl
 80060fe:	2205      	movs	r2, #5
 8006100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006104:	4851      	ldr	r0, [pc, #324]	; (800624c <_svfiprintf_r+0x1ec>)
 8006106:	f7fa f873 	bl	80001f0 <memchr>
 800610a:	9a04      	ldr	r2, [sp, #16]
 800610c:	b9d8      	cbnz	r0, 8006146 <_svfiprintf_r+0xe6>
 800610e:	06d0      	lsls	r0, r2, #27
 8006110:	bf44      	itt	mi
 8006112:	2320      	movmi	r3, #32
 8006114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006118:	0711      	lsls	r1, r2, #28
 800611a:	bf44      	itt	mi
 800611c:	232b      	movmi	r3, #43	; 0x2b
 800611e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006122:	f89a 3000 	ldrb.w	r3, [sl]
 8006126:	2b2a      	cmp	r3, #42	; 0x2a
 8006128:	d015      	beq.n	8006156 <_svfiprintf_r+0xf6>
 800612a:	9a07      	ldr	r2, [sp, #28]
 800612c:	4654      	mov	r4, sl
 800612e:	2000      	movs	r0, #0
 8006130:	f04f 0c0a 	mov.w	ip, #10
 8006134:	4621      	mov	r1, r4
 8006136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800613a:	3b30      	subs	r3, #48	; 0x30
 800613c:	2b09      	cmp	r3, #9
 800613e:	d94e      	bls.n	80061de <_svfiprintf_r+0x17e>
 8006140:	b1b0      	cbz	r0, 8006170 <_svfiprintf_r+0x110>
 8006142:	9207      	str	r2, [sp, #28]
 8006144:	e014      	b.n	8006170 <_svfiprintf_r+0x110>
 8006146:	eba0 0308 	sub.w	r3, r0, r8
 800614a:	fa09 f303 	lsl.w	r3, r9, r3
 800614e:	4313      	orrs	r3, r2
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	46a2      	mov	sl, r4
 8006154:	e7d2      	b.n	80060fc <_svfiprintf_r+0x9c>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	1d19      	adds	r1, r3, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	9103      	str	r1, [sp, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfbb      	ittet	lt
 8006162:	425b      	neglt	r3, r3
 8006164:	f042 0202 	orrlt.w	r2, r2, #2
 8006168:	9307      	strge	r3, [sp, #28]
 800616a:	9307      	strlt	r3, [sp, #28]
 800616c:	bfb8      	it	lt
 800616e:	9204      	strlt	r2, [sp, #16]
 8006170:	7823      	ldrb	r3, [r4, #0]
 8006172:	2b2e      	cmp	r3, #46	; 0x2e
 8006174:	d10c      	bne.n	8006190 <_svfiprintf_r+0x130>
 8006176:	7863      	ldrb	r3, [r4, #1]
 8006178:	2b2a      	cmp	r3, #42	; 0x2a
 800617a:	d135      	bne.n	80061e8 <_svfiprintf_r+0x188>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	9203      	str	r2, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfb8      	it	lt
 8006188:	f04f 33ff 	movlt.w	r3, #4294967295
 800618c:	3402      	adds	r4, #2
 800618e:	9305      	str	r3, [sp, #20]
 8006190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800625c <_svfiprintf_r+0x1fc>
 8006194:	7821      	ldrb	r1, [r4, #0]
 8006196:	2203      	movs	r2, #3
 8006198:	4650      	mov	r0, sl
 800619a:	f7fa f829 	bl	80001f0 <memchr>
 800619e:	b140      	cbz	r0, 80061b2 <_svfiprintf_r+0x152>
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	eba0 000a 	sub.w	r0, r0, sl
 80061a6:	fa03 f000 	lsl.w	r0, r3, r0
 80061aa:	9b04      	ldr	r3, [sp, #16]
 80061ac:	4303      	orrs	r3, r0
 80061ae:	3401      	adds	r4, #1
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b6:	4826      	ldr	r0, [pc, #152]	; (8006250 <_svfiprintf_r+0x1f0>)
 80061b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061bc:	2206      	movs	r2, #6
 80061be:	f7fa f817 	bl	80001f0 <memchr>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d038      	beq.n	8006238 <_svfiprintf_r+0x1d8>
 80061c6:	4b23      	ldr	r3, [pc, #140]	; (8006254 <_svfiprintf_r+0x1f4>)
 80061c8:	bb1b      	cbnz	r3, 8006212 <_svfiprintf_r+0x1b2>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	3307      	adds	r3, #7
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	3308      	adds	r3, #8
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d8:	4433      	add	r3, r6
 80061da:	9309      	str	r3, [sp, #36]	; 0x24
 80061dc:	e767      	b.n	80060ae <_svfiprintf_r+0x4e>
 80061de:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e2:	460c      	mov	r4, r1
 80061e4:	2001      	movs	r0, #1
 80061e6:	e7a5      	b.n	8006134 <_svfiprintf_r+0xd4>
 80061e8:	2300      	movs	r3, #0
 80061ea:	3401      	adds	r4, #1
 80061ec:	9305      	str	r3, [sp, #20]
 80061ee:	4619      	mov	r1, r3
 80061f0:	f04f 0c0a 	mov.w	ip, #10
 80061f4:	4620      	mov	r0, r4
 80061f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fa:	3a30      	subs	r2, #48	; 0x30
 80061fc:	2a09      	cmp	r2, #9
 80061fe:	d903      	bls.n	8006208 <_svfiprintf_r+0x1a8>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0c5      	beq.n	8006190 <_svfiprintf_r+0x130>
 8006204:	9105      	str	r1, [sp, #20]
 8006206:	e7c3      	b.n	8006190 <_svfiprintf_r+0x130>
 8006208:	fb0c 2101 	mla	r1, ip, r1, r2
 800620c:	4604      	mov	r4, r0
 800620e:	2301      	movs	r3, #1
 8006210:	e7f0      	b.n	80061f4 <_svfiprintf_r+0x194>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <_svfiprintf_r+0x1f8>)
 800621a:	a904      	add	r1, sp, #16
 800621c:	4638      	mov	r0, r7
 800621e:	f3af 8000 	nop.w
 8006222:	1c42      	adds	r2, r0, #1
 8006224:	4606      	mov	r6, r0
 8006226:	d1d6      	bne.n	80061d6 <_svfiprintf_r+0x176>
 8006228:	89ab      	ldrh	r3, [r5, #12]
 800622a:	065b      	lsls	r3, r3, #25
 800622c:	f53f af2c 	bmi.w	8006088 <_svfiprintf_r+0x28>
 8006230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006232:	b01d      	add	sp, #116	; 0x74
 8006234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006238:	ab03      	add	r3, sp, #12
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	462a      	mov	r2, r5
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <_svfiprintf_r+0x1f8>)
 8006240:	a904      	add	r1, sp, #16
 8006242:	4638      	mov	r0, r7
 8006244:	f000 fa4c 	bl	80066e0 <_printf_i>
 8006248:	e7eb      	b.n	8006222 <_svfiprintf_r+0x1c2>
 800624a:	bf00      	nop
 800624c:	08007d6c 	.word	0x08007d6c
 8006250:	08007d76 	.word	0x08007d76
 8006254:	00000000 	.word	0x00000000
 8006258:	08005fa9 	.word	0x08005fa9
 800625c:	08007d72 	.word	0x08007d72

08006260 <_sungetc_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	1c4b      	adds	r3, r1, #1
 8006264:	4614      	mov	r4, r2
 8006266:	d103      	bne.n	8006270 <_sungetc_r+0x10>
 8006268:	f04f 35ff 	mov.w	r5, #4294967295
 800626c:	4628      	mov	r0, r5
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	8993      	ldrh	r3, [r2, #12]
 8006272:	f023 0320 	bic.w	r3, r3, #32
 8006276:	8193      	strh	r3, [r2, #12]
 8006278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800627a:	6852      	ldr	r2, [r2, #4]
 800627c:	b2cd      	uxtb	r5, r1
 800627e:	b18b      	cbz	r3, 80062a4 <_sungetc_r+0x44>
 8006280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006282:	4293      	cmp	r3, r2
 8006284:	dd08      	ble.n	8006298 <_sungetc_r+0x38>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	1e5a      	subs	r2, r3, #1
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	3301      	adds	r3, #1
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	e7e9      	b.n	800626c <_sungetc_r+0xc>
 8006298:	4621      	mov	r1, r4
 800629a:	f000 fd71 	bl	8006d80 <__submore>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d0f1      	beq.n	8006286 <_sungetc_r+0x26>
 80062a2:	e7e1      	b.n	8006268 <_sungetc_r+0x8>
 80062a4:	6921      	ldr	r1, [r4, #16]
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	b151      	cbz	r1, 80062c0 <_sungetc_r+0x60>
 80062aa:	4299      	cmp	r1, r3
 80062ac:	d208      	bcs.n	80062c0 <_sungetc_r+0x60>
 80062ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80062b2:	42a9      	cmp	r1, r5
 80062b4:	d104      	bne.n	80062c0 <_sungetc_r+0x60>
 80062b6:	3b01      	subs	r3, #1
 80062b8:	3201      	adds	r2, #1
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	6062      	str	r2, [r4, #4]
 80062be:	e7d5      	b.n	800626c <_sungetc_r+0xc>
 80062c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80062c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c8:	6363      	str	r3, [r4, #52]	; 0x34
 80062ca:	2303      	movs	r3, #3
 80062cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80062ce:	4623      	mov	r3, r4
 80062d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	2301      	movs	r3, #1
 80062d8:	e7dc      	b.n	8006294 <_sungetc_r+0x34>

080062da <__ssrefill_r>:
 80062da:	b510      	push	{r4, lr}
 80062dc:	460c      	mov	r4, r1
 80062de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062e0:	b169      	cbz	r1, 80062fe <__ssrefill_r+0x24>
 80062e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062e6:	4299      	cmp	r1, r3
 80062e8:	d001      	beq.n	80062ee <__ssrefill_r+0x14>
 80062ea:	f000 ffa9 	bl	8007240 <_free_r>
 80062ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	2000      	movs	r0, #0
 80062f4:	6360      	str	r0, [r4, #52]	; 0x34
 80062f6:	b113      	cbz	r3, 80062fe <__ssrefill_r+0x24>
 80062f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	2300      	movs	r3, #0
 8006304:	6063      	str	r3, [r4, #4]
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f043 0320 	orr.w	r3, r3, #32
 800630c:	81a3      	strh	r3, [r4, #12]
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	e7f3      	b.n	80062fc <__ssrefill_r+0x22>

08006314 <__ssvfiscanf_r>:
 8006314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	460c      	mov	r4, r1
 800631a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800631e:	2100      	movs	r1, #0
 8006320:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006324:	49a6      	ldr	r1, [pc, #664]	; (80065c0 <__ssvfiscanf_r+0x2ac>)
 8006326:	91a0      	str	r1, [sp, #640]	; 0x280
 8006328:	f10d 0804 	add.w	r8, sp, #4
 800632c:	49a5      	ldr	r1, [pc, #660]	; (80065c4 <__ssvfiscanf_r+0x2b0>)
 800632e:	4fa6      	ldr	r7, [pc, #664]	; (80065c8 <__ssvfiscanf_r+0x2b4>)
 8006330:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80065cc <__ssvfiscanf_r+0x2b8>
 8006334:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006338:	4606      	mov	r6, r0
 800633a:	91a1      	str	r1, [sp, #644]	; 0x284
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	7813      	ldrb	r3, [r2, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 815a 	beq.w	80065fa <__ssvfiscanf_r+0x2e6>
 8006346:	5dd9      	ldrb	r1, [r3, r7]
 8006348:	f011 0108 	ands.w	r1, r1, #8
 800634c:	f102 0501 	add.w	r5, r2, #1
 8006350:	d019      	beq.n	8006386 <__ssvfiscanf_r+0x72>
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	dd0f      	ble.n	8006378 <__ssvfiscanf_r+0x64>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	5cba      	ldrb	r2, [r7, r2]
 800635e:	0712      	lsls	r2, r2, #28
 8006360:	d401      	bmi.n	8006366 <__ssvfiscanf_r+0x52>
 8006362:	462a      	mov	r2, r5
 8006364:	e7eb      	b.n	800633e <__ssvfiscanf_r+0x2a>
 8006366:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006368:	3201      	adds	r2, #1
 800636a:	9245      	str	r2, [sp, #276]	; 0x114
 800636c:	6862      	ldr	r2, [r4, #4]
 800636e:	3301      	adds	r3, #1
 8006370:	3a01      	subs	r2, #1
 8006372:	6062      	str	r2, [r4, #4]
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	e7ec      	b.n	8006352 <__ssvfiscanf_r+0x3e>
 8006378:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800637a:	4621      	mov	r1, r4
 800637c:	4630      	mov	r0, r6
 800637e:	4798      	blx	r3
 8006380:	2800      	cmp	r0, #0
 8006382:	d0e9      	beq.n	8006358 <__ssvfiscanf_r+0x44>
 8006384:	e7ed      	b.n	8006362 <__ssvfiscanf_r+0x4e>
 8006386:	2b25      	cmp	r3, #37	; 0x25
 8006388:	d012      	beq.n	80063b0 <__ssvfiscanf_r+0x9c>
 800638a:	469a      	mov	sl, r3
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f340 8091 	ble.w	80064b6 <__ssvfiscanf_r+0x1a2>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	7813      	ldrb	r3, [r2, #0]
 8006398:	4553      	cmp	r3, sl
 800639a:	f040 812e 	bne.w	80065fa <__ssvfiscanf_r+0x2e6>
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80063a6:	3201      	adds	r2, #1
 80063a8:	3301      	adds	r3, #1
 80063aa:	6022      	str	r2, [r4, #0]
 80063ac:	9345      	str	r3, [sp, #276]	; 0x114
 80063ae:	e7d8      	b.n	8006362 <__ssvfiscanf_r+0x4e>
 80063b0:	9141      	str	r1, [sp, #260]	; 0x104
 80063b2:	9143      	str	r1, [sp, #268]	; 0x10c
 80063b4:	7853      	ldrb	r3, [r2, #1]
 80063b6:	2b2a      	cmp	r3, #42	; 0x2a
 80063b8:	bf02      	ittt	eq
 80063ba:	2310      	moveq	r3, #16
 80063bc:	1c95      	addeq	r5, r2, #2
 80063be:	9341      	streq	r3, [sp, #260]	; 0x104
 80063c0:	220a      	movs	r2, #10
 80063c2:	46aa      	mov	sl, r5
 80063c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80063c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	d91d      	bls.n	800640c <__ssvfiscanf_r+0xf8>
 80063d0:	487e      	ldr	r0, [pc, #504]	; (80065cc <__ssvfiscanf_r+0x2b8>)
 80063d2:	2203      	movs	r2, #3
 80063d4:	f7f9 ff0c 	bl	80001f0 <memchr>
 80063d8:	b140      	cbz	r0, 80063ec <__ssvfiscanf_r+0xd8>
 80063da:	2301      	movs	r3, #1
 80063dc:	eba0 0009 	sub.w	r0, r0, r9
 80063e0:	fa03 f000 	lsl.w	r0, r3, r0
 80063e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80063e6:	4318      	orrs	r0, r3
 80063e8:	9041      	str	r0, [sp, #260]	; 0x104
 80063ea:	4655      	mov	r5, sl
 80063ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80063f0:	2b78      	cmp	r3, #120	; 0x78
 80063f2:	d806      	bhi.n	8006402 <__ssvfiscanf_r+0xee>
 80063f4:	2b57      	cmp	r3, #87	; 0x57
 80063f6:	d810      	bhi.n	800641a <__ssvfiscanf_r+0x106>
 80063f8:	2b25      	cmp	r3, #37	; 0x25
 80063fa:	d0c6      	beq.n	800638a <__ssvfiscanf_r+0x76>
 80063fc:	d856      	bhi.n	80064ac <__ssvfiscanf_r+0x198>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d064      	beq.n	80064cc <__ssvfiscanf_r+0x1b8>
 8006402:	2303      	movs	r3, #3
 8006404:	9347      	str	r3, [sp, #284]	; 0x11c
 8006406:	230a      	movs	r3, #10
 8006408:	9342      	str	r3, [sp, #264]	; 0x108
 800640a:	e071      	b.n	80064f0 <__ssvfiscanf_r+0x1dc>
 800640c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800640e:	fb02 1103 	mla	r1, r2, r3, r1
 8006412:	3930      	subs	r1, #48	; 0x30
 8006414:	9143      	str	r1, [sp, #268]	; 0x10c
 8006416:	4655      	mov	r5, sl
 8006418:	e7d3      	b.n	80063c2 <__ssvfiscanf_r+0xae>
 800641a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800641e:	2a20      	cmp	r2, #32
 8006420:	d8ef      	bhi.n	8006402 <__ssvfiscanf_r+0xee>
 8006422:	a101      	add	r1, pc, #4	; (adr r1, 8006428 <__ssvfiscanf_r+0x114>)
 8006424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006428:	080064db 	.word	0x080064db
 800642c:	08006403 	.word	0x08006403
 8006430:	08006403 	.word	0x08006403
 8006434:	08006539 	.word	0x08006539
 8006438:	08006403 	.word	0x08006403
 800643c:	08006403 	.word	0x08006403
 8006440:	08006403 	.word	0x08006403
 8006444:	08006403 	.word	0x08006403
 8006448:	08006403 	.word	0x08006403
 800644c:	08006403 	.word	0x08006403
 8006450:	08006403 	.word	0x08006403
 8006454:	0800654f 	.word	0x0800654f
 8006458:	08006525 	.word	0x08006525
 800645c:	080064b3 	.word	0x080064b3
 8006460:	080064b3 	.word	0x080064b3
 8006464:	080064b3 	.word	0x080064b3
 8006468:	08006403 	.word	0x08006403
 800646c:	08006529 	.word	0x08006529
 8006470:	08006403 	.word	0x08006403
 8006474:	08006403 	.word	0x08006403
 8006478:	08006403 	.word	0x08006403
 800647c:	08006403 	.word	0x08006403
 8006480:	0800655f 	.word	0x0800655f
 8006484:	08006531 	.word	0x08006531
 8006488:	080064d3 	.word	0x080064d3
 800648c:	08006403 	.word	0x08006403
 8006490:	08006403 	.word	0x08006403
 8006494:	0800655b 	.word	0x0800655b
 8006498:	08006403 	.word	0x08006403
 800649c:	08006525 	.word	0x08006525
 80064a0:	08006403 	.word	0x08006403
 80064a4:	08006403 	.word	0x08006403
 80064a8:	080064db 	.word	0x080064db
 80064ac:	3b45      	subs	r3, #69	; 0x45
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d8a7      	bhi.n	8006402 <__ssvfiscanf_r+0xee>
 80064b2:	2305      	movs	r3, #5
 80064b4:	e01b      	b.n	80064ee <__ssvfiscanf_r+0x1da>
 80064b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064b8:	4621      	mov	r1, r4
 80064ba:	4630      	mov	r0, r6
 80064bc:	4798      	blx	r3
 80064be:	2800      	cmp	r0, #0
 80064c0:	f43f af68 	beq.w	8006394 <__ssvfiscanf_r+0x80>
 80064c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f040 808d 	bne.w	80065e6 <__ssvfiscanf_r+0x2d2>
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e08f      	b.n	80065f2 <__ssvfiscanf_r+0x2de>
 80064d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80064d4:	f042 0220 	orr.w	r2, r2, #32
 80064d8:	9241      	str	r2, [sp, #260]	; 0x104
 80064da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80064dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e0:	9241      	str	r2, [sp, #260]	; 0x104
 80064e2:	2210      	movs	r2, #16
 80064e4:	2b6f      	cmp	r3, #111	; 0x6f
 80064e6:	9242      	str	r2, [sp, #264]	; 0x108
 80064e8:	bf34      	ite	cc
 80064ea:	2303      	movcc	r3, #3
 80064ec:	2304      	movcs	r3, #4
 80064ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dd42      	ble.n	800657c <__ssvfiscanf_r+0x268>
 80064f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80064f8:	0659      	lsls	r1, r3, #25
 80064fa:	d404      	bmi.n	8006506 <__ssvfiscanf_r+0x1f2>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	5cba      	ldrb	r2, [r7, r2]
 8006502:	0712      	lsls	r2, r2, #28
 8006504:	d441      	bmi.n	800658a <__ssvfiscanf_r+0x276>
 8006506:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006508:	2b02      	cmp	r3, #2
 800650a:	dc50      	bgt.n	80065ae <__ssvfiscanf_r+0x29a>
 800650c:	466b      	mov	r3, sp
 800650e:	4622      	mov	r2, r4
 8006510:	a941      	add	r1, sp, #260	; 0x104
 8006512:	4630      	mov	r0, r6
 8006514:	f000 fa0a 	bl	800692c <_scanf_chars>
 8006518:	2801      	cmp	r0, #1
 800651a:	d06e      	beq.n	80065fa <__ssvfiscanf_r+0x2e6>
 800651c:	2802      	cmp	r0, #2
 800651e:	f47f af20 	bne.w	8006362 <__ssvfiscanf_r+0x4e>
 8006522:	e7cf      	b.n	80064c4 <__ssvfiscanf_r+0x1b0>
 8006524:	220a      	movs	r2, #10
 8006526:	e7dd      	b.n	80064e4 <__ssvfiscanf_r+0x1d0>
 8006528:	2300      	movs	r3, #0
 800652a:	9342      	str	r3, [sp, #264]	; 0x108
 800652c:	2303      	movs	r3, #3
 800652e:	e7de      	b.n	80064ee <__ssvfiscanf_r+0x1da>
 8006530:	2308      	movs	r3, #8
 8006532:	9342      	str	r3, [sp, #264]	; 0x108
 8006534:	2304      	movs	r3, #4
 8006536:	e7da      	b.n	80064ee <__ssvfiscanf_r+0x1da>
 8006538:	4629      	mov	r1, r5
 800653a:	4640      	mov	r0, r8
 800653c:	f000 fb74 	bl	8006c28 <__sccl>
 8006540:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006546:	9341      	str	r3, [sp, #260]	; 0x104
 8006548:	4605      	mov	r5, r0
 800654a:	2301      	movs	r3, #1
 800654c:	e7cf      	b.n	80064ee <__ssvfiscanf_r+0x1da>
 800654e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006554:	9341      	str	r3, [sp, #260]	; 0x104
 8006556:	2300      	movs	r3, #0
 8006558:	e7c9      	b.n	80064ee <__ssvfiscanf_r+0x1da>
 800655a:	2302      	movs	r3, #2
 800655c:	e7c7      	b.n	80064ee <__ssvfiscanf_r+0x1da>
 800655e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006560:	06c3      	lsls	r3, r0, #27
 8006562:	f53f aefe 	bmi.w	8006362 <__ssvfiscanf_r+0x4e>
 8006566:	9b00      	ldr	r3, [sp, #0]
 8006568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	9100      	str	r1, [sp, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f010 0f01 	tst.w	r0, #1
 8006574:	bf14      	ite	ne
 8006576:	801a      	strhne	r2, [r3, #0]
 8006578:	601a      	streq	r2, [r3, #0]
 800657a:	e6f2      	b.n	8006362 <__ssvfiscanf_r+0x4e>
 800657c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800657e:	4621      	mov	r1, r4
 8006580:	4630      	mov	r0, r6
 8006582:	4798      	blx	r3
 8006584:	2800      	cmp	r0, #0
 8006586:	d0b6      	beq.n	80064f6 <__ssvfiscanf_r+0x1e2>
 8006588:	e79c      	b.n	80064c4 <__ssvfiscanf_r+0x1b0>
 800658a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800658c:	3201      	adds	r2, #1
 800658e:	9245      	str	r2, [sp, #276]	; 0x114
 8006590:	6862      	ldr	r2, [r4, #4]
 8006592:	3a01      	subs	r2, #1
 8006594:	2a00      	cmp	r2, #0
 8006596:	6062      	str	r2, [r4, #4]
 8006598:	dd02      	ble.n	80065a0 <__ssvfiscanf_r+0x28c>
 800659a:	3301      	adds	r3, #1
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	e7ad      	b.n	80064fc <__ssvfiscanf_r+0x1e8>
 80065a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80065a2:	4621      	mov	r1, r4
 80065a4:	4630      	mov	r0, r6
 80065a6:	4798      	blx	r3
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d0a7      	beq.n	80064fc <__ssvfiscanf_r+0x1e8>
 80065ac:	e78a      	b.n	80064c4 <__ssvfiscanf_r+0x1b0>
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	dc0e      	bgt.n	80065d0 <__ssvfiscanf_r+0x2bc>
 80065b2:	466b      	mov	r3, sp
 80065b4:	4622      	mov	r2, r4
 80065b6:	a941      	add	r1, sp, #260	; 0x104
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 fa11 	bl	80069e0 <_scanf_i>
 80065be:	e7ab      	b.n	8006518 <__ssvfiscanf_r+0x204>
 80065c0:	08006261 	.word	0x08006261
 80065c4:	080062db 	.word	0x080062db
 80065c8:	08007a71 	.word	0x08007a71
 80065cc:	08007d72 	.word	0x08007d72
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <__ssvfiscanf_r+0x2ec>)
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f43f aec5 	beq.w	8006362 <__ssvfiscanf_r+0x4e>
 80065d8:	466b      	mov	r3, sp
 80065da:	4622      	mov	r2, r4
 80065dc:	a941      	add	r1, sp, #260	; 0x104
 80065de:	4630      	mov	r0, r6
 80065e0:	f7fd fa48 	bl	8003a74 <_scanf_float>
 80065e4:	e798      	b.n	8006518 <__ssvfiscanf_r+0x204>
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065ec:	bf18      	it	ne
 80065ee:	f04f 30ff 	movne.w	r0, #4294967295
 80065f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80065fc:	e7f9      	b.n	80065f2 <__ssvfiscanf_r+0x2de>
 80065fe:	bf00      	nop
 8006600:	08003a75 	.word	0x08003a75

08006604 <_printf_common>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	4616      	mov	r6, r2
 800660a:	4699      	mov	r9, r3
 800660c:	688a      	ldr	r2, [r1, #8]
 800660e:	690b      	ldr	r3, [r1, #16]
 8006610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006614:	4293      	cmp	r3, r2
 8006616:	bfb8      	it	lt
 8006618:	4613      	movlt	r3, r2
 800661a:	6033      	str	r3, [r6, #0]
 800661c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006620:	4607      	mov	r7, r0
 8006622:	460c      	mov	r4, r1
 8006624:	b10a      	cbz	r2, 800662a <_printf_common+0x26>
 8006626:	3301      	adds	r3, #1
 8006628:	6033      	str	r3, [r6, #0]
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	0699      	lsls	r1, r3, #26
 800662e:	bf42      	ittt	mi
 8006630:	6833      	ldrmi	r3, [r6, #0]
 8006632:	3302      	addmi	r3, #2
 8006634:	6033      	strmi	r3, [r6, #0]
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	f015 0506 	ands.w	r5, r5, #6
 800663c:	d106      	bne.n	800664c <_printf_common+0x48>
 800663e:	f104 0a19 	add.w	sl, r4, #25
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	6832      	ldr	r2, [r6, #0]
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	42ab      	cmp	r3, r5
 800664a:	dc26      	bgt.n	800669a <_printf_common+0x96>
 800664c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006650:	1e13      	subs	r3, r2, #0
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	bf18      	it	ne
 8006656:	2301      	movne	r3, #1
 8006658:	0692      	lsls	r2, r2, #26
 800665a:	d42b      	bmi.n	80066b4 <_printf_common+0xb0>
 800665c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006660:	4649      	mov	r1, r9
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	3001      	adds	r0, #1
 8006668:	d01e      	beq.n	80066a8 <_printf_common+0xa4>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	68e5      	ldr	r5, [r4, #12]
 800666e:	6832      	ldr	r2, [r6, #0]
 8006670:	f003 0306 	and.w	r3, r3, #6
 8006674:	2b04      	cmp	r3, #4
 8006676:	bf08      	it	eq
 8006678:	1aad      	subeq	r5, r5, r2
 800667a:	68a3      	ldr	r3, [r4, #8]
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	bf0c      	ite	eq
 8006680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006684:	2500      	movne	r5, #0
 8006686:	4293      	cmp	r3, r2
 8006688:	bfc4      	itt	gt
 800668a:	1a9b      	subgt	r3, r3, r2
 800668c:	18ed      	addgt	r5, r5, r3
 800668e:	2600      	movs	r6, #0
 8006690:	341a      	adds	r4, #26
 8006692:	42b5      	cmp	r5, r6
 8006694:	d11a      	bne.n	80066cc <_printf_common+0xc8>
 8006696:	2000      	movs	r0, #0
 8006698:	e008      	b.n	80066ac <_printf_common+0xa8>
 800669a:	2301      	movs	r3, #1
 800669c:	4652      	mov	r2, sl
 800669e:	4649      	mov	r1, r9
 80066a0:	4638      	mov	r0, r7
 80066a2:	47c0      	blx	r8
 80066a4:	3001      	adds	r0, #1
 80066a6:	d103      	bne.n	80066b0 <_printf_common+0xac>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b0:	3501      	adds	r5, #1
 80066b2:	e7c6      	b.n	8006642 <_printf_common+0x3e>
 80066b4:	18e1      	adds	r1, r4, r3
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	2030      	movs	r0, #48	; 0x30
 80066ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066be:	4422      	add	r2, r4
 80066c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066c8:	3302      	adds	r3, #2
 80066ca:	e7c7      	b.n	800665c <_printf_common+0x58>
 80066cc:	2301      	movs	r3, #1
 80066ce:	4622      	mov	r2, r4
 80066d0:	4649      	mov	r1, r9
 80066d2:	4638      	mov	r0, r7
 80066d4:	47c0      	blx	r8
 80066d6:	3001      	adds	r0, #1
 80066d8:	d0e6      	beq.n	80066a8 <_printf_common+0xa4>
 80066da:	3601      	adds	r6, #1
 80066dc:	e7d9      	b.n	8006692 <_printf_common+0x8e>
	...

080066e0 <_printf_i>:
 80066e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	7e0f      	ldrb	r7, [r1, #24]
 80066e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066e8:	2f78      	cmp	r7, #120	; 0x78
 80066ea:	4691      	mov	r9, r2
 80066ec:	4680      	mov	r8, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	469a      	mov	sl, r3
 80066f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066f6:	d807      	bhi.n	8006708 <_printf_i+0x28>
 80066f8:	2f62      	cmp	r7, #98	; 0x62
 80066fa:	d80a      	bhi.n	8006712 <_printf_i+0x32>
 80066fc:	2f00      	cmp	r7, #0
 80066fe:	f000 80d8 	beq.w	80068b2 <_printf_i+0x1d2>
 8006702:	2f58      	cmp	r7, #88	; 0x58
 8006704:	f000 80a3 	beq.w	800684e <_printf_i+0x16e>
 8006708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800670c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006710:	e03a      	b.n	8006788 <_printf_i+0xa8>
 8006712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006716:	2b15      	cmp	r3, #21
 8006718:	d8f6      	bhi.n	8006708 <_printf_i+0x28>
 800671a:	a101      	add	r1, pc, #4	; (adr r1, 8006720 <_printf_i+0x40>)
 800671c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006720:	08006779 	.word	0x08006779
 8006724:	0800678d 	.word	0x0800678d
 8006728:	08006709 	.word	0x08006709
 800672c:	08006709 	.word	0x08006709
 8006730:	08006709 	.word	0x08006709
 8006734:	08006709 	.word	0x08006709
 8006738:	0800678d 	.word	0x0800678d
 800673c:	08006709 	.word	0x08006709
 8006740:	08006709 	.word	0x08006709
 8006744:	08006709 	.word	0x08006709
 8006748:	08006709 	.word	0x08006709
 800674c:	08006899 	.word	0x08006899
 8006750:	080067bd 	.word	0x080067bd
 8006754:	0800687b 	.word	0x0800687b
 8006758:	08006709 	.word	0x08006709
 800675c:	08006709 	.word	0x08006709
 8006760:	080068bb 	.word	0x080068bb
 8006764:	08006709 	.word	0x08006709
 8006768:	080067bd 	.word	0x080067bd
 800676c:	08006709 	.word	0x08006709
 8006770:	08006709 	.word	0x08006709
 8006774:	08006883 	.word	0x08006883
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	1d1a      	adds	r2, r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	602a      	str	r2, [r5, #0]
 8006780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006788:	2301      	movs	r3, #1
 800678a:	e0a3      	b.n	80068d4 <_printf_i+0x1f4>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	6829      	ldr	r1, [r5, #0]
 8006790:	0606      	lsls	r6, r0, #24
 8006792:	f101 0304 	add.w	r3, r1, #4
 8006796:	d50a      	bpl.n	80067ae <_printf_i+0xce>
 8006798:	680e      	ldr	r6, [r1, #0]
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	2e00      	cmp	r6, #0
 800679e:	da03      	bge.n	80067a8 <_printf_i+0xc8>
 80067a0:	232d      	movs	r3, #45	; 0x2d
 80067a2:	4276      	negs	r6, r6
 80067a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a8:	485e      	ldr	r0, [pc, #376]	; (8006924 <_printf_i+0x244>)
 80067aa:	230a      	movs	r3, #10
 80067ac:	e019      	b.n	80067e2 <_printf_i+0x102>
 80067ae:	680e      	ldr	r6, [r1, #0]
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067b6:	bf18      	it	ne
 80067b8:	b236      	sxthne	r6, r6
 80067ba:	e7ef      	b.n	800679c <_printf_i+0xbc>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	1d19      	adds	r1, r3, #4
 80067c2:	6029      	str	r1, [r5, #0]
 80067c4:	0601      	lsls	r1, r0, #24
 80067c6:	d501      	bpl.n	80067cc <_printf_i+0xec>
 80067c8:	681e      	ldr	r6, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <_printf_i+0xf2>
 80067cc:	0646      	lsls	r6, r0, #25
 80067ce:	d5fb      	bpl.n	80067c8 <_printf_i+0xe8>
 80067d0:	881e      	ldrh	r6, [r3, #0]
 80067d2:	4854      	ldr	r0, [pc, #336]	; (8006924 <_printf_i+0x244>)
 80067d4:	2f6f      	cmp	r7, #111	; 0x6f
 80067d6:	bf0c      	ite	eq
 80067d8:	2308      	moveq	r3, #8
 80067da:	230a      	movne	r3, #10
 80067dc:	2100      	movs	r1, #0
 80067de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067e2:	6865      	ldr	r5, [r4, #4]
 80067e4:	60a5      	str	r5, [r4, #8]
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	bfa2      	ittt	ge
 80067ea:	6821      	ldrge	r1, [r4, #0]
 80067ec:	f021 0104 	bicge.w	r1, r1, #4
 80067f0:	6021      	strge	r1, [r4, #0]
 80067f2:	b90e      	cbnz	r6, 80067f8 <_printf_i+0x118>
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	d04d      	beq.n	8006894 <_printf_i+0x1b4>
 80067f8:	4615      	mov	r5, r2
 80067fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80067fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006802:	5dc7      	ldrb	r7, [r0, r7]
 8006804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006808:	4637      	mov	r7, r6
 800680a:	42bb      	cmp	r3, r7
 800680c:	460e      	mov	r6, r1
 800680e:	d9f4      	bls.n	80067fa <_printf_i+0x11a>
 8006810:	2b08      	cmp	r3, #8
 8006812:	d10b      	bne.n	800682c <_printf_i+0x14c>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07de      	lsls	r6, r3, #31
 8006818:	d508      	bpl.n	800682c <_printf_i+0x14c>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	6861      	ldr	r1, [r4, #4]
 800681e:	4299      	cmp	r1, r3
 8006820:	bfde      	ittt	le
 8006822:	2330      	movle	r3, #48	; 0x30
 8006824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006828:	f105 35ff 	addle.w	r5, r5, #4294967295
 800682c:	1b52      	subs	r2, r2, r5
 800682e:	6122      	str	r2, [r4, #16]
 8006830:	f8cd a000 	str.w	sl, [sp]
 8006834:	464b      	mov	r3, r9
 8006836:	aa03      	add	r2, sp, #12
 8006838:	4621      	mov	r1, r4
 800683a:	4640      	mov	r0, r8
 800683c:	f7ff fee2 	bl	8006604 <_printf_common>
 8006840:	3001      	adds	r0, #1
 8006842:	d14c      	bne.n	80068de <_printf_i+0x1fe>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	b004      	add	sp, #16
 800684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684e:	4835      	ldr	r0, [pc, #212]	; (8006924 <_printf_i+0x244>)
 8006850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006854:	6829      	ldr	r1, [r5, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	f851 6b04 	ldr.w	r6, [r1], #4
 800685c:	6029      	str	r1, [r5, #0]
 800685e:	061d      	lsls	r5, r3, #24
 8006860:	d514      	bpl.n	800688c <_printf_i+0x1ac>
 8006862:	07df      	lsls	r7, r3, #31
 8006864:	bf44      	itt	mi
 8006866:	f043 0320 	orrmi.w	r3, r3, #32
 800686a:	6023      	strmi	r3, [r4, #0]
 800686c:	b91e      	cbnz	r6, 8006876 <_printf_i+0x196>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	f023 0320 	bic.w	r3, r3, #32
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	2310      	movs	r3, #16
 8006878:	e7b0      	b.n	80067dc <_printf_i+0xfc>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	f043 0320 	orr.w	r3, r3, #32
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	2378      	movs	r3, #120	; 0x78
 8006884:	4828      	ldr	r0, [pc, #160]	; (8006928 <_printf_i+0x248>)
 8006886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800688a:	e7e3      	b.n	8006854 <_printf_i+0x174>
 800688c:	0659      	lsls	r1, r3, #25
 800688e:	bf48      	it	mi
 8006890:	b2b6      	uxthmi	r6, r6
 8006892:	e7e6      	b.n	8006862 <_printf_i+0x182>
 8006894:	4615      	mov	r5, r2
 8006896:	e7bb      	b.n	8006810 <_printf_i+0x130>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	6826      	ldr	r6, [r4, #0]
 800689c:	6961      	ldr	r1, [r4, #20]
 800689e:	1d18      	adds	r0, r3, #4
 80068a0:	6028      	str	r0, [r5, #0]
 80068a2:	0635      	lsls	r5, r6, #24
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	d501      	bpl.n	80068ac <_printf_i+0x1cc>
 80068a8:	6019      	str	r1, [r3, #0]
 80068aa:	e002      	b.n	80068b2 <_printf_i+0x1d2>
 80068ac:	0670      	lsls	r0, r6, #25
 80068ae:	d5fb      	bpl.n	80068a8 <_printf_i+0x1c8>
 80068b0:	8019      	strh	r1, [r3, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	4615      	mov	r5, r2
 80068b8:	e7ba      	b.n	8006830 <_printf_i+0x150>
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	602a      	str	r2, [r5, #0]
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	6862      	ldr	r2, [r4, #4]
 80068c4:	2100      	movs	r1, #0
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7f9 fc92 	bl	80001f0 <memchr>
 80068cc:	b108      	cbz	r0, 80068d2 <_printf_i+0x1f2>
 80068ce:	1b40      	subs	r0, r0, r5
 80068d0:	6060      	str	r0, [r4, #4]
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	2300      	movs	r3, #0
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068dc:	e7a8      	b.n	8006830 <_printf_i+0x150>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	462a      	mov	r2, r5
 80068e2:	4649      	mov	r1, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	47d0      	blx	sl
 80068e8:	3001      	adds	r0, #1
 80068ea:	d0ab      	beq.n	8006844 <_printf_i+0x164>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	d413      	bmi.n	800691a <_printf_i+0x23a>
 80068f2:	68e0      	ldr	r0, [r4, #12]
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	4298      	cmp	r0, r3
 80068f8:	bfb8      	it	lt
 80068fa:	4618      	movlt	r0, r3
 80068fc:	e7a4      	b.n	8006848 <_printf_i+0x168>
 80068fe:	2301      	movs	r3, #1
 8006900:	4632      	mov	r2, r6
 8006902:	4649      	mov	r1, r9
 8006904:	4640      	mov	r0, r8
 8006906:	47d0      	blx	sl
 8006908:	3001      	adds	r0, #1
 800690a:	d09b      	beq.n	8006844 <_printf_i+0x164>
 800690c:	3501      	adds	r5, #1
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	9903      	ldr	r1, [sp, #12]
 8006912:	1a5b      	subs	r3, r3, r1
 8006914:	42ab      	cmp	r3, r5
 8006916:	dcf2      	bgt.n	80068fe <_printf_i+0x21e>
 8006918:	e7eb      	b.n	80068f2 <_printf_i+0x212>
 800691a:	2500      	movs	r5, #0
 800691c:	f104 0619 	add.w	r6, r4, #25
 8006920:	e7f5      	b.n	800690e <_printf_i+0x22e>
 8006922:	bf00      	nop
 8006924:	08007d7d 	.word	0x08007d7d
 8006928:	08007d8e 	.word	0x08007d8e

0800692c <_scanf_chars>:
 800692c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006930:	4615      	mov	r5, r2
 8006932:	688a      	ldr	r2, [r1, #8]
 8006934:	4680      	mov	r8, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b932      	cbnz	r2, 8006948 <_scanf_chars+0x1c>
 800693a:	698a      	ldr	r2, [r1, #24]
 800693c:	2a00      	cmp	r2, #0
 800693e:	bf0c      	ite	eq
 8006940:	2201      	moveq	r2, #1
 8006942:	f04f 32ff 	movne.w	r2, #4294967295
 8006946:	608a      	str	r2, [r1, #8]
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80069dc <_scanf_chars+0xb0>
 800694e:	06d1      	lsls	r1, r2, #27
 8006950:	bf5f      	itttt	pl
 8006952:	681a      	ldrpl	r2, [r3, #0]
 8006954:	1d11      	addpl	r1, r2, #4
 8006956:	6019      	strpl	r1, [r3, #0]
 8006958:	6816      	ldrpl	r6, [r2, #0]
 800695a:	2700      	movs	r7, #0
 800695c:	69a0      	ldr	r0, [r4, #24]
 800695e:	b188      	cbz	r0, 8006984 <_scanf_chars+0x58>
 8006960:	2801      	cmp	r0, #1
 8006962:	d107      	bne.n	8006974 <_scanf_chars+0x48>
 8006964:	682a      	ldr	r2, [r5, #0]
 8006966:	7811      	ldrb	r1, [r2, #0]
 8006968:	6962      	ldr	r2, [r4, #20]
 800696a:	5c52      	ldrb	r2, [r2, r1]
 800696c:	b952      	cbnz	r2, 8006984 <_scanf_chars+0x58>
 800696e:	2f00      	cmp	r7, #0
 8006970:	d031      	beq.n	80069d6 <_scanf_chars+0xaa>
 8006972:	e022      	b.n	80069ba <_scanf_chars+0x8e>
 8006974:	2802      	cmp	r0, #2
 8006976:	d120      	bne.n	80069ba <_scanf_chars+0x8e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006980:	071b      	lsls	r3, r3, #28
 8006982:	d41a      	bmi.n	80069ba <_scanf_chars+0x8e>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	06da      	lsls	r2, r3, #27
 8006988:	bf5e      	ittt	pl
 800698a:	682b      	ldrpl	r3, [r5, #0]
 800698c:	781b      	ldrbpl	r3, [r3, #0]
 800698e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006992:	682a      	ldr	r2, [r5, #0]
 8006994:	686b      	ldr	r3, [r5, #4]
 8006996:	3201      	adds	r2, #1
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	68a2      	ldr	r2, [r4, #8]
 800699c:	3b01      	subs	r3, #1
 800699e:	3a01      	subs	r2, #1
 80069a0:	606b      	str	r3, [r5, #4]
 80069a2:	3701      	adds	r7, #1
 80069a4:	60a2      	str	r2, [r4, #8]
 80069a6:	b142      	cbz	r2, 80069ba <_scanf_chars+0x8e>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dcd7      	bgt.n	800695c <_scanf_chars+0x30>
 80069ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069b0:	4629      	mov	r1, r5
 80069b2:	4640      	mov	r0, r8
 80069b4:	4798      	blx	r3
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d0d0      	beq.n	800695c <_scanf_chars+0x30>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f013 0310 	ands.w	r3, r3, #16
 80069c0:	d105      	bne.n	80069ce <_scanf_chars+0xa2>
 80069c2:	68e2      	ldr	r2, [r4, #12]
 80069c4:	3201      	adds	r2, #1
 80069c6:	60e2      	str	r2, [r4, #12]
 80069c8:	69a2      	ldr	r2, [r4, #24]
 80069ca:	b102      	cbz	r2, 80069ce <_scanf_chars+0xa2>
 80069cc:	7033      	strb	r3, [r6, #0]
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	443b      	add	r3, r7
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2000      	movs	r0, #0
 80069d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069da:	bf00      	nop
 80069dc:	08007a71 	.word	0x08007a71

080069e0 <_scanf_i>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	4698      	mov	r8, r3
 80069e6:	4b76      	ldr	r3, [pc, #472]	; (8006bc0 <_scanf_i+0x1e0>)
 80069e8:	460c      	mov	r4, r1
 80069ea:	4682      	mov	sl, r0
 80069ec:	4616      	mov	r6, r2
 80069ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069f2:	b087      	sub	sp, #28
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80069fa:	4b72      	ldr	r3, [pc, #456]	; (8006bc4 <_scanf_i+0x1e4>)
 80069fc:	69a1      	ldr	r1, [r4, #24]
 80069fe:	4a72      	ldr	r2, [pc, #456]	; (8006bc8 <_scanf_i+0x1e8>)
 8006a00:	2903      	cmp	r1, #3
 8006a02:	bf18      	it	ne
 8006a04:	461a      	movne	r2, r3
 8006a06:	68a3      	ldr	r3, [r4, #8]
 8006a08:	9201      	str	r2, [sp, #4]
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a10:	bf88      	it	hi
 8006a12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a16:	4627      	mov	r7, r4
 8006a18:	bf82      	ittt	hi
 8006a1a:	eb03 0905 	addhi.w	r9, r3, r5
 8006a1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a22:	60a3      	strhi	r3, [r4, #8]
 8006a24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006a28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006a2c:	bf98      	it	ls
 8006a2e:	f04f 0900 	movls.w	r9, #0
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	463d      	mov	r5, r7
 8006a36:	f04f 0b00 	mov.w	fp, #0
 8006a3a:	6831      	ldr	r1, [r6, #0]
 8006a3c:	ab03      	add	r3, sp, #12
 8006a3e:	7809      	ldrb	r1, [r1, #0]
 8006a40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f7f9 fbd3 	bl	80001f0 <memchr>
 8006a4a:	b328      	cbz	r0, 8006a98 <_scanf_i+0xb8>
 8006a4c:	f1bb 0f01 	cmp.w	fp, #1
 8006a50:	d159      	bne.n	8006b06 <_scanf_i+0x126>
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	b92a      	cbnz	r2, 8006a62 <_scanf_i+0x82>
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	6022      	str	r2, [r4, #0]
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006a68:	6022      	str	r2, [r4, #0]
 8006a6a:	68a2      	ldr	r2, [r4, #8]
 8006a6c:	1e51      	subs	r1, r2, #1
 8006a6e:	60a1      	str	r1, [r4, #8]
 8006a70:	b192      	cbz	r2, 8006a98 <_scanf_i+0xb8>
 8006a72:	6832      	ldr	r2, [r6, #0]
 8006a74:	1c51      	adds	r1, r2, #1
 8006a76:	6031      	str	r1, [r6, #0]
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	f805 2b01 	strb.w	r2, [r5], #1
 8006a7e:	6872      	ldr	r2, [r6, #4]
 8006a80:	3a01      	subs	r2, #1
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	6072      	str	r2, [r6, #4]
 8006a86:	dc07      	bgt.n	8006a98 <_scanf_i+0xb8>
 8006a88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4650      	mov	r0, sl
 8006a90:	4790      	blx	r2
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 8085 	bne.w	8006ba2 <_scanf_i+0x1c2>
 8006a98:	f10b 0b01 	add.w	fp, fp, #1
 8006a9c:	f1bb 0f03 	cmp.w	fp, #3
 8006aa0:	d1cb      	bne.n	8006a3a <_scanf_i+0x5a>
 8006aa2:	6863      	ldr	r3, [r4, #4]
 8006aa4:	b90b      	cbnz	r3, 8006aaa <_scanf_i+0xca>
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	4947      	ldr	r1, [pc, #284]	; (8006bcc <_scanf_i+0x1ec>)
 8006aae:	6960      	ldr	r0, [r4, #20]
 8006ab0:	1ac9      	subs	r1, r1, r3
 8006ab2:	f000 f8b9 	bl	8006c28 <__sccl>
 8006ab6:	f04f 0b00 	mov.w	fp, #0
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d03d      	beq.n	8006b3e <_scanf_i+0x15e>
 8006ac2:	6831      	ldr	r1, [r6, #0]
 8006ac4:	6960      	ldr	r0, [r4, #20]
 8006ac6:	f891 c000 	ldrb.w	ip, [r1]
 8006aca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d035      	beq.n	8006b3e <_scanf_i+0x15e>
 8006ad2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006ad6:	d124      	bne.n	8006b22 <_scanf_i+0x142>
 8006ad8:	0510      	lsls	r0, r2, #20
 8006ada:	d522      	bpl.n	8006b22 <_scanf_i+0x142>
 8006adc:	f10b 0b01 	add.w	fp, fp, #1
 8006ae0:	f1b9 0f00 	cmp.w	r9, #0
 8006ae4:	d003      	beq.n	8006aee <_scanf_i+0x10e>
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6873      	ldr	r3, [r6, #4]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	6073      	str	r3, [r6, #4]
 8006af6:	dd1b      	ble.n	8006b30 <_scanf_i+0x150>
 8006af8:	6833      	ldr	r3, [r6, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	6033      	str	r3, [r6, #0]
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	60a3      	str	r3, [r4, #8]
 8006b04:	e7d9      	b.n	8006aba <_scanf_i+0xda>
 8006b06:	f1bb 0f02 	cmp.w	fp, #2
 8006b0a:	d1ae      	bne.n	8006a6a <_scanf_i+0x8a>
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006b12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006b16:	d1bf      	bne.n	8006a98 <_scanf_i+0xb8>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	6063      	str	r3, [r4, #4]
 8006b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b20:	e7a2      	b.n	8006a68 <_scanf_i+0x88>
 8006b22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006b26:	6022      	str	r2, [r4, #0]
 8006b28:	780b      	ldrb	r3, [r1, #0]
 8006b2a:	f805 3b01 	strb.w	r3, [r5], #1
 8006b2e:	e7de      	b.n	8006aee <_scanf_i+0x10e>
 8006b30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b34:	4631      	mov	r1, r6
 8006b36:	4650      	mov	r0, sl
 8006b38:	4798      	blx	r3
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d0df      	beq.n	8006afe <_scanf_i+0x11e>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	05db      	lsls	r3, r3, #23
 8006b42:	d50d      	bpl.n	8006b60 <_scanf_i+0x180>
 8006b44:	42bd      	cmp	r5, r7
 8006b46:	d909      	bls.n	8006b5c <_scanf_i+0x17c>
 8006b48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b50:	4632      	mov	r2, r6
 8006b52:	4650      	mov	r0, sl
 8006b54:	4798      	blx	r3
 8006b56:	f105 39ff 	add.w	r9, r5, #4294967295
 8006b5a:	464d      	mov	r5, r9
 8006b5c:	42bd      	cmp	r5, r7
 8006b5e:	d02d      	beq.n	8006bbc <_scanf_i+0x1dc>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	f012 0210 	ands.w	r2, r2, #16
 8006b66:	d113      	bne.n	8006b90 <_scanf_i+0x1b0>
 8006b68:	702a      	strb	r2, [r5, #0]
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	9e01      	ldr	r6, [sp, #4]
 8006b6e:	4639      	mov	r1, r7
 8006b70:	4650      	mov	r0, sl
 8006b72:	47b0      	blx	r6
 8006b74:	6821      	ldr	r1, [r4, #0]
 8006b76:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7a:	f011 0f20 	tst.w	r1, #32
 8006b7e:	d013      	beq.n	8006ba8 <_scanf_i+0x1c8>
 8006b80:	1d1a      	adds	r2, r3, #4
 8006b82:	f8c8 2000 	str.w	r2, [r8]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6018      	str	r0, [r3, #0]
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60e3      	str	r3, [r4, #12]
 8006b90:	1bed      	subs	r5, r5, r7
 8006b92:	44ab      	add	fp, r5
 8006b94:	6925      	ldr	r5, [r4, #16]
 8006b96:	445d      	add	r5, fp
 8006b98:	6125      	str	r5, [r4, #16]
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	b007      	add	sp, #28
 8006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	f04f 0b00 	mov.w	fp, #0
 8006ba6:	e7ca      	b.n	8006b3e <_scanf_i+0x15e>
 8006ba8:	1d1a      	adds	r2, r3, #4
 8006baa:	f8c8 2000 	str.w	r2, [r8]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f011 0f01 	tst.w	r1, #1
 8006bb4:	bf14      	ite	ne
 8006bb6:	8018      	strhne	r0, [r3, #0]
 8006bb8:	6018      	streq	r0, [r3, #0]
 8006bba:	e7e6      	b.n	8006b8a <_scanf_i+0x1aa>
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	e7ed      	b.n	8006b9c <_scanf_i+0x1bc>
 8006bc0:	080079e4 	.word	0x080079e4
 8006bc4:	08006d7d 	.word	0x08006d7d
 8006bc8:	08004d45 	.word	0x08004d45
 8006bcc:	08007db8 	.word	0x08007db8

08006bd0 <_read_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d07      	ldr	r5, [pc, #28]	; (8006bf0 <_read_r+0x20>)
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4611      	mov	r1, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f7fa fe34 	bl	800184c <_read>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_read_r+0x1e>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_read_r+0x1e>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20000394 	.word	0x20000394
 8006bf4:	00000000 	.word	0x00000000

08006bf8 <nan>:
 8006bf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006c00 <nan+0x8>
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	00000000 	.word	0x00000000
 8006c04:	7ff80000 	.word	0x7ff80000

08006c08 <_sbrk_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d06      	ldr	r5, [pc, #24]	; (8006c24 <_sbrk_r+0x1c>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	f7fa fe88 	bl	8001928 <_sbrk>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_sbrk_r+0x1a>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_sbrk_r+0x1a>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000394 	.word	0x20000394

08006c28 <__sccl>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	780b      	ldrb	r3, [r1, #0]
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	2b5e      	cmp	r3, #94	; 0x5e
 8006c30:	bf0b      	itete	eq
 8006c32:	784b      	ldrbeq	r3, [r1, #1]
 8006c34:	1c48      	addne	r0, r1, #1
 8006c36:	1c88      	addeq	r0, r1, #2
 8006c38:	2200      	movne	r2, #0
 8006c3a:	bf08      	it	eq
 8006c3c:	2201      	moveq	r2, #1
 8006c3e:	1e61      	subs	r1, r4, #1
 8006c40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006c44:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006c48:	42a9      	cmp	r1, r5
 8006c4a:	d1fb      	bne.n	8006c44 <__sccl+0x1c>
 8006c4c:	b90b      	cbnz	r3, 8006c52 <__sccl+0x2a>
 8006c4e:	3801      	subs	r0, #1
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	f082 0201 	eor.w	r2, r2, #1
 8006c56:	54e2      	strb	r2, [r4, r3]
 8006c58:	4605      	mov	r5, r0
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006c60:	292d      	cmp	r1, #45	; 0x2d
 8006c62:	d006      	beq.n	8006c72 <__sccl+0x4a>
 8006c64:	295d      	cmp	r1, #93	; 0x5d
 8006c66:	d0f3      	beq.n	8006c50 <__sccl+0x28>
 8006c68:	b909      	cbnz	r1, 8006c6e <__sccl+0x46>
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	e7f0      	b.n	8006c50 <__sccl+0x28>
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e7f1      	b.n	8006c56 <__sccl+0x2e>
 8006c72:	786e      	ldrb	r6, [r5, #1]
 8006c74:	2e5d      	cmp	r6, #93	; 0x5d
 8006c76:	d0fa      	beq.n	8006c6e <__sccl+0x46>
 8006c78:	42b3      	cmp	r3, r6
 8006c7a:	dcf8      	bgt.n	8006c6e <__sccl+0x46>
 8006c7c:	3502      	adds	r5, #2
 8006c7e:	4619      	mov	r1, r3
 8006c80:	3101      	adds	r1, #1
 8006c82:	428e      	cmp	r6, r1
 8006c84:	5462      	strb	r2, [r4, r1]
 8006c86:	dcfb      	bgt.n	8006c80 <__sccl+0x58>
 8006c88:	1af1      	subs	r1, r6, r3
 8006c8a:	3901      	subs	r1, #1
 8006c8c:	1c58      	adds	r0, r3, #1
 8006c8e:	42b3      	cmp	r3, r6
 8006c90:	bfa8      	it	ge
 8006c92:	2100      	movge	r1, #0
 8006c94:	1843      	adds	r3, r0, r1
 8006c96:	e7e0      	b.n	8006c5a <__sccl+0x32>

08006c98 <_strtoul_l.constprop.0>:
 8006c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c9c:	4f36      	ldr	r7, [pc, #216]	; (8006d78 <_strtoul_l.constprop.0+0xe0>)
 8006c9e:	4686      	mov	lr, r0
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ca8:	5de6      	ldrb	r6, [r4, r7]
 8006caa:	f016 0608 	ands.w	r6, r6, #8
 8006cae:	d1f8      	bne.n	8006ca2 <_strtoul_l.constprop.0+0xa>
 8006cb0:	2c2d      	cmp	r4, #45	; 0x2d
 8006cb2:	d12f      	bne.n	8006d14 <_strtoul_l.constprop.0+0x7c>
 8006cb4:	782c      	ldrb	r4, [r5, #0]
 8006cb6:	2601      	movs	r6, #1
 8006cb8:	1c85      	adds	r5, r0, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d057      	beq.n	8006d6e <_strtoul_l.constprop.0+0xd6>
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d109      	bne.n	8006cd6 <_strtoul_l.constprop.0+0x3e>
 8006cc2:	2c30      	cmp	r4, #48	; 0x30
 8006cc4:	d107      	bne.n	8006cd6 <_strtoul_l.constprop.0+0x3e>
 8006cc6:	7828      	ldrb	r0, [r5, #0]
 8006cc8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006ccc:	2858      	cmp	r0, #88	; 0x58
 8006cce:	d149      	bne.n	8006d64 <_strtoul_l.constprop.0+0xcc>
 8006cd0:	786c      	ldrb	r4, [r5, #1]
 8006cd2:	2310      	movs	r3, #16
 8006cd4:	3502      	adds	r5, #2
 8006cd6:	f04f 38ff 	mov.w	r8, #4294967295
 8006cda:	2700      	movs	r7, #0
 8006cdc:	fbb8 f8f3 	udiv	r8, r8, r3
 8006ce0:	fb03 f908 	mul.w	r9, r3, r8
 8006ce4:	ea6f 0909 	mvn.w	r9, r9
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006cee:	f1bc 0f09 	cmp.w	ip, #9
 8006cf2:	d814      	bhi.n	8006d1e <_strtoul_l.constprop.0+0x86>
 8006cf4:	4664      	mov	r4, ip
 8006cf6:	42a3      	cmp	r3, r4
 8006cf8:	dd22      	ble.n	8006d40 <_strtoul_l.constprop.0+0xa8>
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	db1d      	blt.n	8006d3a <_strtoul_l.constprop.0+0xa2>
 8006cfe:	4580      	cmp	r8, r0
 8006d00:	d31b      	bcc.n	8006d3a <_strtoul_l.constprop.0+0xa2>
 8006d02:	d101      	bne.n	8006d08 <_strtoul_l.constprop.0+0x70>
 8006d04:	45a1      	cmp	r9, r4
 8006d06:	db18      	blt.n	8006d3a <_strtoul_l.constprop.0+0xa2>
 8006d08:	fb00 4003 	mla	r0, r0, r3, r4
 8006d0c:	2701      	movs	r7, #1
 8006d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d12:	e7ea      	b.n	8006cea <_strtoul_l.constprop.0+0x52>
 8006d14:	2c2b      	cmp	r4, #43	; 0x2b
 8006d16:	bf04      	itt	eq
 8006d18:	782c      	ldrbeq	r4, [r5, #0]
 8006d1a:	1c85      	addeq	r5, r0, #2
 8006d1c:	e7cd      	b.n	8006cba <_strtoul_l.constprop.0+0x22>
 8006d1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d22:	f1bc 0f19 	cmp.w	ip, #25
 8006d26:	d801      	bhi.n	8006d2c <_strtoul_l.constprop.0+0x94>
 8006d28:	3c37      	subs	r4, #55	; 0x37
 8006d2a:	e7e4      	b.n	8006cf6 <_strtoul_l.constprop.0+0x5e>
 8006d2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006d30:	f1bc 0f19 	cmp.w	ip, #25
 8006d34:	d804      	bhi.n	8006d40 <_strtoul_l.constprop.0+0xa8>
 8006d36:	3c57      	subs	r4, #87	; 0x57
 8006d38:	e7dd      	b.n	8006cf6 <_strtoul_l.constprop.0+0x5e>
 8006d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8006d3e:	e7e6      	b.n	8006d0e <_strtoul_l.constprop.0+0x76>
 8006d40:	2f00      	cmp	r7, #0
 8006d42:	da07      	bge.n	8006d54 <_strtoul_l.constprop.0+0xbc>
 8006d44:	2322      	movs	r3, #34	; 0x22
 8006d46:	f8ce 3000 	str.w	r3, [lr]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	b932      	cbnz	r2, 8006d5e <_strtoul_l.constprop.0+0xc6>
 8006d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d54:	b106      	cbz	r6, 8006d58 <_strtoul_l.constprop.0+0xc0>
 8006d56:	4240      	negs	r0, r0
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	d0f9      	beq.n	8006d50 <_strtoul_l.constprop.0+0xb8>
 8006d5c:	b107      	cbz	r7, 8006d60 <_strtoul_l.constprop.0+0xc8>
 8006d5e:	1e69      	subs	r1, r5, #1
 8006d60:	6011      	str	r1, [r2, #0]
 8006d62:	e7f5      	b.n	8006d50 <_strtoul_l.constprop.0+0xb8>
 8006d64:	2430      	movs	r4, #48	; 0x30
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1b5      	bne.n	8006cd6 <_strtoul_l.constprop.0+0x3e>
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	e7b3      	b.n	8006cd6 <_strtoul_l.constprop.0+0x3e>
 8006d6e:	2c30      	cmp	r4, #48	; 0x30
 8006d70:	d0a9      	beq.n	8006cc6 <_strtoul_l.constprop.0+0x2e>
 8006d72:	230a      	movs	r3, #10
 8006d74:	e7af      	b.n	8006cd6 <_strtoul_l.constprop.0+0x3e>
 8006d76:	bf00      	nop
 8006d78:	08007a71 	.word	0x08007a71

08006d7c <_strtoul_r>:
 8006d7c:	f7ff bf8c 	b.w	8006c98 <_strtoul_l.constprop.0>

08006d80 <__submore>:
 8006d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	460c      	mov	r4, r1
 8006d86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d8c:	4299      	cmp	r1, r3
 8006d8e:	d11d      	bne.n	8006dcc <__submore+0x4c>
 8006d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d94:	f7ff f894 	bl	8005ec0 <_malloc_r>
 8006d98:	b918      	cbnz	r0, 8006da2 <__submore+0x22>
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da6:	63a3      	str	r3, [r4, #56]	; 0x38
 8006da8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006dac:	6360      	str	r0, [r4, #52]	; 0x34
 8006dae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006db2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006db6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006dba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006dbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006dc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006dc6:	6020      	str	r0, [r4, #0]
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e7e8      	b.n	8006d9e <__submore+0x1e>
 8006dcc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006dce:	0077      	lsls	r7, r6, #1
 8006dd0:	463a      	mov	r2, r7
 8006dd2:	f000 fa81 	bl	80072d8 <_realloc_r>
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d0de      	beq.n	8006d9a <__submore+0x1a>
 8006ddc:	eb00 0806 	add.w	r8, r0, r6
 8006de0:	4601      	mov	r1, r0
 8006de2:	4632      	mov	r2, r6
 8006de4:	4640      	mov	r0, r8
 8006de6:	f7fe fb65 	bl	80054b4 <memcpy>
 8006dea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006dee:	f8c4 8000 	str.w	r8, [r4]
 8006df2:	e7e9      	b.n	8006dc8 <__submore+0x48>

08006df4 <__ascii_wctomb>:
 8006df4:	b149      	cbz	r1, 8006e0a <__ascii_wctomb+0x16>
 8006df6:	2aff      	cmp	r2, #255	; 0xff
 8006df8:	bf85      	ittet	hi
 8006dfa:	238a      	movhi	r3, #138	; 0x8a
 8006dfc:	6003      	strhi	r3, [r0, #0]
 8006dfe:	700a      	strbls	r2, [r1, #0]
 8006e00:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e04:	bf98      	it	ls
 8006e06:	2001      	movls	r0, #1
 8006e08:	4770      	bx	lr
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	4770      	bx	lr
	...

08006e10 <__assert_func>:
 8006e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e12:	4614      	mov	r4, r2
 8006e14:	461a      	mov	r2, r3
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <__assert_func+0x2c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	68d8      	ldr	r0, [r3, #12]
 8006e1e:	b14c      	cbz	r4, 8006e34 <__assert_func+0x24>
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <__assert_func+0x30>)
 8006e22:	9100      	str	r1, [sp, #0]
 8006e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e28:	4906      	ldr	r1, [pc, #24]	; (8006e44 <__assert_func+0x34>)
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	f000 f9a6 	bl	800717c <fiprintf>
 8006e30:	f000 fc9a 	bl	8007768 <abort>
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <__assert_func+0x38>)
 8006e36:	461c      	mov	r4, r3
 8006e38:	e7f3      	b.n	8006e22 <__assert_func+0x12>
 8006e3a:	bf00      	nop
 8006e3c:	2000000c 	.word	0x2000000c
 8006e40:	08007dba 	.word	0x08007dba
 8006e44:	08007dc7 	.word	0x08007dc7
 8006e48:	08007df5 	.word	0x08007df5

08006e4c <__sflush_r>:
 8006e4c:	898a      	ldrh	r2, [r1, #12]
 8006e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	4605      	mov	r5, r0
 8006e54:	0710      	lsls	r0, r2, #28
 8006e56:	460c      	mov	r4, r1
 8006e58:	d458      	bmi.n	8006f0c <__sflush_r+0xc0>
 8006e5a:	684b      	ldr	r3, [r1, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc05      	bgt.n	8006e6c <__sflush_r+0x20>
 8006e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dc02      	bgt.n	8006e6c <__sflush_r+0x20>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d0f9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e78:	682f      	ldr	r7, [r5, #0]
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	d032      	beq.n	8006ee4 <__sflush_r+0x98>
 8006e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	075a      	lsls	r2, r3, #29
 8006e84:	d505      	bpl.n	8006e92 <__sflush_r+0x46>
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	1ac0      	subs	r0, r0, r3
 8006e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e8c:	b10b      	cbz	r3, 8006e92 <__sflush_r+0x46>
 8006e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e90:	1ac0      	subs	r0, r0, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	4602      	mov	r2, r0
 8006e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e98:	6a21      	ldr	r1, [r4, #32]
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b0      	blx	r6
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	d106      	bne.n	8006eb2 <__sflush_r+0x66>
 8006ea4:	6829      	ldr	r1, [r5, #0]
 8006ea6:	291d      	cmp	r1, #29
 8006ea8:	d82c      	bhi.n	8006f04 <__sflush_r+0xb8>
 8006eaa:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <__sflush_r+0x108>)
 8006eac:	40ca      	lsrs	r2, r1
 8006eae:	07d6      	lsls	r6, r2, #31
 8006eb0:	d528      	bpl.n	8006f04 <__sflush_r+0xb8>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	6062      	str	r2, [r4, #4]
 8006eb6:	04d9      	lsls	r1, r3, #19
 8006eb8:	6922      	ldr	r2, [r4, #16]
 8006eba:	6022      	str	r2, [r4, #0]
 8006ebc:	d504      	bpl.n	8006ec8 <__sflush_r+0x7c>
 8006ebe:	1c42      	adds	r2, r0, #1
 8006ec0:	d101      	bne.n	8006ec6 <__sflush_r+0x7a>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	b903      	cbnz	r3, 8006ec8 <__sflush_r+0x7c>
 8006ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eca:	602f      	str	r7, [r5, #0]
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d0ca      	beq.n	8006e66 <__sflush_r+0x1a>
 8006ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	d002      	beq.n	8006ede <__sflush_r+0x92>
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f000 f9b1 	bl	8007240 <_free_r>
 8006ede:	2000      	movs	r0, #0
 8006ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ee2:	e7c1      	b.n	8006e68 <__sflush_r+0x1c>
 8006ee4:	6a21      	ldr	r1, [r4, #32]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b0      	blx	r6
 8006eec:	1c41      	adds	r1, r0, #1
 8006eee:	d1c7      	bne.n	8006e80 <__sflush_r+0x34>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0c4      	beq.n	8006e80 <__sflush_r+0x34>
 8006ef6:	2b1d      	cmp	r3, #29
 8006ef8:	d001      	beq.n	8006efe <__sflush_r+0xb2>
 8006efa:	2b16      	cmp	r3, #22
 8006efc:	d101      	bne.n	8006f02 <__sflush_r+0xb6>
 8006efe:	602f      	str	r7, [r5, #0]
 8006f00:	e7b1      	b.n	8006e66 <__sflush_r+0x1a>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e7ad      	b.n	8006e68 <__sflush_r+0x1c>
 8006f0c:	690f      	ldr	r7, [r1, #16]
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	d0a9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006f12:	0793      	lsls	r3, r2, #30
 8006f14:	680e      	ldr	r6, [r1, #0]
 8006f16:	bf08      	it	eq
 8006f18:	694b      	ldreq	r3, [r1, #20]
 8006f1a:	600f      	str	r7, [r1, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	2300      	movne	r3, #0
 8006f20:	eba6 0807 	sub.w	r8, r6, r7
 8006f24:	608b      	str	r3, [r1, #8]
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	dd9c      	ble.n	8006e66 <__sflush_r+0x1a>
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f30:	4643      	mov	r3, r8
 8006f32:	463a      	mov	r2, r7
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b0      	blx	r6
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dc06      	bgt.n	8006f4a <__sflush_r+0xfe>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	e78e      	b.n	8006e68 <__sflush_r+0x1c>
 8006f4a:	4407      	add	r7, r0
 8006f4c:	eba8 0800 	sub.w	r8, r8, r0
 8006f50:	e7e9      	b.n	8006f26 <__sflush_r+0xda>
 8006f52:	bf00      	nop
 8006f54:	20400001 	.word	0x20400001

08006f58 <_fflush_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b913      	cbnz	r3, 8006f68 <_fflush_r+0x10>
 8006f62:	2500      	movs	r5, #0
 8006f64:	4628      	mov	r0, r5
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	b118      	cbz	r0, 8006f72 <_fflush_r+0x1a>
 8006f6a:	6983      	ldr	r3, [r0, #24]
 8006f6c:	b90b      	cbnz	r3, 8006f72 <_fflush_r+0x1a>
 8006f6e:	f000 f887 	bl	8007080 <__sinit>
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <_fflush_r+0x6c>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	d11b      	bne.n	8006fb0 <_fflush_r+0x58>
 8006f78:	686c      	ldr	r4, [r5, #4]
 8006f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0ef      	beq.n	8006f62 <_fflush_r+0xa>
 8006f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f84:	07d0      	lsls	r0, r2, #31
 8006f86:	d404      	bmi.n	8006f92 <_fflush_r+0x3a>
 8006f88:	0599      	lsls	r1, r3, #22
 8006f8a:	d402      	bmi.n	8006f92 <_fflush_r+0x3a>
 8006f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f8e:	f000 f927 	bl	80071e0 <__retarget_lock_acquire_recursive>
 8006f92:	4628      	mov	r0, r5
 8006f94:	4621      	mov	r1, r4
 8006f96:	f7ff ff59 	bl	8006e4c <__sflush_r>
 8006f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f9c:	07da      	lsls	r2, r3, #31
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	d4e0      	bmi.n	8006f64 <_fflush_r+0xc>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	059b      	lsls	r3, r3, #22
 8006fa6:	d4dd      	bmi.n	8006f64 <_fflush_r+0xc>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006faa:	f000 f91a 	bl	80071e2 <__retarget_lock_release_recursive>
 8006fae:	e7d9      	b.n	8006f64 <_fflush_r+0xc>
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <_fflush_r+0x70>)
 8006fb2:	429c      	cmp	r4, r3
 8006fb4:	d101      	bne.n	8006fba <_fflush_r+0x62>
 8006fb6:	68ac      	ldr	r4, [r5, #8]
 8006fb8:	e7df      	b.n	8006f7a <_fflush_r+0x22>
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <_fflush_r+0x74>)
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	bf08      	it	eq
 8006fc0:	68ec      	ldreq	r4, [r5, #12]
 8006fc2:	e7da      	b.n	8006f7a <_fflush_r+0x22>
 8006fc4:	08007e18 	.word	0x08007e18
 8006fc8:	08007e38 	.word	0x08007e38
 8006fcc:	08007df8 	.word	0x08007df8

08006fd0 <std>:
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fde:	6083      	str	r3, [r0, #8]
 8006fe0:	8181      	strh	r1, [r0, #12]
 8006fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fe4:	81c2      	strh	r2, [r0, #14]
 8006fe6:	6183      	str	r3, [r0, #24]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	2208      	movs	r2, #8
 8006fec:	305c      	adds	r0, #92	; 0x5c
 8006fee:	f7fc fd39 	bl	8003a64 <memset>
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <std+0x38>)
 8006ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ff6:	4b05      	ldr	r3, [pc, #20]	; (800700c <std+0x3c>)
 8006ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <std+0x40>)
 8006ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <std+0x44>)
 8007000:	6224      	str	r4, [r4, #32]
 8007002:	6323      	str	r3, [r4, #48]	; 0x30
 8007004:	bd10      	pop	{r4, pc}
 8007006:	bf00      	nop
 8007008:	08003f39 	.word	0x08003f39
 800700c:	08003f5f 	.word	0x08003f5f
 8007010:	08003f97 	.word	0x08003f97
 8007014:	08003fbb 	.word	0x08003fbb

08007018 <_cleanup_r>:
 8007018:	4901      	ldr	r1, [pc, #4]	; (8007020 <_cleanup_r+0x8>)
 800701a:	f000 b8c1 	b.w	80071a0 <_fwalk_reent>
 800701e:	bf00      	nop
 8007020:	08006f59 	.word	0x08006f59

08007024 <__sfmoreglue>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	2268      	movs	r2, #104	; 0x68
 8007028:	1e4d      	subs	r5, r1, #1
 800702a:	4355      	muls	r5, r2
 800702c:	460e      	mov	r6, r1
 800702e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007032:	f7fe ff45 	bl	8005ec0 <_malloc_r>
 8007036:	4604      	mov	r4, r0
 8007038:	b140      	cbz	r0, 800704c <__sfmoreglue+0x28>
 800703a:	2100      	movs	r1, #0
 800703c:	e9c0 1600 	strd	r1, r6, [r0]
 8007040:	300c      	adds	r0, #12
 8007042:	60a0      	str	r0, [r4, #8]
 8007044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007048:	f7fc fd0c 	bl	8003a64 <memset>
 800704c:	4620      	mov	r0, r4
 800704e:	bd70      	pop	{r4, r5, r6, pc}

08007050 <__sfp_lock_acquire>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__sfp_lock_acquire+0x8>)
 8007052:	f000 b8c5 	b.w	80071e0 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	20000399 	.word	0x20000399

0800705c <__sfp_lock_release>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__sfp_lock_release+0x8>)
 800705e:	f000 b8c0 	b.w	80071e2 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	20000399 	.word	0x20000399

08007068 <__sinit_lock_acquire>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__sinit_lock_acquire+0x8>)
 800706a:	f000 b8b9 	b.w	80071e0 <__retarget_lock_acquire_recursive>
 800706e:	bf00      	nop
 8007070:	2000039a 	.word	0x2000039a

08007074 <__sinit_lock_release>:
 8007074:	4801      	ldr	r0, [pc, #4]	; (800707c <__sinit_lock_release+0x8>)
 8007076:	f000 b8b4 	b.w	80071e2 <__retarget_lock_release_recursive>
 800707a:	bf00      	nop
 800707c:	2000039a 	.word	0x2000039a

08007080 <__sinit>:
 8007080:	b510      	push	{r4, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	f7ff fff0 	bl	8007068 <__sinit_lock_acquire>
 8007088:	69a3      	ldr	r3, [r4, #24]
 800708a:	b11b      	cbz	r3, 8007094 <__sinit+0x14>
 800708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007090:	f7ff bff0 	b.w	8007074 <__sinit_lock_release>
 8007094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007098:	6523      	str	r3, [r4, #80]	; 0x50
 800709a:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <__sinit+0x68>)
 800709c:	4a13      	ldr	r2, [pc, #76]	; (80070ec <__sinit+0x6c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	bf04      	itt	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	61a3      	streq	r3, [r4, #24]
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 f820 	bl	80070f0 <__sfp>
 80070b0:	6060      	str	r0, [r4, #4]
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 f81c 	bl	80070f0 <__sfp>
 80070b8:	60a0      	str	r0, [r4, #8]
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 f818 	bl	80070f0 <__sfp>
 80070c0:	2200      	movs	r2, #0
 80070c2:	60e0      	str	r0, [r4, #12]
 80070c4:	2104      	movs	r1, #4
 80070c6:	6860      	ldr	r0, [r4, #4]
 80070c8:	f7ff ff82 	bl	8006fd0 <std>
 80070cc:	68a0      	ldr	r0, [r4, #8]
 80070ce:	2201      	movs	r2, #1
 80070d0:	2109      	movs	r1, #9
 80070d2:	f7ff ff7d 	bl	8006fd0 <std>
 80070d6:	68e0      	ldr	r0, [r4, #12]
 80070d8:	2202      	movs	r2, #2
 80070da:	2112      	movs	r1, #18
 80070dc:	f7ff ff78 	bl	8006fd0 <std>
 80070e0:	2301      	movs	r3, #1
 80070e2:	61a3      	str	r3, [r4, #24]
 80070e4:	e7d2      	b.n	800708c <__sinit+0xc>
 80070e6:	bf00      	nop
 80070e8:	08007a08 	.word	0x08007a08
 80070ec:	08007019 	.word	0x08007019

080070f0 <__sfp>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	4607      	mov	r7, r0
 80070f4:	f7ff ffac 	bl	8007050 <__sfp_lock_acquire>
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <__sfp+0x84>)
 80070fa:	681e      	ldr	r6, [r3, #0]
 80070fc:	69b3      	ldr	r3, [r6, #24]
 80070fe:	b913      	cbnz	r3, 8007106 <__sfp+0x16>
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff ffbd 	bl	8007080 <__sinit>
 8007106:	3648      	adds	r6, #72	; 0x48
 8007108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800710c:	3b01      	subs	r3, #1
 800710e:	d503      	bpl.n	8007118 <__sfp+0x28>
 8007110:	6833      	ldr	r3, [r6, #0]
 8007112:	b30b      	cbz	r3, 8007158 <__sfp+0x68>
 8007114:	6836      	ldr	r6, [r6, #0]
 8007116:	e7f7      	b.n	8007108 <__sfp+0x18>
 8007118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800711c:	b9d5      	cbnz	r5, 8007154 <__sfp+0x64>
 800711e:	4b16      	ldr	r3, [pc, #88]	; (8007178 <__sfp+0x88>)
 8007120:	60e3      	str	r3, [r4, #12]
 8007122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007126:	6665      	str	r5, [r4, #100]	; 0x64
 8007128:	f000 f859 	bl	80071de <__retarget_lock_init_recursive>
 800712c:	f7ff ff96 	bl	800705c <__sfp_lock_release>
 8007130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007138:	6025      	str	r5, [r4, #0]
 800713a:	61a5      	str	r5, [r4, #24]
 800713c:	2208      	movs	r2, #8
 800713e:	4629      	mov	r1, r5
 8007140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007144:	f7fc fc8e 	bl	8003a64 <memset>
 8007148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800714c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007150:	4620      	mov	r0, r4
 8007152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007154:	3468      	adds	r4, #104	; 0x68
 8007156:	e7d9      	b.n	800710c <__sfp+0x1c>
 8007158:	2104      	movs	r1, #4
 800715a:	4638      	mov	r0, r7
 800715c:	f7ff ff62 	bl	8007024 <__sfmoreglue>
 8007160:	4604      	mov	r4, r0
 8007162:	6030      	str	r0, [r6, #0]
 8007164:	2800      	cmp	r0, #0
 8007166:	d1d5      	bne.n	8007114 <__sfp+0x24>
 8007168:	f7ff ff78 	bl	800705c <__sfp_lock_release>
 800716c:	230c      	movs	r3, #12
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	e7ee      	b.n	8007150 <__sfp+0x60>
 8007172:	bf00      	nop
 8007174:	08007a08 	.word	0x08007a08
 8007178:	ffff0001 	.word	0xffff0001

0800717c <fiprintf>:
 800717c:	b40e      	push	{r1, r2, r3}
 800717e:	b503      	push	{r0, r1, lr}
 8007180:	4601      	mov	r1, r0
 8007182:	ab03      	add	r3, sp, #12
 8007184:	4805      	ldr	r0, [pc, #20]	; (800719c <fiprintf+0x20>)
 8007186:	f853 2b04 	ldr.w	r2, [r3], #4
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	f000 f8fb 	bl	8007388 <_vfiprintf_r>
 8007192:	b002      	add	sp, #8
 8007194:	f85d eb04 	ldr.w	lr, [sp], #4
 8007198:	b003      	add	sp, #12
 800719a:	4770      	bx	lr
 800719c:	2000000c 	.word	0x2000000c

080071a0 <_fwalk_reent>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	4606      	mov	r6, r0
 80071a6:	4688      	mov	r8, r1
 80071a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071ac:	2700      	movs	r7, #0
 80071ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b2:	f1b9 0901 	subs.w	r9, r9, #1
 80071b6:	d505      	bpl.n	80071c4 <_fwalk_reent+0x24>
 80071b8:	6824      	ldr	r4, [r4, #0]
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	d1f7      	bne.n	80071ae <_fwalk_reent+0xe>
 80071be:	4638      	mov	r0, r7
 80071c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c4:	89ab      	ldrh	r3, [r5, #12]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d907      	bls.n	80071da <_fwalk_reent+0x3a>
 80071ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071ce:	3301      	adds	r3, #1
 80071d0:	d003      	beq.n	80071da <_fwalk_reent+0x3a>
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	47c0      	blx	r8
 80071d8:	4307      	orrs	r7, r0
 80071da:	3568      	adds	r5, #104	; 0x68
 80071dc:	e7e9      	b.n	80071b2 <_fwalk_reent+0x12>

080071de <__retarget_lock_init_recursive>:
 80071de:	4770      	bx	lr

080071e0 <__retarget_lock_acquire_recursive>:
 80071e0:	4770      	bx	lr

080071e2 <__retarget_lock_release_recursive>:
 80071e2:	4770      	bx	lr

080071e4 <malloc>:
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <malloc+0xc>)
 80071e6:	4601      	mov	r1, r0
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	f7fe be69 	b.w	8005ec0 <_malloc_r>
 80071ee:	bf00      	nop
 80071f0:	2000000c 	.word	0x2000000c

080071f4 <memmove>:
 80071f4:	4288      	cmp	r0, r1
 80071f6:	b510      	push	{r4, lr}
 80071f8:	eb01 0402 	add.w	r4, r1, r2
 80071fc:	d902      	bls.n	8007204 <memmove+0x10>
 80071fe:	4284      	cmp	r4, r0
 8007200:	4623      	mov	r3, r4
 8007202:	d807      	bhi.n	8007214 <memmove+0x20>
 8007204:	1e43      	subs	r3, r0, #1
 8007206:	42a1      	cmp	r1, r4
 8007208:	d008      	beq.n	800721c <memmove+0x28>
 800720a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007212:	e7f8      	b.n	8007206 <memmove+0x12>
 8007214:	4402      	add	r2, r0
 8007216:	4601      	mov	r1, r0
 8007218:	428a      	cmp	r2, r1
 800721a:	d100      	bne.n	800721e <memmove+0x2a>
 800721c:	bd10      	pop	{r4, pc}
 800721e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007226:	e7f7      	b.n	8007218 <memmove+0x24>

08007228 <__malloc_lock>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__malloc_lock+0x8>)
 800722a:	f7ff bfd9 	b.w	80071e0 <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	20000398 	.word	0x20000398

08007234 <__malloc_unlock>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__malloc_unlock+0x8>)
 8007236:	f7ff bfd4 	b.w	80071e2 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	20000398 	.word	0x20000398

08007240 <_free_r>:
 8007240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007242:	2900      	cmp	r1, #0
 8007244:	d044      	beq.n	80072d0 <_free_r+0x90>
 8007246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724a:	9001      	str	r0, [sp, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f1a1 0404 	sub.w	r4, r1, #4
 8007252:	bfb8      	it	lt
 8007254:	18e4      	addlt	r4, r4, r3
 8007256:	f7ff ffe7 	bl	8007228 <__malloc_lock>
 800725a:	4a1e      	ldr	r2, [pc, #120]	; (80072d4 <_free_r+0x94>)
 800725c:	9801      	ldr	r0, [sp, #4]
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	b933      	cbnz	r3, 8007270 <_free_r+0x30>
 8007262:	6063      	str	r3, [r4, #4]
 8007264:	6014      	str	r4, [r2, #0]
 8007266:	b003      	add	sp, #12
 8007268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800726c:	f7ff bfe2 	b.w	8007234 <__malloc_unlock>
 8007270:	42a3      	cmp	r3, r4
 8007272:	d908      	bls.n	8007286 <_free_r+0x46>
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1961      	adds	r1, r4, r5
 8007278:	428b      	cmp	r3, r1
 800727a:	bf01      	itttt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	1949      	addeq	r1, r1, r5
 8007282:	6021      	streq	r1, [r4, #0]
 8007284:	e7ed      	b.n	8007262 <_free_r+0x22>
 8007286:	461a      	mov	r2, r3
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	b10b      	cbz	r3, 8007290 <_free_r+0x50>
 800728c:	42a3      	cmp	r3, r4
 800728e:	d9fa      	bls.n	8007286 <_free_r+0x46>
 8007290:	6811      	ldr	r1, [r2, #0]
 8007292:	1855      	adds	r5, r2, r1
 8007294:	42a5      	cmp	r5, r4
 8007296:	d10b      	bne.n	80072b0 <_free_r+0x70>
 8007298:	6824      	ldr	r4, [r4, #0]
 800729a:	4421      	add	r1, r4
 800729c:	1854      	adds	r4, r2, r1
 800729e:	42a3      	cmp	r3, r4
 80072a0:	6011      	str	r1, [r2, #0]
 80072a2:	d1e0      	bne.n	8007266 <_free_r+0x26>
 80072a4:	681c      	ldr	r4, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	6053      	str	r3, [r2, #4]
 80072aa:	4421      	add	r1, r4
 80072ac:	6011      	str	r1, [r2, #0]
 80072ae:	e7da      	b.n	8007266 <_free_r+0x26>
 80072b0:	d902      	bls.n	80072b8 <_free_r+0x78>
 80072b2:	230c      	movs	r3, #12
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	e7d6      	b.n	8007266 <_free_r+0x26>
 80072b8:	6825      	ldr	r5, [r4, #0]
 80072ba:	1961      	adds	r1, r4, r5
 80072bc:	428b      	cmp	r3, r1
 80072be:	bf04      	itt	eq
 80072c0:	6819      	ldreq	r1, [r3, #0]
 80072c2:	685b      	ldreq	r3, [r3, #4]
 80072c4:	6063      	str	r3, [r4, #4]
 80072c6:	bf04      	itt	eq
 80072c8:	1949      	addeq	r1, r1, r5
 80072ca:	6021      	streq	r1, [r4, #0]
 80072cc:	6054      	str	r4, [r2, #4]
 80072ce:	e7ca      	b.n	8007266 <_free_r+0x26>
 80072d0:	b003      	add	sp, #12
 80072d2:	bd30      	pop	{r4, r5, pc}
 80072d4:	2000038c 	.word	0x2000038c

080072d8 <_realloc_r>:
 80072d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072dc:	4680      	mov	r8, r0
 80072de:	4614      	mov	r4, r2
 80072e0:	460e      	mov	r6, r1
 80072e2:	b921      	cbnz	r1, 80072ee <_realloc_r+0x16>
 80072e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e8:	4611      	mov	r1, r2
 80072ea:	f7fe bde9 	b.w	8005ec0 <_malloc_r>
 80072ee:	b92a      	cbnz	r2, 80072fc <_realloc_r+0x24>
 80072f0:	f7ff ffa6 	bl	8007240 <_free_r>
 80072f4:	4625      	mov	r5, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	f000 faa0 	bl	8007840 <_malloc_usable_size_r>
 8007300:	4284      	cmp	r4, r0
 8007302:	4607      	mov	r7, r0
 8007304:	d802      	bhi.n	800730c <_realloc_r+0x34>
 8007306:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800730a:	d812      	bhi.n	8007332 <_realloc_r+0x5a>
 800730c:	4621      	mov	r1, r4
 800730e:	4640      	mov	r0, r8
 8007310:	f7fe fdd6 	bl	8005ec0 <_malloc_r>
 8007314:	4605      	mov	r5, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d0ed      	beq.n	80072f6 <_realloc_r+0x1e>
 800731a:	42bc      	cmp	r4, r7
 800731c:	4622      	mov	r2, r4
 800731e:	4631      	mov	r1, r6
 8007320:	bf28      	it	cs
 8007322:	463a      	movcs	r2, r7
 8007324:	f7fe f8c6 	bl	80054b4 <memcpy>
 8007328:	4631      	mov	r1, r6
 800732a:	4640      	mov	r0, r8
 800732c:	f7ff ff88 	bl	8007240 <_free_r>
 8007330:	e7e1      	b.n	80072f6 <_realloc_r+0x1e>
 8007332:	4635      	mov	r5, r6
 8007334:	e7df      	b.n	80072f6 <_realloc_r+0x1e>

08007336 <__sfputc_r>:
 8007336:	6893      	ldr	r3, [r2, #8]
 8007338:	3b01      	subs	r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	b410      	push	{r4}
 800733e:	6093      	str	r3, [r2, #8]
 8007340:	da08      	bge.n	8007354 <__sfputc_r+0x1e>
 8007342:	6994      	ldr	r4, [r2, #24]
 8007344:	42a3      	cmp	r3, r4
 8007346:	db01      	blt.n	800734c <__sfputc_r+0x16>
 8007348:	290a      	cmp	r1, #10
 800734a:	d103      	bne.n	8007354 <__sfputc_r+0x1e>
 800734c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007350:	f000 b94a 	b.w	80075e8 <__swbuf_r>
 8007354:	6813      	ldr	r3, [r2, #0]
 8007356:	1c58      	adds	r0, r3, #1
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	7019      	strb	r1, [r3, #0]
 800735c:	4608      	mov	r0, r1
 800735e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007362:	4770      	bx	lr

08007364 <__sfputs_r>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	4606      	mov	r6, r0
 8007368:	460f      	mov	r7, r1
 800736a:	4614      	mov	r4, r2
 800736c:	18d5      	adds	r5, r2, r3
 800736e:	42ac      	cmp	r4, r5
 8007370:	d101      	bne.n	8007376 <__sfputs_r+0x12>
 8007372:	2000      	movs	r0, #0
 8007374:	e007      	b.n	8007386 <__sfputs_r+0x22>
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	463a      	mov	r2, r7
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ffda 	bl	8007336 <__sfputc_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d1f3      	bne.n	800736e <__sfputs_r+0xa>
 8007386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007388 <_vfiprintf_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	460d      	mov	r5, r1
 800738e:	b09d      	sub	sp, #116	; 0x74
 8007390:	4614      	mov	r4, r2
 8007392:	4698      	mov	r8, r3
 8007394:	4606      	mov	r6, r0
 8007396:	b118      	cbz	r0, 80073a0 <_vfiprintf_r+0x18>
 8007398:	6983      	ldr	r3, [r0, #24]
 800739a:	b90b      	cbnz	r3, 80073a0 <_vfiprintf_r+0x18>
 800739c:	f7ff fe70 	bl	8007080 <__sinit>
 80073a0:	4b89      	ldr	r3, [pc, #548]	; (80075c8 <_vfiprintf_r+0x240>)
 80073a2:	429d      	cmp	r5, r3
 80073a4:	d11b      	bne.n	80073de <_vfiprintf_r+0x56>
 80073a6:	6875      	ldr	r5, [r6, #4]
 80073a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d405      	bmi.n	80073ba <_vfiprintf_r+0x32>
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	059a      	lsls	r2, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_vfiprintf_r+0x32>
 80073b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b6:	f7ff ff13 	bl	80071e0 <__retarget_lock_acquire_recursive>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	071b      	lsls	r3, r3, #28
 80073be:	d501      	bpl.n	80073c4 <_vfiprintf_r+0x3c>
 80073c0:	692b      	ldr	r3, [r5, #16]
 80073c2:	b9eb      	cbnz	r3, 8007400 <_vfiprintf_r+0x78>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4630      	mov	r0, r6
 80073c8:	f000 f960 	bl	800768c <__swsetup_r>
 80073cc:	b1c0      	cbz	r0, 8007400 <_vfiprintf_r+0x78>
 80073ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d0:	07dc      	lsls	r4, r3, #31
 80073d2:	d50e      	bpl.n	80073f2 <_vfiprintf_r+0x6a>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b01d      	add	sp, #116	; 0x74
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	4b7b      	ldr	r3, [pc, #492]	; (80075cc <_vfiprintf_r+0x244>)
 80073e0:	429d      	cmp	r5, r3
 80073e2:	d101      	bne.n	80073e8 <_vfiprintf_r+0x60>
 80073e4:	68b5      	ldr	r5, [r6, #8]
 80073e6:	e7df      	b.n	80073a8 <_vfiprintf_r+0x20>
 80073e8:	4b79      	ldr	r3, [pc, #484]	; (80075d0 <_vfiprintf_r+0x248>)
 80073ea:	429d      	cmp	r5, r3
 80073ec:	bf08      	it	eq
 80073ee:	68f5      	ldreq	r5, [r6, #12]
 80073f0:	e7da      	b.n	80073a8 <_vfiprintf_r+0x20>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	0598      	lsls	r0, r3, #22
 80073f6:	d4ed      	bmi.n	80073d4 <_vfiprintf_r+0x4c>
 80073f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073fa:	f7ff fef2 	bl	80071e2 <__retarget_lock_release_recursive>
 80073fe:	e7e9      	b.n	80073d4 <_vfiprintf_r+0x4c>
 8007400:	2300      	movs	r3, #0
 8007402:	9309      	str	r3, [sp, #36]	; 0x24
 8007404:	2320      	movs	r3, #32
 8007406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740a:	f8cd 800c 	str.w	r8, [sp, #12]
 800740e:	2330      	movs	r3, #48	; 0x30
 8007410:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075d4 <_vfiprintf_r+0x24c>
 8007414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007418:	f04f 0901 	mov.w	r9, #1
 800741c:	4623      	mov	r3, r4
 800741e:	469a      	mov	sl, r3
 8007420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007424:	b10a      	cbz	r2, 800742a <_vfiprintf_r+0xa2>
 8007426:	2a25      	cmp	r2, #37	; 0x25
 8007428:	d1f9      	bne.n	800741e <_vfiprintf_r+0x96>
 800742a:	ebba 0b04 	subs.w	fp, sl, r4
 800742e:	d00b      	beq.n	8007448 <_vfiprintf_r+0xc0>
 8007430:	465b      	mov	r3, fp
 8007432:	4622      	mov	r2, r4
 8007434:	4629      	mov	r1, r5
 8007436:	4630      	mov	r0, r6
 8007438:	f7ff ff94 	bl	8007364 <__sfputs_r>
 800743c:	3001      	adds	r0, #1
 800743e:	f000 80aa 	beq.w	8007596 <_vfiprintf_r+0x20e>
 8007442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007444:	445a      	add	r2, fp
 8007446:	9209      	str	r2, [sp, #36]	; 0x24
 8007448:	f89a 3000 	ldrb.w	r3, [sl]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80a2 	beq.w	8007596 <_vfiprintf_r+0x20e>
 8007452:	2300      	movs	r3, #0
 8007454:	f04f 32ff 	mov.w	r2, #4294967295
 8007458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745c:	f10a 0a01 	add.w	sl, sl, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	9307      	str	r3, [sp, #28]
 8007464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007468:	931a      	str	r3, [sp, #104]	; 0x68
 800746a:	4654      	mov	r4, sl
 800746c:	2205      	movs	r2, #5
 800746e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007472:	4858      	ldr	r0, [pc, #352]	; (80075d4 <_vfiprintf_r+0x24c>)
 8007474:	f7f8 febc 	bl	80001f0 <memchr>
 8007478:	9a04      	ldr	r2, [sp, #16]
 800747a:	b9d8      	cbnz	r0, 80074b4 <_vfiprintf_r+0x12c>
 800747c:	06d1      	lsls	r1, r2, #27
 800747e:	bf44      	itt	mi
 8007480:	2320      	movmi	r3, #32
 8007482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007486:	0713      	lsls	r3, r2, #28
 8007488:	bf44      	itt	mi
 800748a:	232b      	movmi	r3, #43	; 0x2b
 800748c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007490:	f89a 3000 	ldrb.w	r3, [sl]
 8007494:	2b2a      	cmp	r3, #42	; 0x2a
 8007496:	d015      	beq.n	80074c4 <_vfiprintf_r+0x13c>
 8007498:	9a07      	ldr	r2, [sp, #28]
 800749a:	4654      	mov	r4, sl
 800749c:	2000      	movs	r0, #0
 800749e:	f04f 0c0a 	mov.w	ip, #10
 80074a2:	4621      	mov	r1, r4
 80074a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a8:	3b30      	subs	r3, #48	; 0x30
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d94e      	bls.n	800754c <_vfiprintf_r+0x1c4>
 80074ae:	b1b0      	cbz	r0, 80074de <_vfiprintf_r+0x156>
 80074b0:	9207      	str	r2, [sp, #28]
 80074b2:	e014      	b.n	80074de <_vfiprintf_r+0x156>
 80074b4:	eba0 0308 	sub.w	r3, r0, r8
 80074b8:	fa09 f303 	lsl.w	r3, r9, r3
 80074bc:	4313      	orrs	r3, r2
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	46a2      	mov	sl, r4
 80074c2:	e7d2      	b.n	800746a <_vfiprintf_r+0xe2>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	1d19      	adds	r1, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	9103      	str	r1, [sp, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bfbb      	ittet	lt
 80074d0:	425b      	neglt	r3, r3
 80074d2:	f042 0202 	orrlt.w	r2, r2, #2
 80074d6:	9307      	strge	r3, [sp, #28]
 80074d8:	9307      	strlt	r3, [sp, #28]
 80074da:	bfb8      	it	lt
 80074dc:	9204      	strlt	r2, [sp, #16]
 80074de:	7823      	ldrb	r3, [r4, #0]
 80074e0:	2b2e      	cmp	r3, #46	; 0x2e
 80074e2:	d10c      	bne.n	80074fe <_vfiprintf_r+0x176>
 80074e4:	7863      	ldrb	r3, [r4, #1]
 80074e6:	2b2a      	cmp	r3, #42	; 0x2a
 80074e8:	d135      	bne.n	8007556 <_vfiprintf_r+0x1ce>
 80074ea:	9b03      	ldr	r3, [sp, #12]
 80074ec:	1d1a      	adds	r2, r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	9203      	str	r2, [sp, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfb8      	it	lt
 80074f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80074fa:	3402      	adds	r4, #2
 80074fc:	9305      	str	r3, [sp, #20]
 80074fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075e4 <_vfiprintf_r+0x25c>
 8007502:	7821      	ldrb	r1, [r4, #0]
 8007504:	2203      	movs	r2, #3
 8007506:	4650      	mov	r0, sl
 8007508:	f7f8 fe72 	bl	80001f0 <memchr>
 800750c:	b140      	cbz	r0, 8007520 <_vfiprintf_r+0x198>
 800750e:	2340      	movs	r3, #64	; 0x40
 8007510:	eba0 000a 	sub.w	r0, r0, sl
 8007514:	fa03 f000 	lsl.w	r0, r3, r0
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	4303      	orrs	r3, r0
 800751c:	3401      	adds	r4, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	482c      	ldr	r0, [pc, #176]	; (80075d8 <_vfiprintf_r+0x250>)
 8007526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800752a:	2206      	movs	r2, #6
 800752c:	f7f8 fe60 	bl	80001f0 <memchr>
 8007530:	2800      	cmp	r0, #0
 8007532:	d03f      	beq.n	80075b4 <_vfiprintf_r+0x22c>
 8007534:	4b29      	ldr	r3, [pc, #164]	; (80075dc <_vfiprintf_r+0x254>)
 8007536:	bb1b      	cbnz	r3, 8007580 <_vfiprintf_r+0x1f8>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	3307      	adds	r3, #7
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	443b      	add	r3, r7
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	e767      	b.n	800741c <_vfiprintf_r+0x94>
 800754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007550:	460c      	mov	r4, r1
 8007552:	2001      	movs	r0, #1
 8007554:	e7a5      	b.n	80074a2 <_vfiprintf_r+0x11a>
 8007556:	2300      	movs	r3, #0
 8007558:	3401      	adds	r4, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	4619      	mov	r1, r3
 800755e:	f04f 0c0a 	mov.w	ip, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007568:	3a30      	subs	r2, #48	; 0x30
 800756a:	2a09      	cmp	r2, #9
 800756c:	d903      	bls.n	8007576 <_vfiprintf_r+0x1ee>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c5      	beq.n	80074fe <_vfiprintf_r+0x176>
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	e7c3      	b.n	80074fe <_vfiprintf_r+0x176>
 8007576:	fb0c 2101 	mla	r1, ip, r1, r2
 800757a:	4604      	mov	r4, r0
 800757c:	2301      	movs	r3, #1
 800757e:	e7f0      	b.n	8007562 <_vfiprintf_r+0x1da>
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <_vfiprintf_r+0x258>)
 8007588:	a904      	add	r1, sp, #16
 800758a:	4630      	mov	r0, r6
 800758c:	f3af 8000 	nop.w
 8007590:	4607      	mov	r7, r0
 8007592:	1c78      	adds	r0, r7, #1
 8007594:	d1d6      	bne.n	8007544 <_vfiprintf_r+0x1bc>
 8007596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007598:	07d9      	lsls	r1, r3, #31
 800759a:	d405      	bmi.n	80075a8 <_vfiprintf_r+0x220>
 800759c:	89ab      	ldrh	r3, [r5, #12]
 800759e:	059a      	lsls	r2, r3, #22
 80075a0:	d402      	bmi.n	80075a8 <_vfiprintf_r+0x220>
 80075a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a4:	f7ff fe1d 	bl	80071e2 <__retarget_lock_release_recursive>
 80075a8:	89ab      	ldrh	r3, [r5, #12]
 80075aa:	065b      	lsls	r3, r3, #25
 80075ac:	f53f af12 	bmi.w	80073d4 <_vfiprintf_r+0x4c>
 80075b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075b2:	e711      	b.n	80073d8 <_vfiprintf_r+0x50>
 80075b4:	ab03      	add	r3, sp, #12
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	462a      	mov	r2, r5
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <_vfiprintf_r+0x258>)
 80075bc:	a904      	add	r1, sp, #16
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff f88e 	bl	80066e0 <_printf_i>
 80075c4:	e7e4      	b.n	8007590 <_vfiprintf_r+0x208>
 80075c6:	bf00      	nop
 80075c8:	08007e18 	.word	0x08007e18
 80075cc:	08007e38 	.word	0x08007e38
 80075d0:	08007df8 	.word	0x08007df8
 80075d4:	08007d6c 	.word	0x08007d6c
 80075d8:	08007d76 	.word	0x08007d76
 80075dc:	00000000 	.word	0x00000000
 80075e0:	08007365 	.word	0x08007365
 80075e4:	08007d72 	.word	0x08007d72

080075e8 <__swbuf_r>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	460e      	mov	r6, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	4605      	mov	r5, r0
 80075f0:	b118      	cbz	r0, 80075fa <__swbuf_r+0x12>
 80075f2:	6983      	ldr	r3, [r0, #24]
 80075f4:	b90b      	cbnz	r3, 80075fa <__swbuf_r+0x12>
 80075f6:	f7ff fd43 	bl	8007080 <__sinit>
 80075fa:	4b21      	ldr	r3, [pc, #132]	; (8007680 <__swbuf_r+0x98>)
 80075fc:	429c      	cmp	r4, r3
 80075fe:	d12b      	bne.n	8007658 <__swbuf_r+0x70>
 8007600:	686c      	ldr	r4, [r5, #4]
 8007602:	69a3      	ldr	r3, [r4, #24]
 8007604:	60a3      	str	r3, [r4, #8]
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	071a      	lsls	r2, r3, #28
 800760a:	d52f      	bpl.n	800766c <__swbuf_r+0x84>
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	b36b      	cbz	r3, 800766c <__swbuf_r+0x84>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	1ac0      	subs	r0, r0, r3
 8007616:	6963      	ldr	r3, [r4, #20]
 8007618:	b2f6      	uxtb	r6, r6
 800761a:	4283      	cmp	r3, r0
 800761c:	4637      	mov	r7, r6
 800761e:	dc04      	bgt.n	800762a <__swbuf_r+0x42>
 8007620:	4621      	mov	r1, r4
 8007622:	4628      	mov	r0, r5
 8007624:	f7ff fc98 	bl	8006f58 <_fflush_r>
 8007628:	bb30      	cbnz	r0, 8007678 <__swbuf_r+0x90>
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	60a3      	str	r3, [r4, #8]
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	701e      	strb	r6, [r3, #0]
 8007638:	6963      	ldr	r3, [r4, #20]
 800763a:	3001      	adds	r0, #1
 800763c:	4283      	cmp	r3, r0
 800763e:	d004      	beq.n	800764a <__swbuf_r+0x62>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	07db      	lsls	r3, r3, #31
 8007644:	d506      	bpl.n	8007654 <__swbuf_r+0x6c>
 8007646:	2e0a      	cmp	r6, #10
 8007648:	d104      	bne.n	8007654 <__swbuf_r+0x6c>
 800764a:	4621      	mov	r1, r4
 800764c:	4628      	mov	r0, r5
 800764e:	f7ff fc83 	bl	8006f58 <_fflush_r>
 8007652:	b988      	cbnz	r0, 8007678 <__swbuf_r+0x90>
 8007654:	4638      	mov	r0, r7
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <__swbuf_r+0x9c>)
 800765a:	429c      	cmp	r4, r3
 800765c:	d101      	bne.n	8007662 <__swbuf_r+0x7a>
 800765e:	68ac      	ldr	r4, [r5, #8]
 8007660:	e7cf      	b.n	8007602 <__swbuf_r+0x1a>
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <__swbuf_r+0xa0>)
 8007664:	429c      	cmp	r4, r3
 8007666:	bf08      	it	eq
 8007668:	68ec      	ldreq	r4, [r5, #12]
 800766a:	e7ca      	b.n	8007602 <__swbuf_r+0x1a>
 800766c:	4621      	mov	r1, r4
 800766e:	4628      	mov	r0, r5
 8007670:	f000 f80c 	bl	800768c <__swsetup_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	d0cb      	beq.n	8007610 <__swbuf_r+0x28>
 8007678:	f04f 37ff 	mov.w	r7, #4294967295
 800767c:	e7ea      	b.n	8007654 <__swbuf_r+0x6c>
 800767e:	bf00      	nop
 8007680:	08007e18 	.word	0x08007e18
 8007684:	08007e38 	.word	0x08007e38
 8007688:	08007df8 	.word	0x08007df8

0800768c <__swsetup_r>:
 800768c:	4b32      	ldr	r3, [pc, #200]	; (8007758 <__swsetup_r+0xcc>)
 800768e:	b570      	push	{r4, r5, r6, lr}
 8007690:	681d      	ldr	r5, [r3, #0]
 8007692:	4606      	mov	r6, r0
 8007694:	460c      	mov	r4, r1
 8007696:	b125      	cbz	r5, 80076a2 <__swsetup_r+0x16>
 8007698:	69ab      	ldr	r3, [r5, #24]
 800769a:	b913      	cbnz	r3, 80076a2 <__swsetup_r+0x16>
 800769c:	4628      	mov	r0, r5
 800769e:	f7ff fcef 	bl	8007080 <__sinit>
 80076a2:	4b2e      	ldr	r3, [pc, #184]	; (800775c <__swsetup_r+0xd0>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	d10f      	bne.n	80076c8 <__swsetup_r+0x3c>
 80076a8:	686c      	ldr	r4, [r5, #4]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076b0:	0719      	lsls	r1, r3, #28
 80076b2:	d42c      	bmi.n	800770e <__swsetup_r+0x82>
 80076b4:	06dd      	lsls	r5, r3, #27
 80076b6:	d411      	bmi.n	80076dc <__swsetup_r+0x50>
 80076b8:	2309      	movs	r3, #9
 80076ba:	6033      	str	r3, [r6, #0]
 80076bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	e03e      	b.n	8007746 <__swsetup_r+0xba>
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <__swsetup_r+0xd4>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d101      	bne.n	80076d2 <__swsetup_r+0x46>
 80076ce:	68ac      	ldr	r4, [r5, #8]
 80076d0:	e7eb      	b.n	80076aa <__swsetup_r+0x1e>
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <__swsetup_r+0xd8>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	bf08      	it	eq
 80076d8:	68ec      	ldreq	r4, [r5, #12]
 80076da:	e7e6      	b.n	80076aa <__swsetup_r+0x1e>
 80076dc:	0758      	lsls	r0, r3, #29
 80076de:	d512      	bpl.n	8007706 <__swsetup_r+0x7a>
 80076e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076e2:	b141      	cbz	r1, 80076f6 <__swsetup_r+0x6a>
 80076e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076e8:	4299      	cmp	r1, r3
 80076ea:	d002      	beq.n	80076f2 <__swsetup_r+0x66>
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff fda7 	bl	8007240 <_free_r>
 80076f2:	2300      	movs	r3, #0
 80076f4:	6363      	str	r3, [r4, #52]	; 0x34
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0308 	orr.w	r3, r3, #8
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	b94b      	cbnz	r3, 8007726 <__swsetup_r+0x9a>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d003      	beq.n	8007726 <__swsetup_r+0x9a>
 800771e:	4621      	mov	r1, r4
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f84d 	bl	80077c0 <__smakebuf_r>
 8007726:	89a0      	ldrh	r0, [r4, #12]
 8007728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800772c:	f010 0301 	ands.w	r3, r0, #1
 8007730:	d00a      	beq.n	8007748 <__swsetup_r+0xbc>
 8007732:	2300      	movs	r3, #0
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6963      	ldr	r3, [r4, #20]
 8007738:	425b      	negs	r3, r3
 800773a:	61a3      	str	r3, [r4, #24]
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	b943      	cbnz	r3, 8007752 <__swsetup_r+0xc6>
 8007740:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007744:	d1ba      	bne.n	80076bc <__swsetup_r+0x30>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	0781      	lsls	r1, r0, #30
 800774a:	bf58      	it	pl
 800774c:	6963      	ldrpl	r3, [r4, #20]
 800774e:	60a3      	str	r3, [r4, #8]
 8007750:	e7f4      	b.n	800773c <__swsetup_r+0xb0>
 8007752:	2000      	movs	r0, #0
 8007754:	e7f7      	b.n	8007746 <__swsetup_r+0xba>
 8007756:	bf00      	nop
 8007758:	2000000c 	.word	0x2000000c
 800775c:	08007e18 	.word	0x08007e18
 8007760:	08007e38 	.word	0x08007e38
 8007764:	08007df8 	.word	0x08007df8

08007768 <abort>:
 8007768:	b508      	push	{r3, lr}
 800776a:	2006      	movs	r0, #6
 800776c:	f000 f898 	bl	80078a0 <raise>
 8007770:	2001      	movs	r0, #1
 8007772:	f7fa f861 	bl	8001838 <_exit>

08007776 <__swhatbuf_r>:
 8007776:	b570      	push	{r4, r5, r6, lr}
 8007778:	460e      	mov	r6, r1
 800777a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777e:	2900      	cmp	r1, #0
 8007780:	b096      	sub	sp, #88	; 0x58
 8007782:	4614      	mov	r4, r2
 8007784:	461d      	mov	r5, r3
 8007786:	da08      	bge.n	800779a <__swhatbuf_r+0x24>
 8007788:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	602a      	str	r2, [r5, #0]
 8007790:	061a      	lsls	r2, r3, #24
 8007792:	d410      	bmi.n	80077b6 <__swhatbuf_r+0x40>
 8007794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007798:	e00e      	b.n	80077b8 <__swhatbuf_r+0x42>
 800779a:	466a      	mov	r2, sp
 800779c:	f000 f89c 	bl	80078d8 <_fstat_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	dbf1      	blt.n	8007788 <__swhatbuf_r+0x12>
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ae:	425a      	negs	r2, r3
 80077b0:	415a      	adcs	r2, r3
 80077b2:	602a      	str	r2, [r5, #0]
 80077b4:	e7ee      	b.n	8007794 <__swhatbuf_r+0x1e>
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	2000      	movs	r0, #0
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	b016      	add	sp, #88	; 0x58
 80077be:	bd70      	pop	{r4, r5, r6, pc}

080077c0 <__smakebuf_r>:
 80077c0:	898b      	ldrh	r3, [r1, #12]
 80077c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077c4:	079d      	lsls	r5, r3, #30
 80077c6:	4606      	mov	r6, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	d507      	bpl.n	80077dc <__smakebuf_r+0x1c>
 80077cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	2301      	movs	r3, #1
 80077d6:	6163      	str	r3, [r4, #20]
 80077d8:	b002      	add	sp, #8
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	ab01      	add	r3, sp, #4
 80077de:	466a      	mov	r2, sp
 80077e0:	f7ff ffc9 	bl	8007776 <__swhatbuf_r>
 80077e4:	9900      	ldr	r1, [sp, #0]
 80077e6:	4605      	mov	r5, r0
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7fe fb69 	bl	8005ec0 <_malloc_r>
 80077ee:	b948      	cbnz	r0, 8007804 <__smakebuf_r+0x44>
 80077f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d4ef      	bmi.n	80077d8 <__smakebuf_r+0x18>
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e7e3      	b.n	80077cc <__smakebuf_r+0xc>
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <__smakebuf_r+0x7c>)
 8007806:	62b3      	str	r3, [r6, #40]	; 0x28
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	6020      	str	r0, [r4, #0]
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	6163      	str	r3, [r4, #20]
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	6120      	str	r0, [r4, #16]
 800781a:	b15b      	cbz	r3, 8007834 <__smakebuf_r+0x74>
 800781c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f86b 	bl	80078fc <_isatty_r>
 8007826:	b128      	cbz	r0, 8007834 <__smakebuf_r+0x74>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	89a0      	ldrh	r0, [r4, #12]
 8007836:	4305      	orrs	r5, r0
 8007838:	81a5      	strh	r5, [r4, #12]
 800783a:	e7cd      	b.n	80077d8 <__smakebuf_r+0x18>
 800783c:	08007019 	.word	0x08007019

08007840 <_malloc_usable_size_r>:
 8007840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007844:	1f18      	subs	r0, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	bfbc      	itt	lt
 800784a:	580b      	ldrlt	r3, [r1, r0]
 800784c:	18c0      	addlt	r0, r0, r3
 800784e:	4770      	bx	lr

08007850 <_raise_r>:
 8007850:	291f      	cmp	r1, #31
 8007852:	b538      	push	{r3, r4, r5, lr}
 8007854:	4604      	mov	r4, r0
 8007856:	460d      	mov	r5, r1
 8007858:	d904      	bls.n	8007864 <_raise_r+0x14>
 800785a:	2316      	movs	r3, #22
 800785c:	6003      	str	r3, [r0, #0]
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007866:	b112      	cbz	r2, 800786e <_raise_r+0x1e>
 8007868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800786c:	b94b      	cbnz	r3, 8007882 <_raise_r+0x32>
 800786e:	4620      	mov	r0, r4
 8007870:	f000 f830 	bl	80078d4 <_getpid_r>
 8007874:	462a      	mov	r2, r5
 8007876:	4601      	mov	r1, r0
 8007878:	4620      	mov	r0, r4
 800787a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800787e:	f000 b817 	b.w	80078b0 <_kill_r>
 8007882:	2b01      	cmp	r3, #1
 8007884:	d00a      	beq.n	800789c <_raise_r+0x4c>
 8007886:	1c59      	adds	r1, r3, #1
 8007888:	d103      	bne.n	8007892 <_raise_r+0x42>
 800788a:	2316      	movs	r3, #22
 800788c:	6003      	str	r3, [r0, #0]
 800788e:	2001      	movs	r0, #1
 8007890:	e7e7      	b.n	8007862 <_raise_r+0x12>
 8007892:	2400      	movs	r4, #0
 8007894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007898:	4628      	mov	r0, r5
 800789a:	4798      	blx	r3
 800789c:	2000      	movs	r0, #0
 800789e:	e7e0      	b.n	8007862 <_raise_r+0x12>

080078a0 <raise>:
 80078a0:	4b02      	ldr	r3, [pc, #8]	; (80078ac <raise+0xc>)
 80078a2:	4601      	mov	r1, r0
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	f7ff bfd3 	b.w	8007850 <_raise_r>
 80078aa:	bf00      	nop
 80078ac:	2000000c 	.word	0x2000000c

080078b0 <_kill_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4d07      	ldr	r5, [pc, #28]	; (80078d0 <_kill_r+0x20>)
 80078b4:	2300      	movs	r3, #0
 80078b6:	4604      	mov	r4, r0
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	f7f9 ffab 	bl	8001818 <_kill>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	d102      	bne.n	80078cc <_kill_r+0x1c>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	b103      	cbz	r3, 80078cc <_kill_r+0x1c>
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	bf00      	nop
 80078d0:	20000394 	.word	0x20000394

080078d4 <_getpid_r>:
 80078d4:	f7f9 bf98 	b.w	8001808 <_getpid>

080078d8 <_fstat_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	; (80078f8 <_fstat_r+0x20>)
 80078dc:	2300      	movs	r3, #0
 80078de:	4604      	mov	r4, r0
 80078e0:	4608      	mov	r0, r1
 80078e2:	4611      	mov	r1, r2
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	f7f9 fff6 	bl	80018d6 <_fstat>
 80078ea:	1c43      	adds	r3, r0, #1
 80078ec:	d102      	bne.n	80078f4 <_fstat_r+0x1c>
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	b103      	cbz	r3, 80078f4 <_fstat_r+0x1c>
 80078f2:	6023      	str	r3, [r4, #0]
 80078f4:	bd38      	pop	{r3, r4, r5, pc}
 80078f6:	bf00      	nop
 80078f8:	20000394 	.word	0x20000394

080078fc <_isatty_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_isatty_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7f9 fff5 	bl	80018f6 <_isatty>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_isatty_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_isatty_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20000394 	.word	0x20000394

0800791c <_init>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	bf00      	nop
 8007920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007922:	bc08      	pop	{r3}
 8007924:	469e      	mov	lr, r3
 8007926:	4770      	bx	lr

08007928 <_fini>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	bf00      	nop
 800792c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792e:	bc08      	pop	{r3}
 8007930:	469e      	mov	lr, r3
 8007932:	4770      	bx	lr
